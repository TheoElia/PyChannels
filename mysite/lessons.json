{"meta": {"limit": 26, "next": null, "offset": 0, "previous": null, "total_count": 26}, "objects": [{"body": "<p>Hi, Welcome to <strong>PythonwithEllie</strong>, an initiative to teach beginner programmers Python programming language and programming principles. You will be taken through the necessary materials that will enable you to grasp the basics of computer programming and Python programming language, and by the end of the course, you should be able to easily expand the knowledge acquired here and also be able to write some great programs all on your own.</p>\r\n\r\n<h4>Lesson Structure</h4>\r\n\r\n<p>Each lesson will define the topic and try as much as possible to make the reader understand the programming concept. Analogies and daily life experiences may become necessary to explain some topics for better understanding.</p>\r\n\r\n<h5>Lesson Boxes</h5>\r\n\r\n<p>These are tips, recommendations, challenge boxes that will mostly have a greenish background.</p>\r\n\r\n<h5>Tip Boxes</h5>\r\n\r\n<p>These boxes will have tips that should clarify certain language specific features and language specific syntax to fairly distinguish Python from other languages. These boxes will be labelled as Tip</p>\r\n\r\n<h5>Recommendation boxes</h5>\r\n\r\n<p>These are recommended practices of programming and other recommendations from the team to the reader for a smoother programming experience. It may include some application installations and downloading of some books dimmed good for the course. The course however, will not rely on these materials which means that you will be fine without them but better with them. The boxes here will be labelled as RECOMMENDATION</p>\r\n\r\n<h5>Try it out Boxes</h5>\r\n\r\n<p>These boxes will include some tests for the reader to try out in order to assess the reader&#39;s knowledge as the lesson proceeds. The boxes will be labelled Try It Out</p>\r\n\r\n<h5>Sample Programs</h5>\r\n\r\n<p>Throughout the course, you will encounter sample programs to drive the lessons deeper. Python version 3&#39;s syntax will be used throughout except where stated otherwise.</p>\r\n\r\n<h5>Try Yourself Button</h5>\r\n\r\n<p>You will see a &quot;Try Yourself&quot; button, usually green, at the end of each module(lesson). Click on it to head over to the online<br />\r\nIDE (Integrated Development Environment). Over there, you can practice the sample programs and more to get a hands on practice.<br />\r\nThey say practice makes perfect, well, in programming, practice makes a programmer, there is no way you can become better<br />\r\nwithout practicing. All cases can not be handled by tutorials, no matter how much. You will need to practice to get confident<br />\r\nthat is why we have provided the IDE, get over there and code. Happy Pythoning.</p>\r\n\r\n<h5>Forum</h5>\r\n\r\n<p>We have a dedicated page where you get to ask questions and vent. Head over to the&nbsp;<a href=\"http://learn.pythonanywhere.com/forum/\">chatroom</a>&nbsp;now to interact with others.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>What is Python?</h3>\r\n\r\n<p>Python is a <strong>high-level, Interpreted, Interactive and object-oriented&nbsp;</strong> scripting language. Python was designed to be highly readable and uses English Keywords frequently. It has fewer syntatical constructions than other languages (This means that you need few lines of code to achieve just what other languages will use many lines of codes for).</p>\r\n\r\n<p>You might have found some words in the above Introduction difficult especially if you do not have any programming experience or are a self-taught programmer like myself. So let&#39;s interpret some of them:</p>\r\n\r\n<ul>\r\n\t<li><strong>Python is Interpreted:</strong> This means that it is processed at run-time (while the program is running) by the interpreter and do not need to compile your program before executing it. This is similar to PERL and PHP.</li>\r\n\t<li><strong>Python is Interactive:</strong> This means that you can actually sit at a Python prompt and interact with the interpreter by writing your programs as commands and getting immediate feedback.</li>\r\n\t<li><strong>Python is Object-Oriented:</strong> This means that Python supports Object-oriented style or technique of programming that encapsulates (hides coding data) within objects.</li>\r\n\t<li><strong>Python is for Beginners:</strong>Python is a great language for the beginner programmer and supports a wide range of applications - from simple text and mathematical data processing to WWW browsers and games.</li>\r\n</ul>\r\n\r\n<h4>What can you use Python for?</h4>\r\n\r\n<p>I get this question most often than not from people who visit this site or get to know that I handle Python tutorials. Basically, I will tell you about what I have used Python for and then I may add what other&#39;s have also used Python for.</p>\r\n\r\n<p>This is not to tell you all that Python can do because it depends on your level of knowledge and creativity also.</p>\r\n\r\n<ul>\r\n\t<li><strong>Text and general data processing:</strong> Python is really good at text processing and data manipulation. Modules (extensions mostly written by other Python developers) are available to make your work easier, I have used Python to read webpages and extracted what I wanted.</li>\r\n\t<li><strong>Mathematical data processing:</strong> I began Python with Data Science and I have not found any better programming language at this. Python is powerful for mathematical calculations and data presentations and again, Modules like Numpy, Scipy, Matplotlib, Pandas, among others come in handy if you want to do calculations and also present beautiful plotted data.</li>\r\n\t<li><strong>Web Scripting:</strong> Python can be used as a web scripting language. When web programming, you need to store user data and interact with users, and Python is just great at this, with packages like Flask, Django, ..., you can successfully build your own web application using few lines of codes. And yeah, this site used Python as the scripting language.</li>\r\n\t<li><strong>On my Android device</strong>, I use Qpython which is a great Python programming app that you can use to quickly interact with the Python interpreter and try out some of the new things you learn but beside that, Python provides a scripting layer for android that can be used to control your android device.\r\n\t<div>\r\n\t<h5>RECOMMENDATION</h5>\r\n\tInstall Qpython from Google play store which makes use of Python version 2 mostly or<br />\r\n\tQpython3 which makes use of Python version 3)<br />\r\n\tThis will help you try out codes right on your mobile phone without having to setup your PC.</div>\r\n\t<br />\r\n\tSitting on my android device is a program I call my personal assistant and it was written using python, this assistant can make calls, send emails, reply messages, give weather reports, it can also have a chat with you in case you are bored.</li>\r\n\t<li><strong>Is Python not a great language?</strong></li>\r\n\t<li>Python has also been used by the big guys to achieve a lot more than the personal ones I told you about, Google uses Python so maybe if you learnt Python and became really advanced, you could be employed there,or somewhere else. Do not hesitate to Google how far you can go with Python</li>\r\n\t<li><strong>Artificial Intelligence:</strong> Since Python has great processing ability with data, it has always been a great language for the implementation of Artificial Intelligence and Machine learning.</li>\r\n\t<li>Those are just a few of the possibilities with Python. You can however creatively use it in your own way to achieve what you want because Python allows for even C,Java and other extensions.</li>\r\n</ul>\r\n\r\n<h4>History of Python</h4>\r\n\r\n<p>Python was developed by Guido van Rossum in the late eighties and early nineties at the National Research Institute for Mathematics and Computer Science in the Netherlands. Python is derived from many other languages, including ABC, Modula-3, C, C++, Algol-68, SmallTalk, and Unix shell and other scripting languages. Python is copyrighted. Like Perl, Python source code is now available under the GNU General Public License (GPL). Python is now maintained by a core development team at the institute, although Guido van Rossum still holds a vital role in directing its progress.</p>\r\n\r\n<h4>Python Features</h4>\r\n\r\n<p><strong>Python&#39;s feature highlights include:</strong></p>\r\n\r\n<ul>\r\n\t<li><strong>Easy-to-learn:</strong> Python has relatively few keywords, simple structure, and a clearly defined syntax. This allows the student to pick up the language in a relatively short period of time.</li>\r\n\t<li><strong>Easy-to-read:</strong> Python code is much more clearly defined and visible to the eyes.</li>\r\n\t<li><strong>Easy-to-maintain:</strong> Python&#39;s success is that its source code is fairly easy-to-maintain.</li>\r\n\t<li><strong>A broad standard library:</strong> One of Python&#39;s greatest strengths is the bulk of the library is very portable and cross-platform compatible on UNIX, Windows and Macintosh.</li>\r\n\t<li><strong>Interactive Mode:</strong> Support for an interactive mode in which you can enter results from a terminal right to the language, allowing interactive testing and debugging of snippets of code.</li>\r\n\t<li><strong>Portable:</strong> Python can run on a wide variety of hardware platforms and has the same interface on all platforms.</li>\r\n\t<li><strong>Extendable:</strong> You can add low-level modules to the Python interpreter. These modules enable programmers to add to or customize their tools to be more efficient.</li>\r\n\t<li><strong>Databases:</strong> Python provides interfaces to all major commercial databases.</li>\r\n\t<li><strong>GUI Programming:</strong> Python supports GUI applications that can be created and ported to many system calls, libraries and windows systems, such as Windows MFC, Macintosh and the X Window system of Unix.</li>\r\n\t<li><strong>Scalable:</strong> Python provides a better structure and support for large programs than shell scripting.</li>\r\n</ul>\r\n\r\n<p><strong>Apart from the above-mentioned features, Python has a big list of good features, few are listed below:</strong></p>\r\n\r\n<ul>\r\n\t<li>Support for functional and structured programming methods as well as OOP.</li>\r\n\t<li>It can be used as a scripting language or can be compiled to byte-code for building large applications.</li>\r\n\t<li>Very high-level dynamic data types and supports dynamic type checking.</li>\r\n\t<li>Supports automatic garbage collection.</li>\r\n\t<li>It can be easily integrated with C, C++, COM, ActiveX, CORBA and Java.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T14:10:08.808659", "intro_text": "Hello there, you are welcome to PywE, where Python is taught from scratch. We strive to make the lessons as comprehensive as possible. If you are a beginner, you are at the right place, if you are not, you will still learn a lot to add to your skills", "lesson_id": 1, "resource_uri": "/lessonapi/Lesson/1/", "title": "Introduction"}, {"body": "<p>&nbsp;</p>\r\n\r\n<h4>Our Only Rule</h4>\r\n\r\n<p>The rules applied to sample codes are as follows (its only one): The syntax used is that of Python 3 but whenever there is a difference in the syntax of Python 3 and 2, it will be stated for beginners to quickly learn the differences between the two versions without having to read any other material on that. With that in mind, let&#39;s Python.</p>\r\n\r\n<h4>Identifiers/Variables</h4>\r\n\r\n<p>Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory. Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals or characters in these variables. Assigning Values to Variables: Python variables do not have to be explicitly declared to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is used to assign values to variables. The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. For example:</p>\r\n\r\n<div>\r\n<h4>Variable Naming Rules</h4>\r\nWe just saw how easy it is to create variables but if you watched closely they seem to follow certain rules. Take a look at how we created the last variable: <code>items_to_print</code> Do you think I used the underscores for fun or you are guessing it&#39;s one of the rules? You guessed right, you can&#39;t use spaces in variable naming So here are the rules, no one will beat you for not obeying them, but Python will not understand you and will throw you errors if you don&#39;t follow them.\r\n\r\n<ol>\r\n\t<li>Special characters are not allowed in naming variables. Yeah, but the underscore is allowed, a cheat?</li>\r\n\t<li>Punctuation marks are not allowed in it.</li>\r\n\t<li>Operations are not allowed since Python might try computing things for seeing operations.</li>\r\n\t<li>Identifiers can be a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore (_). Names like <strong>myClass</strong>,<strong>var_1</strong> and <code>&nbsp;print_this_to_screen</code>, all are valid examples.</li>\r\n\t<li>An identifier cannot start with a digit - <strong>1variable</strong> is invalid, but <strong>variable1</strong> perfectly fine.</li>\r\n\t<li>You <strong>cannot</strong> give a variable name that Python has reserved for itself for your own.</li>\r\n</ol>\r\nYeah, of course, you need to know these reserved Keywords.</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table align=\"center\" border=\"2\" style=\"overflow-x:auto\" summary=\"These words should not be used to name variables while programming with python. They belong to the language\">\r\n\t<caption>\r\n\t<h5><strong>Python&#39;s reserved keywords</strong></h5>\r\n\t</caption>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">False</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">class</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">finally</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">is</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">return</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">None</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">continue</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">for</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">lambda</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">try</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">True</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">def</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">from</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">non</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">local</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">while</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">and</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">del</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">global</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">not</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">with</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">as</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">elif</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">if</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">or</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">yield</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">assert</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">else</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">import</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">pass</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff\"><span style=\"color:#0000ff\">break</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff\"><span style=\"color:#0000ff\">except</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff\"><span style=\"color:#0000ff\">in</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff\"><span style=\"color:#0000ff\">raise</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><strong>These are words that have been predefined for the language, which means Python has a certain meaning attached to these names already, so using these names will be confusing Python so it is not allowed.</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Now, let us create some variables:</p>\r\n\r\n<pre>\r\ncounter = 100          # An integer assignment\r\nmiles   = 1000.0       # A floating point\r\nname    = &quot;John&quot;       # A string\r\n\r\nprint (counter)\r\nprint (miles)\r\nprint (name)\r\n    </pre>\r\n\r\n<p>Here, 100, 1000.0 and &quot;John&quot; are the values assigned to counter, miles and name variables, respectively. While running this program, this will produce the following result:</p>\r\n\r\n<pre>\r\n    100\r\n    1000.0\r\n    John</pre>\r\n\r\n<p>Multiple Assignment: Python allows you to assign a single value to several variables simultaneously. For example:</p>\r\n\r\n<pre>\r\n &gt;&gt;&gt; a = b = c = 1</pre>\r\n\r\n<p>Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. You can also assign multiple objects to multiple variables. For example:</p>\r\n\r\n<pre>\r\n\ta, b, c = 1, 2, &quot;john&quot;</pre>\r\n\r\n<p>Here, two integer objects with values 1 and 2 are assigned to variables a and b, and one string object with the value &quot;john&quot; is assigned to the variable c. Standard Data Types: The data stored in memory can be of many types. For example, a person&#39;s age is stored as a numeric value and his or her address is stored as alphanumeric characters. Python has various standard types that are used to define the operations possible on them and the storage method for each of them. Python has five standard data types:</p>\r\n\r\n<ul>\r\n\t<li>Numbers</li>\r\n\t<li>String</li>\r\n\t<li>List</li>\r\n\t<li>Tuple</li>\r\n\t<li>Dictionary</li>\r\n</ul>\r\n\r\n<h4>Python Numbers</h4>\r\n\r\n<p>Number data types store numeric values. They are immutable data types which means that changing the value of a number data type results in a newly allocated object. Number objects are created when you assign a value to them. For example:</p>\r\n\r\n<pre>\r\n    var1 = 1\r\n    var2 = 10</pre>\r\n\r\n<p>You can also delete the reference to a number object by using the del statement. The syntax of the del statement is:</p>\r\n\r\n<pre>\r\ndel var1[,var2[,var3[....,varN]]]]</pre>\r\n\r\n<p>You can delete a single object or multiple objects by using the del statement. For example:</p>\r\n\r\n<pre>\r\n    del var\r\n    del var_a, var_b</pre>\r\n\r\n<p>Python supports four different numerical types:</p>\r\n\r\n<ul>\r\n\t<li>int (signed integers)</li>\r\n\t<li>long (long integers [can also be represented in octal and hexadecimal])</li>\r\n\t<li>float (floating point real values)</li>\r\n\t<li>complex (complex numbers)</li>\r\n</ul>\r\n\r\n<h4>Examples</h4>\r\n\r\n<p>Here are some examples of numbers:</p>\r\n\r\n<table align=\"center\" style=\"overflow-x:auto\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">int</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">long</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">float</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">complex</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">10</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">51924361L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">0.0</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">3.14j</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">100</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">-0x19323L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">15.20</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">45.j</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">-786</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">0122L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">9.322e</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">-36j</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">080</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">0xDEFABCECBDAECBFBAEl</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">32.3+e18</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">.876j</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">-0490</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">535633629843L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">-90.</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">3e+26J</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">-0x260</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">-052318172735L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">-32.54e100</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">4.53e-7j</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">0x69</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">-4721885298529L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">70.2-E12</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:25%\"><span style=\"color:#0000ff\">-.6545+0J</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Python allows you to use a lowercase L with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L.</p>\r\n\r\n<p>A complex number consists of an ordered pair of real floating-point numbers denoted by a + bj, where a is the real part and b is the imaginary part of the complex number.</p>\r\n\r\n<p><a class=\"blog_readmore\" href=\"/numbers\">Read More...</a></p>\r\n\r\n<h4>Python Strings</h4>\r\n\r\n<p>Strings in Python are identified as a contiguous set of characters in between quotation marks. Python allows for either pairs of single or double quotes. Subsets of strings can be taken using the slice operator ( [ ] and [ : ] ) with indexes starting at 0 in the beginning of the string and working their way from -1 at the end. The plus ( + ) sign is the string concatenation operator and the asterisk ( * ) is the repetition operator. For example:</p>\r\n\r\n<pre>\r\nstr = &#39;Hello World!&#39;\r\n\r\nprint (str)          # Prints complete string\r\nprint (str[0])       # Prints first character of the string\r\nprint (str[2:5])     # Prints characters starting from 3rd to 5th\r\nprint (str[2:])      # Prints string starting from 3rd character\r\nprint (str * 2)      # Prints string two times\r\nprint (str + &quot;TEST&quot;) # Prints concatenated string\r\nThis will produce the following result:\r\n    Hello World!\r\n    H\r\n    llo\r\n    llo World!\r\n    Hello World!Hello World!\r\n    Hello World!TEST\r\n    </pre>\r\n\r\n<p><a class=\"blog_readmore\" href=\"/strings\">Read More...</a></p>\r\n\r\n<h4>Python Lists</h4>\r\n\r\n<p>Lists are the most versatile of Python&#39;s compound data types. A list contains items separated by commas and enclosed within square brackets ([]). To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type. The values stored in a list can be accessed using the slice operator ( [ ] and [ : ] ) with indexes starting at 0 in the beginning of the list and working their way to end -1. The plus ( + ) sign is the list concatenation operator, and the asterisk ( * ) is the repetition operator. For example:</p>\r\n\r\n<pre>\r\nlist = [ &#39;abcd&#39;, 786 , 2.23, &#39;john&#39;, 70.2 ]\r\ntinylist = [123, &#39;john&#39;]\r\n\r\nprint (list)          # Prints complete list\r\nprint (list[0])       # Prints first element of the list\r\nprint (list[1:3])     # Prints elements starting from 2nd till 3rd\r\nprint (list[2:])      # Prints elements starting from 3rd element\r\nprint (tinylist * 2)  # Prints list two times\r\nprint (list + tinylist) # Prints concatenated lists\r\nThis will produce the following result:\r\n[&#39;abcd&#39;, 786, 2.23, &#39;john&#39;, 70.200000000000003]\r\nabcd\r\n[786, 2.23]\r\n[2.23, &#39;john&#39;, 70.200000000000003]\r\n[123, &#39;john&#39;, 123, &#39;john&#39;]\r\n[&#39;abcd&#39;, 786, 2.23, &#39;john&#39;, 70.200000000000003, 123, &#39;john&#39;]</pre>\r\n\r\n<p><a class=\"blog_readmore\" href=\"/lists\">Read More...</a></p>\r\n\r\n<h4>Python Tuples</h4>\r\n\r\n<p>A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses. The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as read-only lists. For example:</p>\r\n\r\n<pre>\r\n    tuple = ( &#39;abcd&#39;, 786 , 2.23, &#39;john&#39;, 70.2  )\r\n    tinytuple = (123, &#39;john&#39;)\r\n\r\nprint (tuple)           # Prints complete list\r\nprint (tuple[0])        # Prints first element of the list\r\nprint (tuple[1:3])      # Prints elements starting from 2nd till 3rd\r\nprint (tuple[2:])       # Prints elements starting from 3rd element\r\nprint (tinytuple * 2)   # Prints list two times\r\nprint (tuple + tinytuple) # Prints concatenated lists\r\nThis will produce the following result:\r\n(&#39;abcd&#39;, 786, 2.23, &#39;john&#39;, 70.200000000000003)\r\nabcd\r\n(786, 2.23)\r\n(2.23, &#39;john&#39;, 70.200000000000003)\r\n(123, &#39;john&#39;, 123, &#39;john&#39;)\r\n(&#39;abcd&#39;, 786, 2.23, &#39;john&#39;, 70.200000000000003, 123, &#39;john&#39;)\r\n\r\n    Following is invalid with tuple, because we attempted to update a tuple,\r\n    which is not allowed. Similar case is possible with lists:\r\n\r\n\r\ntuple = ( &#39;abcd&#39;, 786 , 2.23, &#39;john&#39;, 70.2  )\r\nlist = [ &#39;abcd&#39;, 786 , 2.23, &#39;john&#39;, 70.2  ]\r\ntuple[2] = 1000    # Invalid syntax with tuple\r\nlist[2] = 1000     # Valid syntax with list\r\n    </pre>\r\n\r\n<p><a class=\"blog_readmore\" href=\"/tuples\">Read More...</a></p>\r\n\r\n<h4>Python Dictionary</h4>\r\n\r\n<p>Python&#39;s dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object. Dictionaries are enclosed by curly braces ( { } ) and values can be assigned and accessed using square braces ( [] ). For example:</p>\r\n\r\n<pre>\r\ndict = {}\r\ndict[&#39;one&#39;] = &quot;This is one&quot;\r\ndict[2]     = &quot;This is two&quot;\r\n\r\ntinydict = {&#39;name&#39;: &#39;john&#39;,&#39;code&#39;:6734, &#39;dept&#39;: &#39;sales&#39;}\r\n\r\n\r\nprint (dict[&#39;one&#39;])       # Prints value for &#39;one&#39; key\r\nprint (dict[2])           # Prints value for 2 key\r\nprint (tinydict)          # Prints complete dictionary\r\nprint (tinydict.keys())   # Prints all the keys\r\nprint (tinydict.values()) # Prints all the values\r\nThis will produce the following result:\r\nThis is one\r\nThis is two\r\n{&#39;dept&#39;: &#39;sales&#39;, &#39;code&#39;: 6734, &#39;name&#39;: &#39;john&#39;}\r\n[&#39;dept&#39;, &#39;code&#39;, &#39;name&#39;]\r\n[&#39;sales&#39;, 6734, &#39;john&#39;]\r\n    </pre>\r\n\r\n<p>Dictionaries have no concept of order among elements. It is incorrect to say that the elements are &quot;out of order&quot;; they are simply not ordered.</p>\r\n\r\n<h4>Data Type Conversion</h4>\r\n\r\n<p>Sometimes, you may need to perform conversions between the built-in types. To convert between types, you simply use the type name as a function. There are several built-in functions to perform conversion from one data type to another. These functions return a new object representing the converted value.</p>\r\n\r\n<table align=\"center\" style=\"overflow-x:auto\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#0000cc\"><span style=\"color:#ffffff\">Function</span></th>\r\n\t\t\t<th style=\"background-color:#0000cc\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">int(x [,base])</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Converts x to an integer. base specifies the base if x is a string.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">long(x [,base] )</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Converts x to a long integer. base specifies the base if x is a string.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">float(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Converts x to a floating-point number.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">complex(real [,imag])</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Creates a complex number.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">str(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Converts object x to a string representation.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">repr(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Converts object x to an expression string.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">eval(str)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Evaluates a string and returns an object.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">tuple(s)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">&nbsp;Converts s to a tuple.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">list(s</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Converts s to a list.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">set(s)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Converts s to a set.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">dict(d)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">Creates a dictionary. d must be a sequence of (key,value) tuples.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">frozenset(s)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">Converts s to a frozen set.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">chr(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">Converts an integer to a character.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">unichr(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">Converts an integer to a Unicode character.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">ord(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">Converts a single character to its integer value.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">hex(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">Converts an integer to a hexadecimal string.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">oct(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; vertical-align:middle\"><span style=\"color:#0000ff\">Converts an integer to an octal string.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T14:12:35.528969", "intro_text": "Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory. Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory.", "lesson_id": 2, "resource_uri": "/lessonapi/Lesson/2/", "title": "Identifiers"}, {"body": "<p>Let&#39;s get an introduction to strings. Strings are always chain of characters bounded by triple, double quotes or single quotes in Python, a string can also be just a character.</p>\r\n\r\n<pre>\r\n&quot;Hello World&quot;\r\n&quot;12345&quot;\r\n&quot;False&quot;\r\n&#39;my mom is going to school&#39;\r\nAre all strings.</pre>\r\n\r\n<p>In order to tell the computer to output a string to the screen, just write out *print* and between your parenthesis/brackets, type your string. This applies to all the data types we will look at.</p>\r\n\r\n<h5>Accessing Strings</h5>\r\n\r\n<p>To obtain sub-strings, indexing or slicing is used. Square brackets are used and the position (index) of the sub-string or sub-strings is entered within the square brackets; Python then returns the sub-string or sub-strings found at this index. Put this behind your mind, Python treats strings as lists when it comes to slicing and indexing. Let&#39;s look at a practical example: From our previous lesson Variable Naming, let&#39;s give our fourth string example a name and then work on it using indexing and slicing.</p>\r\n\r\n<pre>\r\n<code> sentence = &#39;my mom is going to school&#39;</code></pre>\r\n\r\n<p>NB: I gave it the name sentence which is reasonable enough for what the string says. This string which we have just given the name sentence has a length not equal to the number of letter in it but every character counts. Space is also a character, so guess what the length or number of characters in it will be. We can easily do this by using a method called len on the string sentence.</p>\r\n\r\n<pre>\r\n<code>print(len(sentence))</code>\r\nThis should print out:\r\n&gt;&gt; 25</pre>\r\n\r\n<p>Now, say we want to get only the first letter of the sentence, what do we do. A knowledge of how Python numbers the position of each substring is therefore required.</p>\r\n\r\n<div>\r\n<div>\r\n<p>How Python gives indices: Python gives the first letter in a string the position(index) 0 and the next 0+1 = 1 and the next 0+1+1=2 and it continues so. Since the first letter is not 1 that means our string&#39;s last member will have the index 24, this can also be accessed using the index -1. This means when counting from left to right, Python starts from 0 but when counting from right to left Python begins from -1,-2 till it gets to the first. Look at the image below:</p>\r\n</div>\r\n\r\n<div>&nbsp;</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Back to our problem, we want to get the first letter of the string called sentence. We use square brackets just after the string or the string&#39;s name and put the index of the letter we want between the square brackets:</p>\r\n\r\n<pre>\r\n<code>print(sentence[0])</code></pre>\r\n\r\n<p>This should print out the first letter &#39;m&#39; to the screen for you. So with that you can get any of the letters from the string, but what if you put in 25? Our string *ranges* from 0-24 so putting in 25 will mean you are asking for a letter that is not in the string and therefore out of the range. This will raise an error which we shall learn to handle. Another problem: What if we wanted to get &#39;mom&#39; or any other word from the string. Here comes slicing, we specify the beginning index (that is, where we want Python to put the knife first), separated by a colon(:) and the last index (not inclusive), that is the border. All this should happen in the square brackets. So to get &#39;mom&#39; printed out from &#39;my mom is going to school&#39;: The first &#39;m&#39; stands at index 3 and the last &#39;m&#39; stands at index 5, but we want it to be included so we give the next index as the border (which is 6).</p>\r\n\r\n<pre>\r\n<code>print(sentence[3:6])</code>\r\n\r\nThis should print out\r\n<code>&gt;&gt; mom</code></pre>\r\n\r\n<h5>STRING OPERATIONS</h5>\r\n\r\n<p>If you want Python to begin slicing the list from the beginning, you do not need to begin with 0, you can begin like this:</p>\r\n\r\n<pre>\r\n<code>print(sentence[ :6]))</code>\r\n\r\nThis should print out:\r\n&gt;&gt; my mom</pre>\r\n\r\n<p>The same way if you want Python to begin from somewhere say after &#39;mom&#39; to the very last letter, then you can do this:</p>\r\n\r\n<pre>\r\n<code>print(sentence[6: ])</code>\r\n\r\nThis should give you:\r\n&gt;&gt; is going to school</pre>\r\n\r\n<p>Skipping some sub strings You can also specify steps at which Python should slice a list using a third index called the step. So generally, to slice a string:</p>\r\n\r\n<pre>\r\n<code>ListName[begin:end:step]</code>\r\n\r\n<code>print(sentence[ : : 2])</code></pre>\r\n\r\n<p>This means Python should print the first letter, jump to the next 2 and print that and jump to the next 2 and should continue to do so until it gets to the end. This will be very useful when working with lists like a list off counting numbers and you want to get only even numbers or odd numbers.</p>\r\n\r\n<h5>STRING METHODS</h5>\r\n\r\n<p>Strings can further be manipulated using mathematical operations and built-in method. You can attach two strings together by using the + operator:</p>\r\n\r\n<pre>\r\n<code>&#39;my mom is &#39;+&#39;going to school&#39;</code>\r\nwill produce (Please note the space at the end of &#39;is&#39;):\r\n&gt;&gt; my mom is going to school\r\n\r\nYou can also repeat a string using the * operator:\r\n<code>&#39;my mom &#39; * 3</code>\r\nShould produce:\r\n&gt;&gt; my mom my mom my mom\r\n\r\nTo find out if a character or characters occur in a string, you could use *in* or *not in* keywords:\r\n\r\nThis will be better understood under conditioning your code section. But for now:\r\n\r\n<code>\r\nif &#39;m&#39; in sentence:\r\n    print(&quot;m exists&quot;)\r\nelse:\r\n    print(&quot;nope, no m&quot;)\r\n    </code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Python also provides built-in methods that can be used to manipulate strings in other ways. These methods are called on the string in question and if arguments are required for the method to properly execute, you provide those arguments. You must call the string and then bring a dot(.) and the name of the method after which comes parenthesis or round brackets in which arguments are provided if any. The parenthesis are still brought even if there were no arguments to provide.</p>\r\n\r\n<pre>\r\n1. .capitalize()\r\nThis will capitalize the first letter of the string.\r\n\r\n2. .center(width,filchar)\r\nReturns a space-padded string with the original\r\nstring centered to a total of width given.\r\n\r\n3. .count(substring,begin=0,end=len(string))\r\nThis counts how many times a sub-string occurs within the original string.\r\nYou can specify where Python should start looking from\r\nusing the begin argument and the end, where Python should stop looking.\r\nThese two however default to begin being the start and end being the end\r\nof the string.\r\n\r\n\r\n4\t.decode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)\r\nDecodes the string using the codec registered for encoding.\r\nencoding defaults to the default string encoding.\r\n\r\n5\t.encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)\r\nReturns encoded string version of string; on error, default is to raise a\r\nValueError unless errors is given with &#39;ignore&#39; or &#39;replace&#39;.\r\n\r\n6\t.endswith(suffix, beg=0, end=len(string))\r\nDetermines if string or a substring of string (if starting\r\nindex beg and ending index end are given) ends with suffix;\r\nreturns true if so and false otherwise\r\n\r\n7\t.expandtabs(tabsize=8)\r\nExpands tabs in string to multiple spaces;\r\ndefaults to 8 spaces per tab if tabsize not provided\r\n\r\n8\t.find(str, beg=0 end=len(string))\r\nDetermine if str occurs in string or in a sub-string\r\nof string if starting index beg and ending index end\r\nare given returns index if found and -1 otherwise\r\n\r\n9\t.index(str, beg=0, end=len(string))\r\nSame as find(), but raises an exception if str not found\r\n\r\n10\t.isalnum()\r\nReturns true if string has at least 1 character and\r\nall characters are alphanumeric and false otherwise</pre>\r\n\r\n<pre>\r\n11\t.isalpha()\r\nReturns true if string has at least 1 character and\r\nall characters are alphabetic and false otherwise\r\n\r\n12\t.isdigit()\r\nReturns true if string contains only\r\ndigits and false otherwise\r\n\r\n13\t.islower()\r\nReturns true if string has at least 1 cased\r\ncharacter and all cased characters are in lowercase and false otherwise\r\n\r\n14\t.isnumeric()\r\nReturns true if a unicode string contains only\r\nnumeric characters and false otherwise\r\n\r\n15\t.isspace()\r\nReturns true if string contains only whitespace\r\ncharacters and false otherwise\r\n\r\n16\t.istitle()\r\nReturns true if string is properly &quot;title-cased&quot; and false otherwise\r\n\r\n17\t.isupper()\r\nReturns true if string has at least one cased\r\ncharacter and all cased characters are\r\nin uppercase and false otherwise\r\n\r\n18\t.join(seq)\r\nMerges (concatenates) the string representations of elements\r\nin sequence seq into a string, with separator string\r\n\r\n19\t.len(string)\r\nReturns the length of the string\r\n\r\n20\t.ljust(width[, fillchar])\r\nReturns a space-padded string with the original\r\nstring left-justified to a total of width columns</pre>\r\n\r\n<pre>\r\n21\t.lower()\r\nConverts all uppercase letters in string to lowercase\r\n\r\n22\t.lstrip()\r\nRemoves all leading white space in string\r\n\r\n23\t.maketrans()\r\nReturns a translation table to be used in translate function.\r\n\r\n24\t.max(str)\r\nReturns the max alphabetical character from the string str\r\n\r\n25\t.min(str)\r\nReturns the min alphabetical character from the string str\r\n\r\n26\t.replace(old, new [, max])\r\nReplaces all occurrences of old in string with new or\r\nat most max occurrences if max given\r\n\r\n27\t.rfind(str, beg=0,end=len(string))\r\nSame as find(), but search backwards in string\r\n\r\n28\t.rindex( str, beg=0, end=len(string))\r\nSame as index(), but search backwards in string\r\n\r\n29\t.rjust(width,[, fillchar])\r\nReturns a space-padded string with the original string\r\nright-justified to a total of width columns.\r\n\r\n30\t.rstrip()\r\nRemoves all trailing whitespace of string</pre>\r\n\r\n<pre>\r\n31\t.split(str=&quot;&quot;, num=string.count(str))\r\nSplits string according to delimiter str\r\n(space if not provided) and returns list of\r\nsubstrings; split into at most num substrings if given\r\n\r\n32\t.splitlines( num=string.count(&#39;\\n&#39;))\r\nSplits string at all (or num) NEWLINEs and\r\nreturns a list of each line with NEWLINEs removed\r\n\r\n33\t.startswith(str, beg=0,end=len(string))\r\nDetermines if string or a substring of string\r\n(if starting index beg and ending index end are given)\r\nstarts with substring str; returns true\r\nif so and false otherwise\r\n\r\n34\t.strip([chars])\r\nPerforms both lstrip() and rstrip() on string\r\n\r\n35\t.swapcase()\r\nInverts case for all letters in string\r\n\r\n36\t.title()\r\nReturns &quot;titlecased&quot; version of string, that is, all\r\nwords begin with uppercase and the rest are lowercase\r\n\r\n37\t.translate(table, deletechars=&quot;&quot;)\r\nTranslates string according to translation\r\ntable str(256 chars), removing\r\nthose in the del string\r\n\r\n38\t.upper()\r\nConverts lowercase letters in string to uppercase\r\n\r\n39\t.zfill (width)\r\nReturns original string left-padded with zeros\r\nto a total of width characters; intended for numbers,\r\nzfill() retains any sign given (less one zero)\r\n\r\n40\t.isdecimal()\r\nReturns true if a unicode string contains\r\nonly decimal characters and false otherwise</pre>\r\n\r\n<h5>String Formatting</h5>\r\n\r\n<p>One of Python&#39;s coolest features is the string format operator %. This operator is unique to strings and makes up for the pack of having functions from C&#39;s printf() family. Following is a simple example:</p>\r\n\r\n<pre>\r\n<code>print (&quot;My name is %s and weight is %d kg!&quot;) % (&#39;Ellie&#39;, 60)</code>\r\n\r\nWhen the above code is executed, it produces the following result:\r\n\r\n&gt;&gt;My name is Ellie and weight is 60 kg!</pre>\r\n\r\n<p>Here is the list of complete set of symbols which can be used along with %:</p>\r\n\r\n<pre>\r\nSymbol\tFunctionality\r\n\r\n*\targument specifies width or precision\r\n\r\n-\tleft justification\r\n\r\n+\tdisplay the sign\r\n\r\n\tleave a blank space before a positive number\r\n\r\n#\tadd the octal leading zero ( &#39;0&#39; ) or hexadecimal\r\nleading &#39;0x&#39; or &#39;0X&#39;, depending on whether &#39;x&#39; or &#39;X&#39; were used.\r\n0\tpad from left with zeros (instead of spaces)\r\n\r\n%\t&#39;%%&#39; leaves you with a single literal &#39;%&#39;\r\n\r\n(var)\tmapping variable (dictionary arguments)\r\n\r\nm.n.\tm is the minimum total width and n is the number\r\nof digits to display after the decimal point (if appl.)</pre>\r\n\r\n<h5>TRIPLE QUOTES</h5>\r\n\r\n<p>Python&#39;s triple quotes comes to the rescue by allowing strings to span multiple lines, including verbatim NEWLINEs, TABs, and any other special characters. The syntax for triple quotes consists of three consecutive single or double quotes.</p>\r\n\r\n<pre>\r\n<code>\r\npara_str = &quot;&quot;&quot;this is a long string that is made up of\r\nseveral lines and non-printable characters such as\r\nTAB ( \\t ) and they will show up that way when displayed.\r\nNEWLINEs within the string, whether explicitly given like\r\nthis within the brackets [ \\n ], or just a NEWLINE within\r\nthe variable assignment will also show up.\r\n&quot;&quot;&quot;\r\nprint (para_str)</code>\r\nWhen the above code is executed, it produces the following result.\r\nNote how every single special character has been converted to its printed form,\r\nright down to the last NEWLINE at the end of the string between the &quot;up.&quot;\r\nand closing triple quotes.\r\n\r\nAlso note that NEWLINEs occur either with an explicit carriage return\r\nat the end of a line or its escape code (\\n):\r\n<code>\r\nthis is a long string that is made up of\r\nseveral lines and non-printable characters such as\r\nTAB (    ) and they will show up that way when displayed.\r\nNEWLINEs within the string, whether explicitly given like\r\nthis within the brackets [\r\n ], or just a NEWLINE within\r\nthe variable assignment will also show up.\r\nRaw strings don&#39;t treat the backslash as a special character at all.\r\nEvery character you put into a raw string stays the way you wrote it:\r\n</code>\r\n\r\n\r\n<code>print (&#39;C:\\\\nowhere&#39;)</code>\r\nWhen the above code is executed, it produces the following result:\r\n\r\n<code>&gt;&gt;C:\\nowhere</code>\r\n\r\nNow let&#39;s make use of raw string.\r\nWe would put expression in r&#39;expression&#39; as follows:\r\n\r\n\r\n\r\n<code>print (r&#39;C:\\\\nowhere&#39;)</code>\r\nWhen the above code is executed, it produces the following result:\r\n\r\n<code>&gt;&gt;C:\\\\nowhere</code></pre>\r\n\r\n<h5>UNICODE STRINGS</h5>\r\n\r\n<p>Normal strings in Python are stored internally as 8-bit ASCII, while Unicode strings are stored as 16-bit Unicode. This allows for a more varied set of characters, including special characters from most languages in the world. I&#39;ll restrict my treatment of Unicode strings to the following:</p>\r\n\r\n<pre>\r\n<code>print (u&#39;Hello, world!&#39;)</code>\r\nWhen the above code is executed, it produces the following result:\r\n\r\n<code>&gt;&gt;Hello, world!</code></pre>\r\n\r\n<p>As you can see, Unicode strings use the prefix u, just as raw strings use the prefix r.</p>", "created_by": "Ellie", "date_created": "2018-12-04T14:14:01.424666", "intro_text": "Strings are always chain of characters bounded by triple, double quotes or single quotes in Python,  a string can also be just a character.", "lesson_id": 3, "resource_uri": "/lessonapi/Lesson/3/", "title": "Strings"}, {"body": "<p>Number data types store numeric values. They are immutable data types, which means that changing the value of a number data type results in a newly allocated object. It means numbers when created cannot be altered, an alteration due to an operation on or a manipulation of the number only creates a new number. To create a number in Python simply assign a value to a name. Number objects are created when you assign a value to them. For example:</p>\r\n\r\n<pre>\r\n<code> \r\n&gt;&gt; var1 = 1</code>\r\n<code>\r\n&gt;&gt; var2 = 10\r\n</code>\r\nYou can also delete the reference to a number object by using the del statement.\r\nThe syntax of the del statement is:\r\n\r\n&gt;&gt; del var1[,var2[,var3[....,varN]]]]\r\nYou can delete a single object or multiple objects by using the del statement.\r\nFor example:\r\n\r\n&gt;&gt; del var\r\n&gt;&gt; del var_a, var_b</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5>Python Numerical Types</h5>\r\n\r\n<p>Python supports four different numerical types: int (signed integers): often called just integers or ints, are positive or negative whole numbers with no decimal point. long (long integers ): or longs are integers of unlimited size, written like integers and followed by an uppercase or lowercase L. float (floating point real values) : or floats, represent real numbers and are written with a decimal point dividing the integer and fractional parts. Floats may also be in scientific notation, with E or e indicating the power of 10 (2.5e2 = 2.5 x 102 = 250). complex (complex numbers) : are of the form a + bJ, where a and b are floats and J (or j) represents the square root of -1 (which is an imaginary number). a is the real part of the number, and b is the imaginary part. Complex numbers are not used much in Python programming. Examples: Here are some examples of numbers:</p>\r\n\r\n<div style=\"overflow-x:auto;\">&nbsp;\r\n<table align=\"center\" style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">int</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">long</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">float</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">complex</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">10</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">51924361L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">0.0</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">3.14j</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">100</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">-0x19323L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">15.20</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">45.j</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">-786</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">0122L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">-21.9</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">9.322e-36j</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">080</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">0xDEFABCECBDAECBFBAEL</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><br />\r\n\t\t\t<span style=\"color:#0000ff\">32.3</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">.876j</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">-0490</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">535633629843L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">-90.</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">-.6545+0J</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">-0x260</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">-052318172735L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">-32.54e100</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">3e+26J</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">0x69</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">-4721885298529L</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">70.2-E12</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:25%\"><span style=\"color:#0000ff\">4.53e-7j</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Python allows you to use a lowercase L with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L. A complex number consists of an ordered pair of real floating point numbers denoted by a + bj, where a is the real part and b is the imaginary part of the complex number.</p>\r\n\r\n<h5>Number Type Conversion</h5>\r\n\r\n<p>Python converts numbers internally in an expression containing mixed types to a common type for evaluation. But sometimes, you&#39;ll need to coerce a number explicitly from one type to another to satisfy the requirements of an operator or function parameter. In simple terms, when you are doing calculation involving numbers in Python, Python will convert some number types to others for a uniform calculation but in other cases, you will have to do the conversion yourself. The language therefore provides the following ways to convert from one type to another:</p>\r\n\r\n<pre>\r\nType int(x)to convert x to a plain integer.\r\n\r\nType long(x) to convert x to a long integer.\r\n\r\nType float(x) to convert x to a floating-point number.\r\n\r\nType complex(x) to convert x to a complex number with real part x and imaginary part zero.\r\n\r\nType complex(x, y) to convert x and y to a complex number with\r\nreal part x and imaginary part y. x and y are numeric expressions</pre>\r\n\r\n<h5>Mathematical Functions</h5>\r\n\r\n<p>Python includes the following functions that perform mathematical calculations:</p>\r\n\r\n<pre>\r\nFunction\tReturns ( description )\r\n\r\nabs(x)\tThe absolute value of x: the (positive) distance between x and zero.\r\n\r\nceil(x)\tThe ceiling of x: the smallest integer not less than x\r\n\r\ncmp(x, y)\t-1 if x &lt; y, 0 if x == y, or 1 if x &gt; y\r\n\r\nexp(x)\tThe exponential of x: ex\r\n\r\nfabs(x)\tThe absolute value of x.\r\n\r\nfloor(x)\tThe floor of x: the largest integer not greater than x\r\n\r\nlog(x)\tThe natural logarithm of x, for x&gt; 0\r\n\r\nlog10(x)\tThe base-10 logarithm of x for x&gt; 0 .\r\n\r\nmax(x1, x2,...)\tThe largest of its arguments: the value closest to positive infinity\r\n\r\nmin(x1, x2,...)\tThe smallest of its arguments: the value closest to negative infinity\r\n\r\nmodf(x)\tThe fractional and integer parts of x in a two-item tuple.\r\nBoth parts have the same sign as x. The integer part is returned as a float.\r\n\r\npow(x, y)\tThe value of x**y.\r\n\r\nround(x [,n])\tx rounded to n digits from the decimal point.\r\nPython rounds away from zero as a tie-breaker: round(0.5) is 1.0 and round(-0.5) is -1.0.\r\n\r\nsqrt(x)\tThe square root of x for x &gt; 0</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5>Random Number Functions</h5>\r\n\r\n<p>Random numbers are used for games, simulations, testing, security, and privacy applications. Python includes following functions that are commonly used.</p>\r\n\r\n<pre>\r\nFunction\tDescription\r\nchoice(seq)\tA random item from a list, tuple, or string.\r\n\r\nrandrange ([start,] stop [,step])\tA randomly selected element from range(start, stop, step)\r\n\r\nrandom()\tA random float r, such that 0 is less than or equal to r and r is less than 1\r\n\r\nseed([x])\tSets the integer starting value used in generating random numbers.\r\nCall this function before calling any other random module function. Returns None.\r\n\r\nshuffle(lst)\tRandomizes the items of a list in place. Returns None.\r\n\r\nuniform(x, y)\tA random float r, such that x is less than or equal to r and r is less than y</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h5>Trigonometric Functions</h5>\r\n\r\n<p>Python includes following functions that perform trigonometric calculations:</p>\r\n\r\n<table align=\"center\" style=\"overflow-x:auto\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Function</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">acos(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Return the arc cosine of x, in radians</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">asin(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Return the arc sine of x, in radians.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">atan(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Return the arc tangent of x, in radians.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">atan2(y, x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Return atan(y / x), in radians.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">cos(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Return the cosine of x radians.v</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">hypot(x, y)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle; width:50%\"><span style=\"color:#0000ff\">Return the Euclidean norm, sqrt(x*x + y*y).</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">sin(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Return the sine of x radians.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">tan(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Return the tangent of x radians.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">degrees(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Converts angle x from radians to degrees.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">radians(x)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Converts angle x from degrees to radians.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h5>&nbsp;</h5>\r\n\r\n<h5>Mathematical Constants</h5>\r\n\r\n<p>The module also defines two mathematical constants:</p>\r\n\r\n<table align=\"center\" style=\"overflow-x:auto\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">Constants</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50%\"><span style=\"color:#0000ff\">pi</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50%\"><span style=\"color:#0000ff\">The mathematical constant pi.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50%\"><span style=\"color:#0000ff\">piThe mathematical constant pi.<br />\r\n\t\t\te</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50%\"><span style=\"color:#0000ff\">The mathematical constant e.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T21:13:40.952826", "intro_text": "Number data types store numeric values. They are immutable data types, which means that changing the value of a number data type results in a newly allocated object. It means numbers when created cannot be altered,...", "lesson_id": 4, "resource_uri": "/lessonapi/Lesson/4/", "title": "Numbers"}, {"body": "<p>&nbsp;</p>\r\n\r\n<h4>What is an operator?</h4>\r\n\r\n<p>Simple answer can be given using expression 4 + 5 is equal to 9. Here, 4 and 5 are called operands and + is called operator. Python language supports the following types of operators.</p>\r\n\r\n<ul>\r\n\t<li>Arithmetic Operators</li>\r\n\t<li>Comparison (i.e., Relational) Operators</li>\r\n\t<li>Assignment Operators</li>\r\n\t<li>Logical Operators</li>\r\n\t<li>Bitwise Operators</li>\r\n\t<li>Membership Operators</li>\r\n\t<li>Identity Operators</li>\r\n</ul>\r\n\r\n<p>Let&#39;s have a look on all operators one by one.</p>\r\n\r\n<h4>Python Arithmetic Operators</h4>\r\n\r\n<p>Assume variable a holds 10 and variable b holds 20, then:</p>\r\n\r\n<pre>\r\n    a = 10\r\n    b = 20</pre>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2; width:33.3698%\">&nbsp;Operator</th>\r\n\t\t\t<th style=\"background-color:#54acd2; width:33.3698%\">Description</th>\r\n\t\t\t<th style=\"background-color:#54acd2; width:33.2604%\">Example</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">+ &nbsp; Addition&nbsp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">Adds values on either side of the operator &nbsp;&nbsp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.2604%\">a + b will give 30</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">- &nbsp;Subtraction</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">Subtracts right hand operand from left hand operand</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.2604%\">a - b will give -10</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">* &nbsp;Multiplication</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">Multiplies values on either side of the operator</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.2604%\">a * b will give 200</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">/ &nbsp;Division</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">Divides left hand operand by right hand operand</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.2604%\">b / a will give 2</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">% &nbsp;Modulo</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">Divides left hand operand by right hand operand and returns remainder</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.2604%\">b % a will give 0</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">** Exponent</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">Performs exponential (power) calculation on operators</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.2604%\">a**b will give 10 to the power 20</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">// &nbsp;Floor Division</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3698%\">The division of operands where the result is the quotient in which the digits after the decimal point are removed.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.2604%\">9//2 is equal to 4 and<br />\r\n\t\t\t9.0//2.0 is equal to 4.0</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<h4>Python Comparison Operators</h4>\r\n\r\n<p>Assume variable a holds 10 and variable b holds 20, then:</p>\r\n\r\n<pre>\r\n    a = 10\r\n    b = 20</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2\">Operator</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Description</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Example</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">== (it is equal to)</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Checks if the value of two operands are equal or not, if yes then condition becomes true.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a == b) is false.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">!= (it is not equal to)</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Checks if the value of two operands are equal or not, if values are not equal then condition becomes true.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a != b) is true.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&lt; &gt;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Checks if the value of two operands are equal or not, if values are not equal then condition becomes true. &nbsp;This is similar to != operator.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a &lt;&gt; b) is true.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&gt; (greater than)</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Checks if the value of left operand is greater than the value of right<br />\r\n\t\t\toperand, if yes then condition becomes true.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a &gt; b) false.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&nbsp;&lt; (less than)</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a &lt; b) is true.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&nbsp;&gt;= (greater than or equal to)</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a &gt;= b) is false.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&lt;= (less than or equal to)</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true. &nbsp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a &lt;= b) is true.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<pre>\r\n    a = 10\r\n    b = 20</pre>\r\n\r\n<h4>Python Assignment Operators</h4>\r\n\r\n<p>Assume variable a holds 10 and variable b holds 20, then:</p>\r\n\r\n<pre>\r\n    a = 10\r\n    b = 20</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2\">Operator</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">&nbsp;Description</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Example</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">= (equals)</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Simple assignment operator, Assigns values from right side operands to left side operand</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">c = a + b will assign the value of a + b to c</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">+=</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Add AND assignment operator, It adds right operand to the left<br />\r\n\t\t\toperand and assign the result to left operand</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">c += a is equivalent to c = c + a</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">-=</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Subtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand &nbsp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">c -= a is equivalent to c = c - a<br />\r\n\t\t\t&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">*=</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Multiply AND assignment operator, It multiplies right operand with<br />\r\n\t\t\tthe left operand and assign the result to left operand</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">c *= a is equivalent to c = c * a</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">/=</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Divide AND assignment operator, It divides left operand with the<br />\r\n\t\t\tright operand and assign the result to left operand</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">c /= a is equivalent to c = c / a</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&nbsp;%=</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Modulus AND assignment operator, It takes modulus using two operands and assign the result to left operand</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">c %= a is equivalent to c = c % a</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">**=</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Exponent AND assignment operator, &nbsp;Performs exponential (power) calculation on operators and assign value to the left operand &nbsp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">c **= a is equivalent to c = c ** a</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">//=</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Floor Division and assigns a value, Performs floor division on operators and assign value to the left operand &nbsp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">c //= a is equivalent to c = c // a</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<h4>Python Bit-wise Operators</h4>\r\n\r\n<p>Bitwise operator works on bits and perform bit by bit operation. Assume if a = 60; and b = 13; Now in binary format they will be as follows:</p>\r\n\r\n<pre>\r\na = 0011 1100\r\nb = 0000 1101\r\n-----------------\r\na&amp;b = 0000 1100\r\na|b = 0011 1101\r\na^b = 0011 0001\r\n~a  = 1100 0011\r\n    </pre>\r\n\r\n<p>There are following Bit-wise operators supported by Python language</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2\">&nbsp;Operator</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Description</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Example</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&amp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Binary AND Operator copies a bit to the result if it exists in both operands.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a &amp; b) will give 12 which is 0000 1100</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">|</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Binary OR Operator copies<br />\r\n\t\t\ta bit if it exists in either operand.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a | b) will give 61 which is 0011 1101</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">^</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&nbsp;Binary XOR Operator copies the bit if it is set in one operand but not both. &nbsp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a ^ b) will give 49 which is 0011 0001</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">~</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Binary Ones Complement Operator is unary and has the effect of<br />\r\n\t\t\t&#39;flipping&#39; bits.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(~a ) will give -61 which is 1100 0011 in 2&#39;s complement form due to a signed binary number.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&lt;&lt;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">a &lt;&lt; 2 will give 240 which is 1111 0000</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&gt;&gt;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand. &nbsp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">a &gt;&gt; 2 will give 15 which is 0000 1111</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Python Logical Operators</h4>\r\n\r\n<p>There are following logical operators supported by Python language. Assume variable a holds 10 and variable b holds 20 then:</p>\r\n\r\n<pre>\r\n    a = 10\r\n    b = 20</pre>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2\">Operator</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Description</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">&nbsp;Example</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&nbsp;and</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Called Logical AND operator. If both the operands are true then then condition becomes true. &nbsp; &nbsp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">(a and b) is true. Meaning, a and b are non zero. They both exist</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">or</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Called Logical OR Operator. If any of the two operands are non zero then condition becomes true.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">not</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Called Logical NOT Operator. Used to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">not(a and b) is false.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<h4>Python Membership Operators</h4>\r\n\r\n<p>In addition to the operators discussed previously, Python has membership operators, which test for membership in a sequence, such as strings, lists, or tuples. There are two membership operators explained below:</p>\r\n\r\n<p>y = [1,&#39;x&#39;,2,&#39;hello&#39;,&#39;Effie&#39;,5.6]</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2\">Operator</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Description</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Example</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">in</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Evaluates to true if it finds a variable in the specified sequence and false otherwise.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&#39;x&#39; in y, here it results in a 1(true) if x is a member of sequence y. And from above sequence x exists.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">not in</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Evaluates to true if it does not finds a variable in the specified<br />\r\n\t\t\tsequence and false otherwise.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">&#39;Effie&#39; not in y will result in false since &#39;Effie&#39; exists in the above sequence</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Python Identity Operators</h4>\r\n\r\n<p>Identity operators compare the memory locations of two objects. There are two Identity operators explained below:</p>\r\n\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2\">Operator</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Description</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Example</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">is</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Evaluates to true if the variables on either side of the operator &nbsp;point to the same object and false otherwise.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">x is y, here it results in 1(true) if id(x) equals id(y).</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">is not</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">Evaluates to false if the variables on either side of the operator point to the same object and true otherwise.</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:33.3333%\">x is not y, here it does not results in 1(true) if id(x) is not equal to id(y).</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Python Operators Precedence</h4>\r\n\r\n<p>The following table lists all operators from highest precedence to lowest. This is the order of operation (The &#39;BODMAS&#39;) of Python.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2\">Operator</th>\r\n\t\t\t<th style=\"background-color:#54acd2\">Description</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">**</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">Exponentiation (raise to the power)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">~ + -</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">complement, unary plus and minus<br />\r\n\t\t\t(method names for the last two are +@ and -@)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">&nbsp;* / % //</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">Multiply, divide, modulo and floor division</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">+ -</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">Addition and subtraction</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">&gt;&gt; &lt;&lt;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">Right and left bitwise shift</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">&amp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">Bitwise &#39;AND&#39;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">^ |</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">Bitwise exclusive `OR&#39; and regular `OR&#39;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">&lt;= &lt; &gt; &gt;=&nbsp;</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">Comparison operators</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">&lt;&gt; == !=</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">Equality operators</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">= %= /= //= -= += *= **=</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\">Assignment operators</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8\">is is not</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8\">Identity operators</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8\">in not in</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8\">Membership operators</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8\">not or and</td>\r\n\t\t\t<td style=\"background-color:#d1d5d8\">Logical operators</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<h5>TIP</h5>\r\nYou do not have to keep all these rules in your memory, you will definitely get used to them as you write your own programs. But keep these rules somewhere as you will have to keep getting back to them as the need arises</div>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T21:20:51.865967", "intro_text": "Operators are mathematical signs that are used to evaluate statements. These return a True or False after evaluation, some return the result of the calculation. They are great for mathematical calculations and Python's operators make it easier.", "lesson_id": 5, "resource_uri": "/lessonapi/Lesson/5/", "title": "Operators"}, {"body": "<p>&nbsp;</p>\r\n\r\n<h4>What are Boolean Values?</h4>\r\n\r\n<p>Python uses <code>bool-ean</code> value to express true or false values. Boolean values are only two, <code>True</code> and <code>False</code> Boolean value is named after a British Mathematician called George Boole, George Boole created Boolean Algebra, which is the basis of all modern computer arithmetic. In Python, boolean values are <code>True</code> and <code>False</code>, take notice of the capitalization because <code>true</code> and <code>false</code> are not boolean values and therefore will throw an error. The boolean values <code>True</code> and <code>False</code> are not quoted like strings, which means Python recognises them written raw like that.</p>\r\n\r\n<h4>Boolean Expressions</h4>\r\n\r\n<p>These are Python expressions or &quot;calculations&quot; that return a boolean value (True or False). Expressions that use comparison operators return boolean value as a result. For example, If this were put to you: 3 is greater than 2, your response will not be a number like 5 because we are comparing. You will probably say: &quot;That&#39;s not true (False)&quot;. But an expression like: 3 + 2 should nt yield a true or false answer but another number. So basically, when you write a boolean expression, you should expect True or False and based on the boolean value returned, you can continue your program or stop or branch.</p>\r\n\r\n<div>\r\n<h5>TIP</h5>\r\nif statements are boolean expressions also, because they check if a condition is <code>True</code> or <code>False</code>. If statements however, might not return a True or False value but will execute the code under the &quot;if condition&quot; if the condition evaluates to true and will execute the code under the &quot;else condition&quot; if the condition is false. Loops also rely on boolean values to execute. In fact, conditional expressions depend on boolean values to execute.</div>\r\n\r\n<h4>Examples</h4>\r\n\r\n<p>Copy and run the following code, it might help in understanding the boolean concept</p>\r\n\r\n<pre>\r\n    print(type(True))\r\n    print(type(&quot;False&quot;))\r\n    print(3 &gt; 2)\r\n    print(5==5)\r\n    print(6&gt;=6)\r\n    if 5 &gt; 6:\r\n    #what gets printed should the above expression be True\r\n        print(&quot;Yes, 5 is greater&quot;)\r\n    #What gets printed when the above expression is False\r\n    else:\r\n        print(&quot;Nope, 5 is not greater&quot;)</pre>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T21:23:39.791698", "intro_text": "Python uses bool-ean values to express true or false values. Boolean  values are only two, True and False Boolean value is named after a British Mathematician called George Boole,  George Boole created Boolean Algebra, which is the basis of all modern computer arithmetic.", "lesson_id": 6, "resource_uri": "/lessonapi/Lesson/6/", "title": "Booleans"}, {"body": "<p>Python&#39;s list is another datatype that can be used to keep other basic datatypes in a fairly organised manner. This is because members of a list are given position numbers by the Python interpreter and therefore can be accessed using their positions called indexes. A list is therefore a sequence. To define a python list: listname = [first_member,second_member,...] These members can be any of the following datatypes:</p>\r\n\r\n<pre>\r\nBoolean\r\nNumber\r\nString\r\nList\r\nTuple\r\nDictionary</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>List Indexing</h4>\r\n\r\n<p>Python assigns integers to the position of the members in the list. The first_member gets the index 0, the second_member gets the index 1 and so on Python adds 1 to the previous index to get the index of the current member.Since a list can contain a lot of members at once, the last member is referenced -1 to make it easier to access.</p>\r\n\r\n<h4>Indexing Vs. Slicing Lists</h4>\r\n\r\n<p>When you create a list in python, python gives a position number to each item in the list depending on where it appears in the list, the numbering is done from 0 to the last item (n-1), where n is the number if items in the list. So, if there are 10 items in a list, the first item will take position(index) 0 and the last item will take (10-1) = 9. You can therefore request Python to give you a particular item from the list by specifying it&#39;s index to Python - indexing You can also ask Python to give you items from a certain point to a certain point, you can even specify if Python should jump over particular ones, this is called list slicing.</p>\r\n\r\n<h4>The Program</h4>\r\n\r\n<pre>\r\nMy_list = [&#39;hello&#39;, 2,3.6,True]\r\n\r\n#Let&#39;s call print\r\nprint(My_list)\r\n\r\n#Now let&#39;s specify some index\r\nprint(My_list[3])\r\n\r\n#This should print the\r\n#fourth item in the\r\n#list which is at index 3.\r\n\r\n#Now let&#39;s slice\r\n\r\nprint(My_list[0:3])\r\n\r\n#This should print from the first\r\n#item to the third item,\r\n#leaving out the one at\r\n#index 3</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>When you want Python to print from the beginning of the list, you don&#39;t need to specify the 0, just do this list_name [ : end index here]. If you want Python to print out every member of the list but at a certain step, then do this: list_name[ : :step] If your step was 2, then Python will print the first item and jump to the third and jump to the fifth, that&#39;s a smart way print out odd number is your list is made of counting numbers. You can simply ask for a reverse list by making your step -1, this will tell Pytjon to print the last item first and go backwards. Like this:</p>\r\n\r\n<pre>\r\nlist_name[ : : -1]</pre>\r\n\r\n<p>Python should print out a reverse list.</p>\r\n\r\n<div>\r\n<h5>Try it Out</h5>\r\nCreate a list of counting numbers from 0 to 21, extract a reverse of even numbers from it. Python should print out a reverse list.</div>\r\n\r\n<h4>Updating Lists</h4>\r\n\r\n<p>You can update single or multiple elements of lists by giving the slice on the left-hand side of the assignment operator, and you can add to elements in a list with the append() method. Following is a simple example:</p>\r\n\r\n<pre>\r\nlist = [&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000];\r\n\r\nprint (&quot;Value available at index 2 : &quot;,list[2])\r\n\r\nlist[2] = 2001\r\nprint (&quot;New value available at index 2 : &quot;,list[2])</pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\nValue available at index 2 : 1997\r\nNew value available at index 2 : 2001</pre>\r\n\r\n<h4>Delete List Elements</h4>\r\n\r\n<p>To remove a list element, you can use either the del statement if you know exactly which element(s) you are deleting or the remove() method if you do not know. Following is a simple example:</p>\r\n\r\n<pre>\r\nlist1 = [&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000];\r\n\r\n&gt;&gt;print (list1)\r\n&gt;&gt;del list1[2]\r\nprint (&quot;After deleting value at index 2 : &quot;,list1;)</pre>\r\n\r\n<p>When the above code is executed, it produces following result:</p>\r\n\r\n<pre>\r\n[&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000]\r\nAfter deleting value at index 2 :\r\n[&#39;physics&#39;, &#39;chemistry&#39;, 2000]</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Basic List Operations</h4>\r\n\r\n<p>Lists respond to the + and * operators much like strings; they mean concatenation and repetition here too, except that the result is a new list, not a string. In fact, lists respond to all of the general sequence operations we used on strings in the Strings section.</p>\r\n\r\n<div>\r\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:center\"><span style=\"color:#ffffff\">Python Expression</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:center\"><span style=\"color:#ffffff\">Results</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:center\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">len([1, 2, 3])</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">3</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">Length</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">[1, 2, 3] + [4, 5, 6]</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">[1, 2, 3, 4, 5, 6]</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">Concatenation</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">[&#39;Hi!&#39;] * 4</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">[&#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;]</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">Repetition</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">3 in [1, 2, 3]</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">True</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">Membership</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">\r\n\t\t\t<p><span style=\"color:#0000ff\">for x in [1, 2, 3]:</span></p>\r\n\r\n\t\t\t<p><span style=\"color:#0000ff\">&nbsp; &nbsp; print x</span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"text-align:center\">\r\n\t\t\t<p><span style=\"color:#0000ff\">1</span></p>\r\n\r\n\t\t\t<p><span style=\"color:#0000ff\">2</span></p>\r\n\r\n\t\t\t<p><span style=\"color:#0000ff\">3</span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">Iteration</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Indexing, Slicing, and Matrixes</h4>\r\n\r\n<p>Because lists are sequences, indexing and slicing work the same way for lists as they do for strings. Assuming following input:</p>\r\n\r\n<pre>\r\nL = [&#39;spam&#39;, &#39;Spam&#39;, &#39;SPAM!&#39;]\r\n\r\n</pre>\r\n\r\n<div>\r\n<table align=\"center\" border=\"2\" cellpadding=\"1\" cellspacing=\"1\" style=\"overflow-x:auto; width:500px\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:center\"><span style=\"color:#ffffff\">Python Expression</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:center\"><span style=\"color:#ffffff\">Results</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:center\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">L[2]</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">&#39;SPAM!&#39;</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">Offsets start at zero</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">L[-2]</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">&#39;Spam&#39;</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">Negative: count from the right</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">L[1:]</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">[&#39;Spam&#39;, &#39;SPAM!&#39;]</span></td>\r\n\t\t\t<td style=\"text-align:center\"><span style=\"color:#0000ff\">Slicing fetches sections</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Built-in List Functions &amp; Methods</p>\r\n\r\n<p>Python includes the following list functions:</p>\r\n\r\n<pre>\r\nSN\tFunction with Description\r\n\r\n1\tcmp(list1, list2)\r\nCompares elements of both lists.\r\n\r\n2\tlen(list)\r\nGives the total length of the list.\r\n\r\n3\tmax(list)\r\nReturns item from the list with max value.\r\n\r\n4\tmin(list)\r\nReturns item from the list with min value.\r\n\r\n5\tlist(seq)\r\nConverts a tuple into list.\r\nPython includes following list methods\r\n\r\nSN\tMethods with Description\r\n1\tlist.append(obj)\r\nAppends object obj to list\r\n\r\n2\tlist.count(obj)\r\nReturns count of how many times obj occurs in list\r\n\r\n3\tlist.extend(seq)\r\nAppends the contents of seq to list\r\n\r\n4\tlist.index(obj)\r\nReturns the lowest index in list that obj appears\r\n\r\n5\tlist.insert(index, obj)\r\nInserts object obj into list at offset index\r\n\r\n6\tlist.pop(obj=list[-1])\r\nRemoves and returns last object or obj from list\r\n\r\n7\tlist.remove(obj)\r\nRemoves object obj from list\r\n\r\n8\tlist.reverse()\r\nReverses objects of list in place\r\n\r\n9\tlist.sort([func])\r\nSorts objects of list, use compare func if given</pre>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T21:25:43.482945", "intro_text": "Python's list is another datatype that can be used to keep other basic datatypes in a fairly organised manner. This is because members of a list are given position numbers by the Python interpreter and therefore can be accessed using their positions called indexes.", "lesson_id": 7, "resource_uri": "/lessonapi/Lesson/7/", "title": "Lists"}, {"body": "<p>The rules applied to sample codes are as follows (its only one):<br />\r\n<strong>The syntax used is that of Python 3 but whenever there is a difference in the syntax of Python 3 and 2, it will be stated for beginners to quickly learn the differences between the two versions without having to read any other material on that.</strong><br />\r\nWith that in mind, let&#39;s Python.<br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<h3>Python Tuples</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A <strong>tuple</strong> is a sequence of immutable Python objects. Tuples are sequences, just like lists. The only difference is that tuples can&#39;t be changed i.e., tuples are immutable and tuples use parentheses and lists use square brackets.</p>\r\n\r\n<p>Creating a tuple is as simple as putting different comma-separated values and optionally you can put these comma-separated values between parentheses also. For example:</p>\r\n\r\n<pre>\r\n<strong>tup1</strong> = (&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000)\r\n\r\n<strong>tup2</strong> = (1, 2, 3, 4, 5 )\r\n\r\n<strong>tup3</strong> = &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;\r\n\r\n</pre>\r\n\r\n<p>The empty tuple is written as two parentheses containing nothing:</p>\r\n\r\n<p><strong>tup1</strong> = ();</p>\r\n\r\n<p>To write a tuple containing a single value you have to include a comma, even though there is only one value:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>tup1</strong> = (50,);</p>\r\n\r\n<p>Like string indices, tuple indices start at 0, and tuples can be sliced, concatenated and so on.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<h5>Note</h5>\r\nThe syntax used in the following examples is of Python2.x. Print statements in Python2.x ignore parenthesis and in order to print a next line on the same line a comma is used after the first print value. For example:<br />\r\n<code>print &quot;value of x,y:&quot;,print 1,2</code><br />\r\nThis should print:<br />\r\n<code>value of x,y : 1 2</code></div>\r\n\r\n<h3>Accessing Values in Tuples:</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To access values in tuple, use the square brackets for slicing along with the index or indices to obtain value available at that index. Following is a simple example:</p>\r\n\r\n<pre>\r\n<code>\r\n<strong>tup1</strong> = (&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000)\r\n<strong>tup2</strong> = (1, 2, 3, 4, 5, 6, 7 )\r\n\r\nprint &quot;tup1[0]: &quot;, tup1[0]\r\nprint &quot;tup2[1:5]: &quot;, tup2[1:5]\r\n</code></pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\n<code>\r\n<strong>tup1[0]</strong>:  physics\r\n<strong>tup2</strong>[1:5]:  [2, 3, 4, 5]\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Updating Tuples:</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Tuples are immutable which means you cannot update or change the values of tuple elements.</p>\r\n\r\n<p>You are able to take portions of existing tuples to create new tuples as the following example demonstrates:</p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n\r\n\r\ntup1 = (12, 34.56);\r\n\r\ntup2 = (&#39;abc&#39;, &#39;xyz&#39;);\r\n\r\n</pre>\r\n\r\n<p># Following action is not valid for tuples</p>\r\n\r\n<p># <strong>tup1[0]</strong> = 100;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p># So let&#39;s create a new tuple as follows</p>\r\n\r\n<pre>\r\n<strong>tup3</strong> = <strong>tup1</strong> + <strong>tup2</strong>;\r\n\r\nprint <strong>tup3</strong>;\r\n\r\n    </pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\n(12, 34.56, &#39;abc&#39;, &#39;xyz&#39;)</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Delete Tuple Elements:</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Removing individual tuple elements is not possible. There is, of course, nothing wrong with putting together another tuple with the undesired elements discarded.</p>\r\n\r\n<p>To explicitly remove an entire tuple, just use the del statement. Following is a simple example:</p>\r\n\r\n<p>#!/usr/bin/python</p>\r\n\r\n<pre>\r\n<strong>\r\ntup = (&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000);\r\n\r\nprint tup;\r\ndel tup;\r\nprint &quot;After deleting tup : &quot;\r\nprint tup;\r\n</strong></pre>\r\n\r\n<p>This will produce following result. Note an exception raised, this is because after del tup tuple does not exist any more:</p>\r\n\r\n<pre>\r\n(&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000)</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>After deleting tup :</p>\r\n\r\n<p>Traceback (most recent call last):</p>\r\n\r\n<pre>\r\n  File &quot;test.py&quot;, line 9, in\r\n    print tup;</pre>\r\n\r\n<p>NameError: name &#39;tup&#39; is not defined</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Basic Tuples Operations:</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Tuples respond to the <strong>+</strong> and <strong>*</strong> operators much like strings; they mean concatenation and repetition here too, except that the result is a new tuple, not a string.</p>\r\n\r\n<p>In fact, tuples respond to all of the general sequence operations we used on strings in the prior chapter :</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table align=\"center\" border=\"2\" style=\"overflow-x:auto\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#0000ff; width:39.3214%\"><span style=\"color:#ffffff\">Python Expression</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff; width:33.3333%\"><span style=\"color:#ffffff\">RESULTS</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff; width:27.1457%\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:39.3214%\"><span style=\"color:#0000ff\">len((1, 2, 3))</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:33.3333%\"><span style=\"color:#0000ff\">3</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:27.1457%\"><span style=\"color:#0000ff\">Length</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:39.3214%\"><span style=\"color:#0000ff\">(1, 2, 3) + (4, 5, 6)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:33.3333%\"><span style=\"color:#0000ff\">(1, 2, 3, 4, 5, 6)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:27.1457%\"><span style=\"color:#0000ff\">Concatenation</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:39.3214%\"><span style=\"color:#0000ff\">(&#39;Hi!&#39;,) * 4</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:33.3333%\"><span style=\"color:#0000ff\">(&#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;, &#39;Hi!&#39;)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:27.1457%\"><span style=\"color:#0000ff\">Repetition</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:39.3214%\"><span style=\"color:#0000ff\">3 in (1, 2, 3)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:33.3333%\"><span style=\"color:#0000ff\">True</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:27.1457%\"><span style=\"color:#0000ff\">Membership</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:39.3214%\">\r\n\t\t\t<p><span style=\"color:#0000ff\">for x in (1, 2, 3):</span></p>\r\n\r\n\t\t\t<p><span style=\"color:#0000ff\">&nbsp; &nbsp; print x</span></p>\r\n\t\t\t</td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:33.3333%\"><span style=\"color:#0000ff\">1<br />\r\n\t\t\t2<br />\r\n\t\t\t3</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center; width:27.1457%\"><span style=\"color:#0000ff\">Iteration</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Indexing, Slicing, and Matrices:</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Because tuples are sequences, indexing and slicing work the same way for tuples as they do for strings. Assuming following input:</p>\r\n\r\n<pre>\r\nL = (&#39;spam&#39;, &#39;Spam&#39;, &#39;SPAM!&#39;)\r\n\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table align=\"center\" border=\"2\" style=\"overflow-x:auto\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#0000ff; text-align:center\"><span style=\"color:#ffffff\">Python Expression</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff; text-align:center\"><span style=\"color:#ffffff\">Results</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff; text-align:center\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center\"><span style=\"color:#0000ff\">L[2]</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center\"><span style=\"color:#0000ff\">&#39;SPAM!&#39;</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center\"><span style=\"color:#0000ff\">Offsets start at zero</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center\"><span style=\"color:#0000ff\">L[-2]</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center\"><span style=\"color:#0000ff\">&#39;Spam&#39;</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center\"><span style=\"color:#0000ff\">Negative: count from the right</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center\"><span style=\"color:#0000ff\">L[1:]</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center\"><span style=\"color:#0000ff\">[&#39;Spam&#39;, &#39;SPAM!&#39;]</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:center\"><span style=\"color:#0000ff\">Slicing fetches sections</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>No Enclosing Delimiters:</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Any set of multiple objects, comma-separated, written without identifying symbols, i.e., brackets for lists, parentheses for tuples, etc., default to tuples, as indicated in these short examples:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\n\r\n\r\n\r\nprint &#39;abc&#39;, -4.24e93, 18+6.6j, &#39;xyz&#39;;\r\n\r\nx, y = 1, 2;\r\n\r\nprint &quot;Value of x , y : &quot;, x,y;\r\n\r\n</pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\nabc -4.24e+93 (18+6.6j) xyz\r\nValue of x , y : 1 2</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Built-in Tuple Functions:</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Python includes the following tuple functions:</p>\r\n\r\n<h5>SNFunction with Description</h5>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<pre>\r\n<strong>\t.cmp(tuple1, tuple2)</strong>\r\n\r\n    Compares elements of both tuples.</pre>\r\n\t</li>\r\n\t<li>\r\n\t<pre>\r\n<strong>\t.len(tuple)</strong>\r\n\r\n    Gives the total length of the tuple.</pre>\r\n\t</li>\r\n\t<li>\r\n\t<pre>\r\n<strong>\t.max(tuple)</strong>\r\n\r\n    Returns item from the tuple with max value.</pre>\r\n\t</li>\r\n\t<li>\r\n\t<pre>\r\n<strong>\t.min(tuple)</strong>\r\n\r\n    Returns item from the tuple with min value.</pre>\r\n\t</li>\r\n\t<li>\r\n\t<pre>\r\n<strong>\t.tuple(seq)</strong>\r\n\r\n    Converts a list into tuple.</pre>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T21:27:32.685292", "intro_text": "A tuple is a sequence of immutable Python objects. Tuples are sequences, just like lists. The only difference is that tuples can't be changed i.e., tuples are immutable and tuples use parentheses and lists use square brackets.", "lesson_id": 8, "resource_uri": "/lessonapi/Lesson/8/", "title": "Tuples"}, {"body": "<p>There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially(From top to down): The first statement in a function is executed first, followed by the second, and so on. But conditioning your code can make Python behave in another way while executing the code from top to down. Programming languages provide various control structures that allow for more complicated execution paths. A loop statement allows us to execute a statement or group of statements multiple times.</p>\r\n\r\n<p>Python programming language provides the following types of loops to handle looping requirements.</p>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center\"><span style=\"color:#ffffff\">Loop Type</span></th>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">while loop</span></td>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">Repeats a statement or group of statements while a given condition is true.<br />\r\n\t\t\t&nbsp; It tests the condition before executing the loop body.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">for loop</span></td>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">nested loops</span></td>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">You can use one or more loop inside any another while, for or do..while loop.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">Loop Control<br />\r\n\t\t\tStatements</span></td>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">Loop control statements change execution from its normal sequence.<br />\r\n\t\t\t&nbsp;When execution leaves a scope, all automatic objects that were created in that scope are destroyed.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\">&nbsp;</td>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\">&nbsp;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Python supports the following control statements.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#2c82c9; text-align:center\"><span style=\"color:#ffffff\">Control Statement</span></th>\r\n\t\t\t<th style=\"background-color:#2c82c9; text-align:center\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">break statement</span></td>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">Terminates the loop statement and transfers<br />\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;execution to the statement immediately following the loop.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">continue statement</span></td>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">Causes the loop to skip the remainder of its body and<br />\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; immediately retest its condition prior to reiterating.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">pass statement</span></td>\r\n\t\t\t<td style=\"background-color:#7c706b; text-align:center; width:50%\"><span style=\"color:#ffffff\">The pass statement in Python is used when a statement is<br />\r\n\t\t\trequired syntactically but you do not want any command<br />\r\n\t\t\t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; or code to execute.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>", "created_by": "Ellie", "date_created": "2018-12-04T21:35:19.311169", "intro_text": "There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially(From top to down): The first statement in a function is executed first, followed by the second, and so on.", "lesson_id": 9, "resource_uri": "/lessonapi/Lesson/9/", "title": "Loops"}, {"body": "<p>A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing. As you already know, Python gives you many built-in functions like print(), etc. but you can also create your own functions. These functions are called user-defined functions.</p>\r\n\r\n<h4>Explaining Functions</h4>\r\n\r\n<p>Functions are defined as a block of reusable code. It means we want a way to store our code that does a particular activity so that just as we call a variable after storing a value in it, we can simply call the block of code by name and the activity will be done.&nbsp;</p>\r\n\r\n<p>Those of you who have a math background will notice that functions are from algebra. Imagine you want to calculate the area of a triangle.&nbsp;</p>\r\n\r\n<p>Every time you are given the dimensions of the triangle, you write down a formula and then plug in the dimensions and then you have your answer.</p>\r\n\r\n<p>&nbsp;Your formula acts as the function or a magic box, plug in the values and then you have your answer but the difference between a formula and a function is that, with formula, you would have to solve after plugging in the values, but with a function the answer can be deduced just after plugging in the values because it is solved once, it&#39;s not much of a difference though.&nbsp;</p>\r\n\r\n<p>Let&#39;s see area of a triangle.&nbsp;</p>\r\n\r\n<p>Area = 0.5*base*height<br />\r\nSo if you were given the base and height to be 15 and 5 respectively, then you have: Area = 0.5*15*5 You just need to simplify this.</p>\r\n\r\n<p>&nbsp;Now supposed you were given the same type of questions with different dimensions, about 10 questions.&nbsp;</p>\r\n\r\n<p>Every time you need to write the formula and plug in the values for all the 10 questions. This is where functions come in handy, you define the formula once and anytime you call the function and plug in your value, you get your answer.&nbsp;</p>\r\n\r\n<h4>Defining functions</h4>\r\n\r\n<ol>\r\n\t<li>Since we need to call the function, that means we need to give it a name.&nbsp;</li>\r\n\t<li>We need to plug in values with certain formulas, so if needed then we have to make space for where we will plug in the values, this is called parameters or function input&nbsp;</li>\r\n\t<li>&nbsp;Now we define what the function does. For example in area of a triangle, the function multiplies 0.5 with the input called base and the input called height&nbsp;</li>\r\n\t<li>Now what answer do we want our function to return? This is called the return value. In the example above, we would like the function to return the final answer, that is the Area.&nbsp;</li>\r\n</ol>\r\n\r\n<p>Note: In Python, you can choose not to return anything.</p>\r\n\r\n<p>&nbsp;Python begins a function with &quot;def&quot;&nbsp;</p>\r\n\r\n<h4>The program:</h4>\r\n\r\n<pre>\r\ndef area_of_tria(base,height): \r\nArea = 0.5*base*height \r\nreturn Area \r\n# Now to call our function \r\n# and print our function&#39;s return value \r\nprint (area_of_tria(15,5)) </pre>\r\n\r\n<p>End of program.&nbsp;</p>\r\n\r\n<h4>Syntax:&nbsp;</h4>\r\n\r\n<ol>\r\n\t<li>Begin a function with &quot;def&quot; and provide the function name, choosing a name that easy to associate with what the function does is appropriate.&nbsp;</li>\r\n\t<li>Bring parentheses after the name of the function and <strong>if</strong> your function takes inputs then specify the inputs it takes in the parentheses. If it does not take any input, still bring the brackets but don&#39;t specify anything in it.&nbsp;</li>\r\n\t<li>Bring a colon after the brackets&nbsp;</li>\r\n\t<li>What the function does follows, this should be on the next line and should be evenly indented (usually four spaces or a tab)</li>\r\n\t<li>Now bring the keyword &quot;return&quot; and bring what you want the function to return after it.&nbsp;</li>\r\n\t<li>To call a function, write out the name of the function and provide inputs in the brackets if it requires inputs.&nbsp;</li>\r\n\t<li>To see the return value of the function, please bring the function <strong>print()</strong> before calling your own function.</li>\r\n</ol>\r\n\r\n<h5>Try yourself</h5>\r\n\r\n<p>Write a function that takes length as input and returns the perimeter of a square.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Defining a Function</h4>\r\n\r\n<p>You can define functions to provide the required functionality. Here are simple rules to define a function in Python.</p>\r\n\r\n<ul>\r\n\t<li>Function blocks begin with the keyword def followed by the function name and parentheses ( ( ) ).</li>\r\n\t<li>Any input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses.</li>\r\n\t<li>The first statement of a function can be an optional statement - the documentation string of the function or</li>\r\n\t<li>The code block within every function starts with a colon (:) and is indented.</li>\r\n\t<li>The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None.</li>\r\n</ul>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\ndef functionname( parameters ):\r\n   &quot;function_docstring&quot;\r\n   function_suite\r\n   return [expression]\r\n    </pre>\r\n\r\n<p>By default, parameters have a positional behavior and you need to inform them in the same order that they were defined. Example: Here is the simplest form of a Python function. This function takes a string as input parameter and prints it on standard screen.</p>\r\n\r\n<pre>\r\ndef printme( str ):\r\n   &quot;This prints a passed string into this function&quot;\r\n   print str\r\n   return\r\n    </pre>\r\n\r\n<h4>Calling a Function</h4>\r\n\r\n<p>Defining a function only gives it a name, specifies the parameters that are to be included in the function and structures the blocks of code. Once the basic structure of a function is finalized, you can execute it by calling it from another function or directly from the Python prompt. Following is the example to call printme() function:</p>\r\n\r\n<pre>\r\n# Function definition is here\r\ndef printme( str_par ):\r\n   &quot;This prints a passed string into this function&quot;\r\n   print str_par\r\n   return</pre>\r\n\r\n<pre>\r\n# Now you can call printme function\r\nprintme(&quot;I&#39;m the first call to user defined function!&quot;)\r\nprintme(&quot;Again second call to the same function&quot;)\r\n    </pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\nI&#39;m first call to user defined function!\r\nAgain second call to the same function\r\nPass by reference vs value\r\n    </pre>\r\n\r\n<p>All parameters (arguments) in the Python language are passed by reference. It means if you change what a parameter refers to within a function, the change also reflects back in the calling function. For example:</p>\r\n\r\n<pre>\r\n# Function definition is here\r\ndef changeme( mylist ):\r\n   &quot;This changes a passed list into this function&quot;\r\n   mylist.append([1,2,3,4])\r\n   print (&quot;Values inside the function: &quot;, mylist)\r\n   return\r\n\r\n# Now you can call changeme function\r\nmylist = [10,20,30]\r\nchangeme( mylist )\r\nprint (&quot;Values outside the function: &quot;, mylist)\r\n    </pre>\r\n\r\n<p>Here, we are maintaining reference of the passed object and appending values in the same object. So, this would produce the following result:</p>\r\n\r\n<pre>\r\nValues inside the function:  [10, 20, 30, [1, 2, 3, 4]]\r\nValues outside the function:  [10, 20, 30, [1, 2, 3, 4]]\r\n    </pre>\r\n\r\n<p>There is one more example where argument is being passed by reference and the reference is being overwritten inside the called function.</p>\r\n\r\n<pre>\r\n# Function definition is here\r\ndef changeme( mylist ):\r\n   &quot;This changes a passed list into this function&quot;\r\n   mylist = [1,2,3,4];  # This would assig new reference in mylist\r\n   print (&quot;Values inside the function: &quot;, mylist)\r\n   return\r\n\r\n# Now you can call changeme function\r\nmylist = [10,20,30]\r\nchangeme( mylist )\r\nprint (&quot;Values outside the function: &quot;, mylist)\r\n    </pre>\r\n\r\n<p>The parameter mylist is local to the function changeme. Changing mylist within the function does not affect mylist. The function accomplishes nothing and finally this would produce the following result:</p>\r\n\r\n<pre>\r\nValues inside the function:  [1, 2, 3, 4]\r\nValues outside the function:  [10, 20, 30]\r\n    </pre>\r\n\r\n<h4>Function Arguments</h4>\r\n\r\n<p>You can call a function by using the following types of formal arguments:</p>\r\n\r\n<ul>\r\n\t<li>Required arguments</li>\r\n\t<li>Keyword arguments</li>\r\n\t<li>Default arguments</li>\r\n\t<li>Variable-length arguments</li>\r\n</ul>\r\n\r\n<h4>Required arguments</h4>\r\n\r\n<p>Required arguments are the arguments passed to a function in correct positional order. Here, the number of arguments in the function call should match exactly with the function definition. To call the function printme(), you definitely need to pass one argument, otherwise it would give a syntax error as follows:</p>\r\n\r\n<pre>\r\n# Function definition is here\r\ndef printme( str ):\r\n   &quot;This prints a passed string into this function&quot;\r\n   print str\r\n   return\r\n\r\n# Now you can call printme function\r\nprintme();\r\nWhen the above code is executed, it produces the following result:\r\nTraceback (most recent call last):\r\n  File &quot;test.py&quot;, line 11, in \r\n    printme()\r\nTypeError: printme() takes exactly 1 argument (0 given)\r\n    </pre>\r\n\r\n<h4>Keyword arguments</h4>\r\n\r\n<p>Keyword arguments are related to the function calls. When you use keyword arguments in a function call, the caller identifies the arguments by the parameter name. This allows you to skip arguments or place them out of order because the Python interpreter is able to use the keywords provided to match the values with parameters. You can also make keyword calls to the printme() function in the following ways:</p>\r\n\r\n<pre>\r\n# Function definition is here\r\ndef printme( str ):\r\n   &quot;This prints a passed string into this function&quot;\r\n   print (str)\r\n   return\r\n\r\n# Now you can call printme function\r\nprintme( str = &quot;My string&quot;);\r\nWhen the above code is executed, it produces the following result:\r\nMy string\r\n    </pre>\r\n\r\n<p>Following example gives more clear picture. Note, here order of the parameter does not matter.</p>\r\n\r\n<pre>\r\n# Function definition is here\r\ndef printinfo( name, age ):\r\n   &quot;This prints a passed info into this function&quot;\r\n   print (&quot;Name: &quot;, name)\r\n   print (&quot;Age &quot;, age)\r\n   return\r\n\r\n# Now you can call printinfo function\r\nprintinfo( age=50, name=&quot;miki&quot; )\r\nWhen the above code is executed, it produces the following result:\r\nName:  miki\r\nAge  50\r\n    </pre>\r\n\r\n<h4>Default arguments</h4>\r\n\r\n<p>A default argument is an argument that assumes a default value if a value is not provided in the function call for that argument. Following example gives an idea on default arguments, it would print default age if it is not passed:</p>\r\n\r\n<pre>\r\n# Function definition is here\r\ndef printinfo( name, age = 35 ):\r\n   &quot;This prints a passed info into this function&quot;\r\n   print (&quot;Name: &quot;, name)\r\n   print (&quot;Age &quot;, age)\r\n   return</pre>\r\n\r\n<pre>\r\n# Now you can call printinfo function\r\nprintinfo( age=50, name=&quot;miki&quot; );\r\nprintinfo( name=&quot;miki&quot; );\r\nWhen the above code is executed, it produces the following result:\r\nName:  miki\r\nAge  50\r\nName:  miki\r\nAge  35\r\n    </pre>\r\n\r\n<h4>Variable-length arguments</h4>\r\n\r\n<p>You may need to process a function for more arguments than you specified while defining the function. These arguments are called variable-length arguments and are not named in the function definition, unlike required and default arguments. The general syntax for a function with non-keyword variable arguments is this:</p>\r\n\r\n<pre>\r\ndef functionname([formal_args,] *var_args_tuple ):\r\n   &quot;function_docstring&quot;\r\n   function_suite\r\n   return [expression]\r\n    </pre>\r\n\r\n<p>An asterisk (*) is placed before the variable name that will hold the values of all nonkeyword variable arguments. This tuple remains empty if no additional arguments are specified during the function call. Following is a simple example:</p>\r\n\r\n<pre>\r\n# Function definition is here\r\ndef printinfo( arg1, *vartuple ):\r\n   &quot;This prints a variable passed arguments&quot;\r\n   print (&quot;Output is: &quot;,arg1)\r\n\r\n   for var in vartuple:\r\n      print (var)\r\n   return</pre>\r\n\r\n<pre>\r\n# Now you can call printinfo function\r\nprintinfo( 10 )\r\nprintinfo( 70, 60, 50 )\r\n    </pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\nOutput is:\r\n10\r\nOutput is:\r\n70\r\n60\r\n50\r\n    </pre>\r\n\r\n<h4>The Anonymous Functions (Lambda expressions)</h4>\r\n\r\n<p>You can use the lambda keyword to create small anonymous functions. These functions are called anonymous because they are not declared in the standard manner by using the def keyword.</p>\r\n\r\n<ul>\r\n\t<li>Lambda forms can take any number of arguments but return just one value in the form of an expression. They cannot contain commands or multiple expressions.</li>\r\n\t<li>An anonymous function cannot be a direct call to print because lambda requires an expression.</li>\r\n\t<li>Lambda functions have their own local namespace and cannot access variables other than those in their parameter list and those in the global namespace.</li>\r\n\t<li>Although it appears that lambda&#39;s are a one-line version of a function, they are not equivalent to inline statements in C or C++, whose purpose is by passing function stack allocation during invocation for performance reasons.</li>\r\n</ul>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<p>The syntax of lambda functions contains only a single statement, which is as follows:</p>\r\n\r\n<pre>\r\nlambda [arg1 [,arg2,.....argn]]:expression</pre>\r\n\r\n<p>Following is the example to show how lambdaform of function works:</p>\r\n\r\n<pre>\r\n# Function definition is here\r\nsum = lambda arg1, arg2: arg1 + arg2\r\n </pre>\r\n\r\n<pre>\r\n# Now you can call sum as a function\r\nprint (&quot;Value of total : &quot;, sum( 10, 20 ))\r\nprint (&quot;Value of total : &quot;, sum( 20, 20 ))\r\nWhen the above code is executed, it produces the following result:\r\nValue of total :  30\r\nValue of total :  40\r\n    </pre>\r\n\r\n<h4>The return Statement</h4>\r\n\r\n<p>The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None. All the above examples are not returning any value, but if you like you can return a value from a function as follows:</p>\r\n\r\n<pre>\r\n# Function definition is here\r\ndef sum( arg1, arg2 ):\r\n   # Add both the parameters and return them.&quot;\r\n   total = arg1 + arg2\r\n   print (&quot;Inside the function : &quot;, total)\r\n   return total;</pre>\r\n\r\n<pre>\r\n# Now you can call sum function\r\ntotal = sum( 10, 20 )\r\nprint (&quot;Outside the function : &quot;, total)\r\nWhen the above code is executed, it produces the following result:\r\nInside the function :  30\r\nOutside the function :  30\r\n    </pre>\r\n\r\n<h4>Scope of Variables</h4>\r\n\r\n<p>All variables in a program may not be accessible at all locations in that program. This depends on where you have declared a variable. The scope of a variable determines the portion of the program where you can access a particular identifier. There are two basic scopes of variables in Python:</p>\r\n\r\n<ul>\r\n\t<li>Global variables</li>\r\n\t<li>Local variables</li>\r\n</ul>\r\n\r\n<h4>Global vs. Local variables</h4>\r\n\r\n<p>Variables that are defined inside a function body have a local scope, and those defined outside have a global scope. This means that local variables can be accessed only inside the function in which they are declared, whereas global variables can be accessed throughout the program body by all functions. When you call a function, the variables declared inside it are brought into scope. Following is a simple example:</p>\r\n\r\n<pre>\r\ntotal = 0; # This is global variable.\r\n# Function definition is here\r\ndef sum( arg1, arg2 ):\r\n   # Add both the parameters and return them.&quot;\r\n   total = arg1 + arg2; # Here total is local variable.\r\n   print (&quot;Inside the function local total : &quot;, total)\r\n   return total</pre>\r\n\r\n<pre>\r\n# Now you can call sum function\r\nsum( 10, 20 )\r\nprint (&quot;Outside the function global total : &quot;, total)\r\nWhen the above code is executed, it produces the following result:\r\nInside the function local total :  30\r\nOutside the function global total :  0\r\n </pre>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T21:40:46.142724", "intro_text": "A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing.", "lesson_id": 10, "resource_uri": "/lessonapi/Lesson/10/", "title": "Functions"}, {"body": "<p>Most of our daily activities are based on conditions. &quot;I will go to the grocery when or if the rain stops&quot;, &quot;This team can only win the world cup if it beats the other team in the finals.&quot; Sometimes, the conditions maybe more than one; &quot;this team will win the world cup if it wins in the semi finals AND in the finals.&quot; Other times the condition maybe either this or that; &quot;Nigeria will be through to the next stage if they win OR draw their next match.&quot; In each case, something happens when then condition given occurs (becomes true); &quot;this team will win the world cup&quot; and another thing happens when the condition given does not occur (becomes false);&quot;this team will not win the world cup&quot;.</p>\r\n\r\n<h4>if,elif and else</h4>\r\n\r\n<p>Computer programming allows for specifying conditions that will be checked before executing a particular code. Python uses <code>&nbsp;if, elif ,else&nbsp;</code> to check for conditions before executing a particular code. You can therefore place your code under a certain condition which is to be checked by the interpreter before executing the code.</p>\r\n\r\n<h4>The Syntax</h4>\r\n\r\n<ol>\r\n\t<li>Bring the beginning condition clause (if, elif, else) and then place the condition to be evaluated just a space after the if or elif (else does not take a condition)</li>\r\n\t<li>Use comparison operators (&lt;, &gt;, ==,..) when neccessary</li>\r\n\t<li>If there are more than one conditions to be evaluated, then bring the appropriate logical operator (and/or)</li>\r\n\t<li>Bring a colon(:) and then move to the next line and tab (or move four spaces to the right)</li>\r\n\t<li>Specify what should happen is if the condition becomes true</li>\r\n\t<li>use else or elif to specify what should happen if the previous condition is false</li>\r\n</ol>\r\n\r\n<p>The following example should set the pace: This programs checks the current value of temperature named temp and tells the user what the weather outside should be. Feel free to copy and paste the code in your editor. Play around it.(The hash (#) is used to comment in Python code: The interpreter therefore ignores words that come after a #.</p>\r\n\r\n<pre>\r\n    #Takes temperature value as input from user\r\n    temp = input(&quot;Enter the current temperature value:&quot;)\r\n    #Converts and updates temp value from string to an integer\r\n    temp = int(temp)\r\n    #checks if temp is greater than 30\r\n    if temp &gt; 30:\r\n        print(&quot;Its hot outside&quot;)\r\n    #checks if temp is equal to 30\r\n    elif temp == 30:\r\n        print(&quot;It should be a normal weather&quot;)\r\n    #checks if temp is less than 30 AND greater than 15\r\n    #Both must be true for the code (print(&quot;The weather is cold&quot;))\r\n    #To execute\r\n    elif temp &lt; 30 and temp &gt; 15:\r\n        print (&quot;The weather is cold&quot;)\r\n    else:\r\n        print(&quot;it&#39;s freezing out there&quot;)</pre>\r\n\r\n<h4>Nested Conditions</h4>\r\n\r\n<p>These are conditions that depend on other conditions to evaluate their own statements. Consider this: Go to my house (number 13) and check if my Dad or Mom is home and then give the money to my Dad. but if my Dad is not home, you could give it to my mom. if none of the two is home, bring back my money to me. And return my money if you do not find my house. You realize that you would have by passed a lot of houses on your way to my house because they do not bear the number 13. This condition has to be first fulfilled before you look for my dad or mom and give out the money. So giving out the money to my dad or mom depends on whether you found my house or not. Let us write a simple Python program to illustrate this idea:</p>\r\n\r\n<pre>\r\n    #Takes house number as input and converts to integer on the same line\r\n    house = int(input(&quot;Enter house number&quot;))\r\n\r\n    #First condition to check if house number is 13\r\n    if house == 13:\r\n        #After house number is 13, checks if dad or mom is home\r\n        #Takes Yes or No as input representing the presence of dad or mom\r\n        dad_or_mom = input(&quot;Is Dad or Mom Home: Yes/No:&quot;)\r\n        if dad_or_mom == &#39;Yes&#39;:\r\n            print(&quot;Give this money to him or her&quot;)\r\n        #If mom or dad is not home\r\n        else:\r\n            print(&quot;I found the house but neither dad nor mom was home&quot;)\r\n    #If house number is not 13\r\n    else:\r\n        print(&quot;I could not find the house&quot;)</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>After running and trying out a few inputs, you will notice that the option that asks if dad or mom is home is never shown except if the house number is 13. This means that you do not ask the question &quot;Is mom or dad home?&quot; if you have not found the house you were sent to (number 13).</p>\r\n\r\n<div>\r\n<h5>TIP</h5>\r\nRemember to always make your program as practical as possible, this helps you understand how the computer &quot;thinks&quot; while running your code and if you understand how the computer &quot;thinks&quot; then you can manipulate it as much as possible.</div>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T21:47:03.644731", "intro_text": "Most of our daily activities are based on conditions. \"I will go to the grocery when or if the rain stops\", \"This team can only win the world cup if it beats the other team in the finals.\" Sometimes, the conditions maybe more than one; \"this team will win the world cup if it wins in the semi finals AND in the finals.\"", "lesson_id": 11, "resource_uri": "/lessonapi/Lesson/11/", "title": "Conditions"}, {"body": "<p>A module allows you to logically organize your Python code. Grouping related code into a module makes the code easier to understand and use. A module is a Python object with arbitrarily named attributes that you can bind and reference. Simply, a module is a file consisting of Python code. A module can define functions, classes and variables. A module can also include runnable code. Example: The Python code for a module named anamenormally resides in a file named aname.py. Here&#39;s an example of a simple module, support.py</p>\r\n\r\n<pre>\r\ndef print_func( par ):\r\n   print (&quot;Hello : &quot;, par)\r\n   return</pre>\r\n\r\n<h4>The import Statement</h4>\r\n\r\n<p>You can use any Python source file as a module by executing an import statement in some other Python source file. The import has the following syntax:</p>\r\n\r\n<pre>\r\nimport module1[, module2[,... moduleN]</pre>\r\n\r\n<p>When the interpreter encounters an import statement, it imports the module if the module is present in the search path. A search path is a list of directories that the interpreter searches before importing a module. For example, to import the module hello.py, you need to put the following command at the top of the script:</p>\r\n\r\n<pre>\r\n# Import module support\r\nimport support\r\n\r\n# Now you can call defined function that module as follows\r\nsupport.print_func(&quot;Effie&quot;)\r\n\r\nWhen the above code is executed, it produces the following result:\r\nHello : Effie</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A module is loaded only once, regardless of the number of times it is imported. This prevents the module execution from happening over and over again if multiple imports occur.</p>\r\n\r\n<h4>The from...import Statement</h4>\r\n\r\n<p>Python&#39;s from statement lets you import specific attributes from a module into the current namespace. The from...import has the following syntax:</p>\r\n\r\n<pre>\r\nfrom modname import name1[, name2[, ... nameN]]\r\n    </pre>\r\n\r\n<p>For example, to import the function fibonacci from the module fib, use the following statement:</p>\r\n\r\n<pre>\r\nfrom fib import fibonacci\r\n    </pre>\r\n\r\n<p>This statement does not import the entire module fib into the current namespace; it just introduces the item fibonacci from the module fib into the global symbol table of the importing module.</p>\r\n\r\n<h4>The from...import * Statement</h4>\r\n\r\n<p>It is also possible to import all names from a module into the current namespace by using the following import statement:</p>\r\n\r\n<pre>\r\nfrom modname import *\r\n    </pre>\r\n\r\n<p>This provides an easy way to import all the items from a module into the current namespace; however, this statement should be used sparingly.</p>\r\n\r\n<h4>Locating Modules</h4>\r\n\r\n<p>When you import a module, the Python interpreter searches for the module in the following sequences:</p>\r\n\r\n<ol>\r\n\t<li>The current directory.</li>\r\n\t<li>If the module isn&#39;t found, Python then searches each directory in the shell variable PYTHONPATH.</li>\r\n\t<li>If all else fails, Python checks the default path. On UNIX, this default path is normally /usr/local/lib/python/.</li>\r\n</ol>\r\n\r\n<p>The module search path is stored in the system module sys as the sys.path variable. The sys.path variable contains the current directory, PYTHONPATH, and the installation-dependent default.</p>\r\n\r\n<h4>The PYTHONPATH Variable</h4>\r\n\r\n<p>The PYTHONPATH is an environment variable, consisting of a list of directories. The syntax of PYTHONPATH is the same as that of the shell variable PATH. Here is a typical PYTHONPATH from a Windows system:</p>\r\n\r\n<pre>\r\nset PYTHONPATH=c:\\python20\\lib;\r\nAnd here is a typical PYTHONPATH from a UNIX system:\r\nset PYTHONPATH=/usr/local/lib/python\r\n    </pre>\r\n\r\n<h4>Namespaces and Scoping</h4>\r\n\r\n<p>Variables are names (identifiers) that map to objects. A namespace is a dictionary of variable names (keys) and their corresponding objects (values). A Python statement can access variables in a local namespace and in the global namespace. If a local and a global variable have the same name, the local variable shadows the global variable. Each function has its own local namespace. Class methods follow the same scoping rule as ordinary functions. Python makes educated guesses on whether variables are local or global. It assumes that any variable assigned a value in a function is local. Therefore, in order to assign a value to a global variable within a function, you must first use the global statement. The statement global VarName tells Python that VarName is a global variable. Python stops searching the local namespace for the variable. For example, we define a variable Money in the global namespace. Within the function Money, we assign Money a value, therefore Python assumes Money as a local variable. However, we accessed the value of the local variable Moneybefore setting it, so an UnboundLocalError is the result. Uncommenting the global statement fixes the problem.</p>\r\n\r\n<pre>\r\nMoney = 2000\r\ndef AddMoney():\r\n   # Uncomment the following line to fix the code:\r\n   # global Money\r\n   Money = Money + 1\r\n\r\nprint (Money)\r\nAddMoney()\r\nprint (Money)\r\n    </pre>\r\n\r\n<p>The dir( ) Function: The dir() built-in function returns a sorted list of strings containing the names defined by a module. The list contains the names of all the modules, variables and functions that are defined in a module. Following is a simple example: #!/usr/bin/python</p>\r\n\r\n<pre>\r\n# Import built-in module math\r\nimport math\r\n\r\ncontent = dir(math)\r\n\r\nprint (content)</pre>\r\n\r\n<p>When the above code is executed, it produces the following result:\\</p>\r\n\r\n<pre>\r\n[&#39;__doc__&#39;, &#39;__file__&#39;, &#39;__name__&#39;, &#39;acos&#39;, &#39;asin&#39;, &#39;atan&#39;,\r\n&#39;atan2&#39;, &#39;ceil&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;degrees&#39;, &#39;e&#39;, &#39;exp&#39;,\r\n&#39;fabs&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;frexp&#39;, &#39;hypot&#39;, &#39;ldexp&#39;, &#39;log&#39;,\r\n&#39;log10&#39;, &#39;modf&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;radians&#39;, &#39;sin&#39;, &#39;sinh&#39;,\r\n&#39;sqrt&#39;, &#39;tan&#39;, &#39;tanh&#39;]</pre>\r\n\r\n<p>Here, the special string variable <code>__name__&nbsp;</code> is the module&#39;s name, and <code>__file__</code> is the filename from which the module was loaded.</p>\r\n\r\n<h4>The globals() and locals()Functions</h4>\r\n\r\n<p>The globals() and locals() functions can be used to return the names in the global and local namespaces depending on the location from where they are called. If locals() is called from within a function, it will return all the names that can be accessed locally from that function. If globals() is called from within a function, it will return all the names that can be accessed globally from that function. The return type of both these functions is dictionary. Therefore, names can be extracted using the keys() function.</p>\r\n\r\n<h4>The reload() Function</h4>\r\n\r\n<p>When the module is imported into a script, the code in the top-level portion of a module is executed only once. Therefore, if you want to reexecute the top-level code in a module, you can use the reload()function. The reload() function imports a previously imported module again. The syntax of the reload() function is this:</p>\r\n\r\n<pre>\r\nreload(module_name)</pre>\r\n\r\n<p>Here, module_name is the name of the module you want to reload and not the string containing the module name. For example, to reload hellomodule, do the following:</p>\r\n\r\n<pre>\r\nreload(hello)</pre>\r\n\r\n<h4>Packages in Python</h4>\r\n\r\n<p>A package is a hierarchical file directory structure that defines a single Python application environment that consists of modules and subpackages and sub-subpackages, and so on. Consider a file Pots.py available in Phonedirectory. This file has following line of source code:</p>\r\n\r\n<pre>\r\ndef Pots():\r\n   print (&quot;I&#39;m Pots Phone&quot;)\r\n    </pre>\r\n\r\n<p>Similar way, we have another two files having different functions with the same name as above:</p>\r\n\r\n<ol>\r\n\t<li>Phone/Isdn.py file having function Isdn()</li>\r\n\t<li>Phone/G3.py file having function G3()</li>\r\n</ol>\r\n\r\n<p>Now, create one more file <code>__init__.py</code> in Phonedirectory:</p>\r\n\r\n<ol>\r\n\t<li>Phone/__init__.py</li>\r\n</ol>\r\n\r\n<p>To make all of your functions available when you&#39;ve imported Phone, you need to put explicit import statements in __init__.py as follows:</p>\r\n\r\n<pre>\r\nfrom Pots import Pots\r\nfrom Isdn import Isdn\r\nfrom G3 import G3</pre>\r\n\r\n<p>After you&#39;ve added these lines to __init__.py, you have all of these classes available when you&#39;ve imported the Phone package.</p>\r\n\r\n<pre>\r\n# Now import your Phone Package.\r\nimport Phone\r\n\r\nPhone.Pots()\r\nPhone.Isdn()\r\nPhone.G3()\r\nWhen the above code is executed, it produces the following result:\r\nI&#39;m Pots Phone\r\nI&#39;m 3G Phone\r\nI&#39;m ISDN Phone</pre>\r\n\r\n<div>\r\n<h5>NOTE</h5>\r\nIn the above example, we have taken example of a single functions in each file, but you can keep multiple functions in your files. You can also define different Python classes in those files and then you can create your packages out of those classes.</div>\r\n\r\n<p>A module allows you to logically organize your Python code. Grouping related code into a module makes the code easier to understand and use. A module is a Python object with arbitrarily named attributes that you can bind and reference. Simply, a module is a file consisting of Python code. A module can define functions, classes and variables. A module can also include runnable code. Example: The Python code for a module named anamenormally resides in a file named aname.py. Here&#39;s an example of a simple module, support.py</p>\r\n\r\n<pre>\r\ndef print_func( par ):\r\n   print (&quot;Hello : &quot;, par)\r\n   return</pre>\r\n\r\n<h4>The import Statement</h4>\r\n\r\n<p>You can use any Python source file as a module by executing an import statement in some other Python source file. The import has the following syntax:</p>\r\n\r\n<pre>\r\nimport module1[, module2[,... moduleN]</pre>\r\n\r\n<p>When the interpreter encounters an import statement, it imports the module if the module is present in the search path. A search path is a list of directories that the interpreter searches before importing a module. For example, to import the module hello.py, you need to put the following command at the top of the script:</p>\r\n\r\n<pre>\r\n# Import module support\r\nimport support\r\n\r\n# Now you can call defined function that module as follows\r\nsupport.print_func(&quot;Effie&quot;)\r\n\r\nWhen the above code is executed, it produces the following result:\r\nHello : Effie</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A module is loaded only once, regardless of the number of times it is imported. This prevents the module execution from happening over and over again if multiple imports occur.</p>\r\n\r\n<h4>The from...import Statement</h4>\r\n\r\n<p>Python&#39;s from statement lets you import specific attributes from a module into the current namespace. The from...import has the following syntax:</p>\r\n\r\n<pre>\r\nfrom modname import name1[, name2[, ... nameN]]\r\n    </pre>\r\n\r\n<p>For example, to import the function fibonacci from the module fib, use the following statement:</p>\r\n\r\n<pre>\r\nfrom fib import fibonacci\r\n    </pre>\r\n\r\n<p>This statement does not import the entire module fib into the current namespace; it just introduces the item fibonacci from the module fib into the global symbol table of the importing module.</p>\r\n\r\n<h4>The from...import * Statement</h4>\r\n\r\n<p>It is also possible to import all names from a module into the current namespace by using the following import statement:</p>\r\n\r\n<pre>\r\nfrom modname import *\r\n    </pre>\r\n\r\n<p>This provides an easy way to import all the items from a module into the current namespace; however, this statement should be used sparingly.</p>\r\n\r\n<h4>Locating Modules</h4>\r\n\r\n<p>When you import a module, the Python interpreter searches for the module in the following sequences:</p>\r\n\r\n<ol>\r\n\t<li>The current directory.</li>\r\n\t<li>If the module isn&#39;t found, Python then searches each directory in the shell variable PYTHONPATH.</li>\r\n\t<li>If all else fails, Python checks the default path. On UNIX, this default path is normally /usr/local/lib/python/.</li>\r\n</ol>\r\n\r\n<p>The module search path is stored in the system module sys as the sys.path variable. The sys.path variable contains the current directory, PYTHONPATH, and the installation-dependent default.</p>\r\n\r\n<h4>The PYTHONPATH Variable</h4>\r\n\r\n<p>The PYTHONPATH is an environment variable, consisting of a list of directories. The syntax of PYTHONPATH is the same as that of the shell variable PATH. Here is a typical PYTHONPATH from a Windows system:</p>\r\n\r\n<pre>\r\nset PYTHONPATH=c:\\python20\\lib;\r\nAnd here is a typical PYTHONPATH from a UNIX system:\r\nset PYTHONPATH=/usr/local/lib/python\r\n    </pre>\r\n\r\n<h4>Namespaces and Scoping</h4>\r\n\r\n<p>Variables are names (identifiers) that map to objects. A namespace is a dictionary of variable names (keys) and their corresponding objects (values). A Python statement can access variables in a local namespace and in the global namespace. If a local and a global variable have the same name, the local variable shadows the global variable. Each function has its own local namespace. Class methods follow the same scoping rule as ordinary functions. Python makes educated guesses on whether variables are local or global. It assumes that any variable assigned a value in a function is local. Therefore, in order to assign a value to a global variable within a function, you must first use the global statement. The statement global VarName tells Python that VarName is a global variable. Python stops searching the local namespace for the variable. For example, we define a variable Money in the global namespace. Within the function Money, we assign Money a value, therefore Python assumes Money as a local variable. However, we accessed the value of the local variable Moneybefore setting it, so an UnboundLocalError is the result. Uncommenting the global statement fixes the problem.</p>\r\n\r\n<pre>\r\nMoney = 2000\r\ndef AddMoney():\r\n   # Uncomment the following line to fix the code:\r\n   # global Money\r\n   Money = Money + 1\r\n\r\nprint (Money)\r\nAddMoney()\r\nprint (Money)\r\n    </pre>\r\n\r\n<p>The dir( ) Function: The dir() built-in function returns a sorted list of strings containing the names defined by a module. The list contains the names of all the modules, variables and functions that are defined in a module. Following is a simple example: #!/usr/bin/python</p>\r\n\r\n<pre>\r\n# Import built-in module math\r\nimport math\r\n\r\ncontent = dir(math)\r\n\r\nprint (content)</pre>\r\n\r\n<p>When the above code is executed, it produces the following result:\\</p>\r\n\r\n<pre>\r\n[&#39;__doc__&#39;, &#39;__file__&#39;, &#39;__name__&#39;, &#39;acos&#39;, &#39;asin&#39;, &#39;atan&#39;,\r\n&#39;atan2&#39;, &#39;ceil&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;degrees&#39;, &#39;e&#39;, &#39;exp&#39;,\r\n&#39;fabs&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;frexp&#39;, &#39;hypot&#39;, &#39;ldexp&#39;, &#39;log&#39;,\r\n&#39;log10&#39;, &#39;modf&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;radians&#39;, &#39;sin&#39;, &#39;sinh&#39;,\r\n&#39;sqrt&#39;, &#39;tan&#39;, &#39;tanh&#39;]</pre>\r\n\r\n<p>Here, the special string variable <code>__name__&nbsp;</code> is the module&#39;s name, and <code>__file__</code> is the filename from which the module was loaded.</p>\r\n\r\n<h4>The globals() and locals()Functions</h4>\r\n\r\n<p>The globals() and locals() functions can be used to return the names in the global and local namespaces depending on the location from where they are called. If locals() is called from within a function, it will return all the names that can be accessed locally from that function. If globals() is called from within a function, it will return all the names that can be accessed globally from that function. The return type of both these functions is dictionary. Therefore, names can be extracted using the keys() function.</p>\r\n\r\n<h4>The reload() Function</h4>\r\n\r\n<p>When the module is imported into a script, the code in the top-level portion of a module is executed only once. Therefore, if you want to reexecute the top-level code in a module, you can use the reload()function. The reload() function imports a previously imported module again. The syntax of the reload() function is this:</p>\r\n\r\n<pre>\r\nreload(module_name)</pre>\r\n\r\n<p>Here, module_name is the name of the module you want to reload and not the string containing the module name. For example, to reload hellomodule, do the following:</p>\r\n\r\n<pre>\r\nreload(hello)</pre>\r\n\r\n<h4>Packages in Python</h4>\r\n\r\n<p>A package is a hierarchical file directory structure that defines a single Python application environment that consists of modules and subpackages and sub-subpackages, and so on. Consider a file Pots.py available in Phonedirectory. This file has following line of source code:</p>\r\n\r\n<pre>\r\ndef Pots():\r\n   print (&quot;I&#39;m Pots Phone&quot;)\r\n    </pre>\r\n\r\n<p>Similar way, we have another two files having different functions with the same name as above:</p>\r\n\r\n<ol>\r\n\t<li>Phone/Isdn.py file having function Isdn()</li>\r\n\t<li>Phone/G3.py file having function G3()</li>\r\n</ol>\r\n\r\n<p>Now, create one more file <code>__init__.py</code> in Phonedirectory:</p>\r\n\r\n<ol>\r\n\t<li>Phone/__init__.py</li>\r\n</ol>\r\n\r\n<p>To make all of your functions available when you&#39;ve imported Phone, you need to put explicit import statements in __init__.py as follows:</p>\r\n\r\n<pre>\r\nfrom Pots import Pots\r\nfrom Isdn import Isdn\r\nfrom G3 import G3</pre>\r\n\r\n<p>After you&#39;ve added these lines to __init__.py, you have all of these classes available when you&#39;ve imported the Phone package.</p>\r\n\r\n<pre>\r\n# Now import your Phone Package.\r\nimport Phone\r\n\r\nPhone.Pots()\r\nPhone.Isdn()\r\nPhone.G3()\r\nWhen the above code is executed, it produces the following result:\r\nI&#39;m Pots Phone\r\nI&#39;m 3G Phone\r\nI&#39;m ISDN Phone</pre>\r\n\r\n<div>\r\n<h5>NOTE</h5>\r\nIn the above example, we have taken example of a single functions in each file, but you can keep multiple functions in your files. You can also define different Python classes in those files and then you can create your packages out of those classes.</div>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T21:52:06.013152", "intro_text": "A module allows you to logically organize your Python code. Grouping related code into a module makes the code easier to understand and use. A module is a Python object with arbitrarily named attributes that you can bind and reference. Simply, a module is a file consisting of Python code.", "lesson_id": 12, "resource_uri": "/lessonapi/Lesson/12/", "title": "Modules"}, {"body": "<p>Dictionaries are one of Python&#39;s powerful datatypes, behaves like the popular Json, in fact, understanding Python&#39;s dictionary gives you almost every thing you need to know about Json objects because Json can be viewed as Python&#39;s dictionaries nested.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>A dictionary is mutable and is another container type that can store any number of Python objects, including other container types.&nbsp;</p>\r\n\r\n<p>Dictionaries consist of pairs (called items) of keys and their corresponding values.</p>\r\n\r\n<p>&nbsp;Python dictionaries are also known as associative arrays or hash tables. The general syntax of a dictionary is as follows:</p>\r\n\r\n<pre>\r\n&nbsp;dict = {&#39;Effie&#39;: &#39;2341&#39;, &#39;Beth&#39;: &#39;9102&#39;, &#39;Cecil&#39;: &#39;3258&#39;}&nbsp;</pre>\r\n\r\n<p>You can create dictionary in the following way as well:&nbsp;</p>\r\n\r\n<pre>\r\ndict1 = { &#39;abc&#39;: 456 }; dict2 = { &#39;abc&#39;: 123, 98.6: 37 }&nbsp;</pre>\r\n\r\n<p>Each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces.&nbsp;</p>\r\n\r\n<p>An empty dictionary without any items is written with just two curly braces, like this:&nbsp;</p>\r\n\r\n<pre>\r\ndictionary={}.&nbsp;</pre>\r\n\r\n<p>Keys are unique within a dictionary while values may not be. The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples.&nbsp;</p>\r\n\r\n<h4>Accessing Values in Dictionary&nbsp;</h4>\r\n\r\n<p>To access dictionary elements, you can use the familiar square brackets along with the key to obtain its value.&nbsp;</p>\r\n\r\n<p>Following is a simple example:&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\ndict = {&#39;Name&#39;: &#39;Effie&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}&nbsp;</pre>\r\n\r\n<pre>\r\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])&nbsp;</pre>\r\n\r\n<pre>\r\nprint (&quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;])&nbsp;</pre>\r\n\r\n<p>When the above code is executed, it produces the following result:&nbsp;</p>\r\n\r\n<pre>\r\ndict[&#39;Name&#39;]: Effie dict[&#39;Age&#39;]: 7&nbsp;</pre>\r\n\r\n<p>If we attempt to access a data item with a key, which is not part of the dictionary, we get an error as follows:&nbsp;</p>\r\n\r\n<pre>\r\ndict = {&#39;Name&#39;: &#39;Effie&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}&nbsp;</pre>\r\n\r\n<pre>\r\nprint (&quot;dict[&#39;Effie&#39;]: &quot;, dict[&#39;Alice&#39;])&nbsp;</pre>\r\n\r\n<pre>\r\nWhen the above code is executed, it produces the following result: dict[&#39;Effie&#39;]:&nbsp;</pre>\r\n\r\n<pre>\r\nTraceback (most recent call last): File &quot;test.py&quot;, line 4, in print (&quot;dict[&#39;Alice&#39;]: &quot;, dict[&#39;Alice&#39;]) KeyError: &#39;Alice&#39;&nbsp;</pre>\r\n\r\n<h4>Updating Dictionary&nbsp;</h4>\r\n\r\n<p>You can update a dictionary by adding a new entry or item (i.e., a key-value pair), modifying an existing entry, or deleting an existing entry as shown below in the simple example:&nbsp;</p>\r\n\r\n<pre>\r\ndict = {&#39;Name&#39;: &#39;Effie&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}</pre>\r\n\r\n<pre>\r\ndict[&#39;Age&#39;] = 8 # update existing entry&nbsp;</pre>\r\n\r\n<pre>\r\ndict[&#39;School&#39;] = &quot;Victory School&quot; # Add new entry&nbsp;</pre>\r\n\r\n<pre>\r\nprint (&quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;])&nbsp;</pre>\r\n\r\n<pre>\r\nprint (&quot;dict[&#39;School&#39;]: &quot;, dict[&#39;School&#39;])&nbsp;</pre>\r\n\r\n<p>When the above code is executed, it produces the following result:&nbsp;</p>\r\n\r\n<pre>\r\ndict[&#39;Age&#39;]: 8&nbsp;</pre>\r\n\r\n<pre>\r\ndict[&#39;School&#39;]: Victory School&nbsp;</pre>\r\n\r\n<h4>Delete Dictionary Elements&nbsp;</h4>\r\n\r\n<p>You can either remove individual dictionary elements or clear the entire contents of a dictionary. You can also delete entire dictionary in a single operation.&nbsp;</p>\r\n\r\n<p>To explicitly remove an entire dictionary, just use the del statement.&nbsp;</p>\r\n\r\n<p>Following is a simple example:&nbsp;</p>\r\n\r\n<pre>\r\ndict = {&#39;Name&#39;: &#39;Effie&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}</pre>\r\n\r\n<pre>\r\ndel dict[&#39;Name&#39;] # remove entry with key &#39;Name&#39;&nbsp;</pre>\r\n\r\n<pre>\r\ndict.clear() # remove all entries in dict&nbsp;</pre>\r\n\r\n<pre>\r\ndel dict # delete entire dictionary&nbsp;</pre>\r\n\r\n<pre>\r\nprint (&quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;])&nbsp;</pre>\r\n\r\n<pre>\r\nprint (&quot;dict[&#39;School&#39;]: &quot;, dict[&#39;School&#39;])&nbsp;</pre>\r\n\r\n<p>This will produce the following result. Note an exception raised, this is because after del dict, dictionary does not exist any more: dict[&#39;Age&#39;]:&nbsp;</p>\r\n\r\n<pre>\r\nTraceback (most recent call last): File &quot;test.py&quot;, line 8, in print (&quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;]) \r\nTypeError: &#39;type&#39; object is unsubscriptable&nbsp;</pre>\r\n\r\n<p>Note: del() method is discussed in subsequent section.&nbsp;</p>\r\n\r\n<p>Properties of Dictionary Keys Dictionary values have no restrictions. They can be any arbitrary Python object, either standard objects or user-defined objects. However, same is not true for the keys. There are two important points to remember about dictionary keys&nbsp;</p>\r\n\r\n<ul style=\"list-style-type:circle\">\r\n\t<li>More than one entry per key not allowed. Which means no duplicate key is allowed. When duplicate keys encountered during assignment, the last assignment wins. Following is a simple example:&nbsp;</li>\r\n\t<li>\r\n\t<pre>\r\ndict = {&#39;Name&#39;: &#39;Effie&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;Ellie&#39;}&nbsp;</pre>\r\n\r\n\t<pre>\r\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;])&nbsp;</pre>\r\n\t</li>\r\n\t<li>When the above code is executed, it produces the following result:&nbsp;</li>\r\n\t<li>\r\n\t<pre>\r\ndict[&#39;Name&#39;]: Ellie&nbsp;</pre>\r\n\t</li>\r\n\t<li>Keys must be immutable. Which means you can use strings, numbers or tuples as dictionary keys but something like [&#39;key&#39;] (a list) is not allowed. Following is a simple example:</li>\r\n</ul>\r\n\r\n<ul>\r\n\t<li>\r\n\t<pre>\r\ndict = {[&#39;Name&#39;]: &#39;Effie&#39;, &#39;Age&#39;: 7} </pre>\r\n\t</li>\r\n\t<li>\r\n\t<pre>\r\nprint (&quot;dict[&#39;Name&#39;]: &quot;, dict[&#39;Name&#39;]) </pre>\r\n\t</li>\r\n\t<li>When the above code is executed, it produces the following result:&nbsp;</li>\r\n\t<li>\r\n\t<pre>\r\nTraceback (most recent call last): File &quot;test.py&quot;, line 3, in dict = {[&#39;Name&#39;]: &#39;Effie&#39;, &#39;Age&#39;: 7} </pre>\r\n\t</li>\r\n\t<li>\r\n\t<pre>\r\nTypeError: list objects are unhashable Built-in </pre>\r\n\t</li>\r\n</ul>\r\n\r\n<h4>Dictionary Functions &amp; Methods&nbsp;</h4>\r\n\r\n<p>Python includes the following dictionary functions:&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"overflow-x:auto;\">\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Function</span></th>\r\n\t\t\t<th style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">DESCRIPTION</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:50.0000%\"><span style=\"color:#0000ff\">cmp(dict1, dict2)</span></td>\r\n\t\t\t<td style=\"width:50.0000%\"><span style=\"color:#0000ff\">Compares elements of both dict.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:50.0000%\"><span style=\"color:#0000ff\">len(dict)</span></td>\r\n\t\t\t<td style=\"width:50.0000%\"><span style=\"color:#0000ff\">Gives the total length of the dictionary</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:50.0000%\"><span style=\"color:#0000ff\">str(dict)</span></td>\r\n\t\t\t<td style=\"width:50.0000%\"><span style=\"color:#0000ff\">Produces a printable string representation of a dictionary</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"width:50.0000%\"><span style=\"color:#0000ff\">type(variable)&nbsp;</span></td>\r\n\t\t\t<td style=\"width:50.0000%\"><span style=\"color:#0000ff\">Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Python includes following dictionary methods</h4>\r\n\r\n<div style=\"overflow-x:auto;\">\r\n<table style=\"margin-right:calc(0%); width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"width: 50.041%; text-align: justify; vertical-align: middle; background-color: rgb(0, 0, 255);\"><span style=\"color:#ffffff\">Methods</span></th>\r\n\t\t\t<th style=\"width: 49.877%; text-align: justify; vertical-align: middle; background-color: rgb(0, 0, 255);\"><span style=\"color:#ffffff\">description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50.041%\"><span style=\"color:#0000ff\">dict.clear()</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:49.877%\"><span style=\"color:#0000ff\">Removes all elements of dictionary dict</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50.041%\"><span style=\"color:#0000ff\">dict.copy()&nbsp;</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:49.877%\"><span style=\"color:#0000ff\">Returns a shallow copy of dictionary dict</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50.041%\"><span style=\"color:#0000ff\">dict.fromkeys()</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:49.877%\"><span style=\"color:#0000ff\">Create a new dictionary with keys from seq and values set to value.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50.041%\"><span style=\"color:#0000ff\">dict.get(key, default=None)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:49.877%\"><span style=\"color:#0000ff\">For key &#39;key&#39;, returns value or default if key not in dictionary</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50.041%\"><span style=\"color:#0000ff\">dict.has_key(key)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:49.877%\"><span style=\"color:#0000ff\">Returns true if key in dictionary dict, false otherwise</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50.041%\"><span style=\"color:#0000ff\">dict.items()</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:49.877%\"><span style=\"color:#0000ff\">Returns a list of dict&#39;s (key, value) tuple pairs</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50.041%\"><span style=\"color:#0000ff\">dict.keys()&nbsp;</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:49.877%\"><span style=\"color:#0000ff\">Returns list of dictionary dict&#39;s keys</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50.041%\"><span style=\"color:#0000ff\">dict.setdefault(key, default=None)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:49.877%\"><span style=\"color:#0000ff\">Similar to get(), but will set dict[key]=default if key is not already in dict</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50.041%\"><span style=\"color:#0000ff\">dict.update(dict2)</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:49.877%\"><span style=\"color:#0000ff\">Adds dictionary dict2&#39;s key-values pairs to dict</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; width:50.041%\"><span style=\"color:#0000ff\">dict.values()</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; width:49.877%\"><span style=\"color:#0000ff\">Returns list of dictionary dict&#39;s values</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T21:56:47.852150", "intro_text": "Dictionaries are one of Python's powerful datatypes, behaves like the popular json, in fact, understanding Python's dictionary gives you almost every thing you need to know about json objects because json can be viewed as Python's dictionaries nested.", "lesson_id": 13, "resource_uri": "/lessonapi/Lesson/13/", "title": "Dictionaries"}, {"body": "<p>Storage System Operation</p>\r\n\r\n<pre>\r\nprint (&quot;Python is really a great language,&quot;, &quot;isn&#39;t it?&quot;)</pre>\r\n\r\n<p>This would produce the following result on your standard screen:</p>\r\n\r\n<pre>\r\nPython is really a great language, isn&#39;t it?</pre>\r\n\r\n<h4>Reading Keyboard Input</h4>\r\n\r\n<p>Python provides two built-in functions to read a line of text from standard input, which by default comes from the keyboard. These functions are:</p>\r\n\r\n<ul>\r\n\t<li>raw_input</li>\r\n\t<li>input</li>\r\n</ul>\r\n\r\n<h4>The raw_input Function</h4>\r\n\r\n<p>The raw_input([prompt_string]) function reads one line from standard input and returns it as a string (removing the trailing newline).</p>\r\n\r\n<pre>\r\nstr = raw_input(&quot;Enter your input: &quot;)\r\nprint (&quot;Received input is : &quot;, str)</pre>\r\n\r\n<p>This would prompt you to enter any string and it would display same string on the screen. When I typed &quot;Hello Python!&quot;, its output is like this:</p>\r\n\r\n<pre>\r\nEnter your input: Hello Python\r\nReceived input is :  Hello Python</pre>\r\n\r\n<p>The input Function: The input([prompt]) function is equivalent to raw_input, except that it assumes the input is a valid Python expression and returns the evaluated result to you.</p>\r\n\r\n<div>\r\n<h4>TIP</h4>\r\nPython version 3 however, uses <code>input</code> as <code>raw_input</code> is used in version 2. <code>Input</code> in Python 3 is used to accept strings not integers, the string received can then be converted to the appropriate data type using the appropriate method discussed earlier.</div>\r\n\r\n<pre>\r\nstr = input(&quot;Enter your input: &quot;);\r\nprint (&quot;Received input is : &quot;, str)</pre>\r\n\r\n<p>This would produce the following result against the entered input:</p>\r\n\r\n<pre>\r\nEnter your input: [x*5 for x in range(2,10,2)]\r\nReceived input is :  [10, 20, 30, 40]</pre>\r\n\r\n<h4>Opening and Closing Files</h4>\r\n\r\n<p>Until now, you have been reading and writing to the standard input and output. Now, we will see how to play with actual data files. Python provides basic functions and methods necessary to manipulate files by default. You can do your most of the file manipulation using a file object.</p>\r\n\r\n<h4>The open Function</h4>\r\n\r\n<p>Before you can read or write a file, you have to open it using Python&#39;s built-in open() function. This function creates a file object, which would be utilized to call other support methods associated with it.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\nfile_object = open(file_name [, access_mode][, buffering])</pre>\r\n\r\n<p><strong>Here is paramters&#39; detail</strong></p>\r\n\r\n<ul>\r\n\t<li>file_name: The file_name argument is a string value that contains the name of the file that you want to access.</li>\r\n\t<li>access_mode: The access_mode determines the mode in which the file has to be opened, i.e., read, write, append, etc. A complete list of possible values is given below in the table. This is optional parameter and the default file access mode is read (r).</li>\r\n\t<li>buffering: If the buffering value is set to 0, no buffering will take place. If the buffering value is 1, line will be performed while accessing a file. If you specify the buffering value as an integer greater than 1, then buffering action will be performed with the indicated buffer size. If negative, the buffer size is the system default(default behavior).</li>\r\n</ul>\r\n\r\n<p>Here is a list of the different modes of opening a file:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">Modes</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">r</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">rb</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">r+</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for both reading and writing. The file pointer will be at the beginning of the file.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">rb+</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for both reading and writing in binary format. The file pointer will be at the beginning of the file.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">w</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">wb</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing. </span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">w+</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">wb+</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">a</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing. </span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">ab</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing. </span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">a+</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">ab+</span></td>\r\n\t\t\t<td style=\"background-color:#ffffff; text-align:justify; vertical-align:middle\"><span style=\"color:#0000ff\">Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>The file object attributes</h4>\r\n\r\n<p>Once a file is opened and you have one fileobject, you can get various information related to that file. Here is a list of all attributes related to file object</p>\r\n\r\n<ul>\r\n\t<li>AttributeDescription</li>\r\n\t<li>file.closedReturns true if file is closed, false otherwise.</li>\r\n\t<li>file.modeReturns access mode with which file was opened.</li>\r\n\t<li>file.nameReturns name of the file.</li>\r\n\t<li>file.softspaceReturns false if space explicitly required with print, true otherwise.</li>\r\n</ul>\r\n\r\n<h4>Example</h4>\r\n\r\n<pre>\r\n# Open a file\r\nfo = open(&quot;foo.txt&quot;, &quot;wb&quot;)\r\nprint (&quot;Name of the file: &quot;, fo.name)\r\nprint (&quot;Closed or not : &quot;, fo.closed)\r\nprint (&quot;Opening mode : &quot;, fo.mode)\r\nprint (&quot;Softspace flag : &quot;, fo.softspace)</pre>\r\n\r\n<p>This would produce the following result:</p>\r\n\r\n<pre>\r\nName of the file:  foo.txt\r\nClosed or not :  False\r\nOpening mode :  wb\r\nSoftspace flag :  0</pre>\r\n\r\n<h4>The close() Method</h4>\r\n\r\n<p>The close() method of a file object flushes any unwritten information and closes the file object, after which no more writing can be done. Python automatically closes a file when the reference object of a file is reassigned to another file. It is a good practice to use the close() method to close a file.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\nfileObject.close()</pre>\r\n\r\n<h4>Example</h4>\r\n\r\n<pre>\r\n# Open a file\r\nfo = open(&quot;foo.txt&quot;, &quot;wb&quot;)\r\nprint &quot;Name of the file: &quot;, fo.name\r\n\r\n# Close opend file\r\nfo.close()</pre>\r\n\r\n<p>This would produce the following result:</p>\r\n\r\n<pre>\r\nName of the file:  foo.txt</pre>\r\n\r\n<h4>Reading and Writing Files</h4>\r\n\r\n<p>The file object provides a set of access methods to make our lives easier. We would see how to use read() and write() methods to read and write files.</p>\r\n\r\n<h4>The write() Method</h4>\r\n\r\n<p>The write() method writes any string to an open file. It is important to note that Python strings can have binary data and not just text. The write() method does not add a newline character (&#39;\\n&#39;) to the end of the string:</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\nfileObject.write(string)</pre>\r\n\r\n<p>Here, passed parameter is the content to be written into the opened file.</p>\r\n\r\n<h4>Example</h4>\r\n\r\n<pre>\r\n# Open a file\r\nfo = open(&quot;foo.txt&quot;, &quot;wb&quot;)\r\nfo.write( &quot;Python is a great language.\\nYeah its great!!\\n&quot;);\r\n\r\n# Close opend file\r\nfo.close()</pre>\r\n\r\n<p>The above method would create foo.txt file and would write given content in that file and finally it would close that file. If you would open this file, it would have following content.</p>\r\n\r\n<pre>\r\nPython is a great language.\r\nYeah its great!!</pre>\r\n\r\n<h4>The read() Method</h4>\r\n\r\n<p>The read() method reads a string from an open file. It is important to note that Python strings can have binary data and not just text.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\nfileObject.read([count])</pre>\r\n\r\n<p>Here, passed parameter is the number of bytes to be read from the opened file. This method starts reading from the beginning of the file and if count is missing, then it tries to read as much as possible, maybe until the end of file.</p>\r\n\r\n<h4>Example</h4>\r\n\r\n<p>Let&#39;s take a file foo.txt, which we have created above.</p>\r\n\r\n<pre>\r\n# Open a file\r\nfo = open(&quot;foo.txt&quot;, &quot;r+&quot;)\r\nstr = fo.read(10);\r\nprint &quot;Read String is : &quot;, str\r\n# Close opend file\r\nfo.close()</pre>\r\n\r\n<p>This would produce the following result:</p>\r\n\r\n<pre>\r\nRead String is :  Python is</pre>\r\n\r\n<h4>File Positions</h4>\r\n\r\n<p>The tell() method tells you the current position within the file; in other words, the next read or write will occur at that many bytes from the beginning of the file. The seek(offset[, from]) method changes the current file position. The offset argument indicates the number of bytes to be moved. The from argument specifies the reference position from where the bytes are to be moved. If from is set to 0, it means use the beginning of the file as the reference position and 1 means use the current position as the reference position and if it is set to 2 then the end of the file would be taken as the reference position.</p>\r\n\r\n<h4>Example</h4>\r\n\r\n<p>Let&#39;s take a file foo.txt, which we have created above.</p>\r\n\r\n<pre>\r\n# Open a file\r\nfo = open(&quot;foo.txt&quot;, &quot;r+&quot;)\r\nstr = fo.read(10);\r\nprint &quot;Read String is : &quot;, str\r\n\r\n# Check current position\r\nposition = fo.tell();\r\nprint &quot;Current file position : &quot;, position\r\n\r\n# Reposition pointer at the beginning once again\r\nposition = fo.seek(0, 0);\r\nstr = fo.read(10);\r\nprint &quot;Again read String is : &quot;, str\r\n# Close opend file\r\nfo.close()\r\n    </pre>\r\n\r\n<p>This would produce the following result:</p>\r\n\r\n<pre>\r\nRead String is :  Python is\r\nCurrent file position :  10\r\nAgain read String is :  Python is</pre>\r\n\r\n<h4>Renaming and Deleting Files</h4>\r\n\r\n<p>Python os module provides methods that help you perform file-processing operations, such as renaming and deleting files. To use this module you need to import it first and then you can call any related functions.</p>\r\n\r\n<h4>The rename() Method:</h4>\r\n\r\n<p>The rename() method takes two arguments, the current filename and the new filename.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\nos.rename(current_file_name, new_file_name)</pre>\r\n\r\n<h4>Example</h4>\r\n\r\n<p>Following is the example to rename an existing file test1.txt:</p>\r\n\r\n<pre>\r\nimport os\r\n\r\n# Rename a file from test1.txt to test2.txt\r\nos.rename( &quot;test1.txt&quot;, &quot;test2.txt&quot; )</pre>\r\n\r\n<h4>The remove() Method</h4>\r\n\r\n<p>You can use the remove() method to delete files by supplying the name of the file to be deleted as the argument.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\nos.remove(file_name)</pre>\r\n\r\n<h4>Example</h4>\r\n\r\n<p>Following is the example to delete an existing file test2.txt:</p>\r\n\r\n<pre>\r\nimport os\r\n\r\n# Delete file test2.txt\r\nos.remove(&quot;text2.txt&quot;)</pre>\r\n\r\n<h4>Directories in Python</h4>\r\n\r\n<p>All files are contained within various directories, and Python has no problem handling these too. The os module has several methods that help you create, remove and change directories.</p>\r\n\r\n<h4>The mkdir() Method</h4>\r\n\r\n<p>You can use the mkdir() method of the osmodule to create directories in the current directory. You need to supply an argument to this method which contains the name of the directory to be created.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\nos.mkdir(&quot;newdir&quot;)</pre>\r\n\r\n<h4>Example</h4>\r\n\r\n<p>Following is the example to create a directory test in the current directory:</p>\r\n\r\n<pre>\r\nimport os\r\n\r\n# Create a directory &quot;test&quot;\r\nos.mkdir(&quot;test&quot;)\r\n    </pre>\r\n\r\n<h4>The chdir() Method</h4>\r\n\r\n<p>You can use the chdir() method to change the current directory. The chdir() method takes an argument, which is the name of the directory that you want to make the current directory.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\nos.chdir(&quot;newdir&quot;)</pre>\r\n\r\n<h4>Example</h4>\r\n\r\n<p>Following is the example to go into &quot;/home/newdir&quot; directory:</p>\r\n\r\n<pre>\r\nimport os\r\n\r\n# Changing a directory to &quot;/home/newdir&quot;\r\nos.chdir(&quot;/home/newdir&quot;)\r\nThe getcwd() Method:\r\nThe getcwd() method displays the current working directory.\r\nSyntax:\r\nos.getcwd()\r\n    </pre>\r\n\r\n<h4>Example</h4>\r\n\r\n<p>Following is the example to give current directory:</p>\r\n\r\n<pre>\r\nimport os\r\n\r\n# This would give location of the current directory\r\nos.getcwd()\r\nThe rmdir() Method:\r\nThe rmdir() method deletes the directory, which is passed as an argument in the method.</pre>\r\n\r\n<p>Before removing a directory, all the contents in it should be removed.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\nos.rmdir(&#39;dirname&#39;)</pre>\r\n\r\n<h4>Example</h4>\r\n\r\n<p>Following is the example to remove &quot;/tmp/test&quot; directory. It is required to give fully qualified name of the directory, otherwise it would search for that directory in the current directory.</p>\r\n\r\n<pre>\r\nimport os\r\n\r\n# This would  remove &quot;/tmp/test&quot;  directory.\r\nos.rmdir( &quot;/tmp/test&quot;  )</pre>\r\n\r\n<h4>File &amp; Directory Related Methods</h4>\r\n\r\n<p>There are three important sources, which provide a wide range of utility methods to handle and manipulate files &amp; directories on Windows and Unix operating systems. They are as follows:</p>\r\n\r\n<ul>\r\n\t<li>File Object Methods: The file object provides functions to manipulate files.</li>\r\n\t<li>OS Object Methods: This provides methods to process files as well as directories.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:01:22.488120", "intro_text": "By now you should be wondering if there is a way to store data permanently either than in variables, lists or dictionaries. Well, Python provides one of the easiest way to work with files. CRUD(Create, Read, Update and Delete) is made so simple with Python's file system.", "lesson_id": 14, "resource_uri": "/lessonapi/Lesson/14/", "title": "Storage"}, {"body": "<p>The Python standard for database interfaces is the Python DB-API. Most Python database interfaces adhere to this standard. You can choose the right database for your application. Python Database API supports a wide range of database servers:</p>\r\n\r\n<ul>\r\n\t<li>GadFly</li>\r\n\t<li>mSQL</li>\r\n\t<li>MySQL</li>\r\n\t<li>PostgreSQL</li>\r\n\t<li>Microsoft SQL Server 2000</li>\r\n\t<li>Informix</li>\r\n\t<li>Interbase</li>\r\n\t<li>Oracle</li>\r\n\t<li>Sybase</li>\r\n</ul>\r\n\r\n<p>Here is the list of available Python database interfaces: Python Database Interfaces and APIs.You must download a separate DB API module for each database you need to access. For example, if you need to access an Oracle database as well as a MySQL database, you must download both the Oracle and the MySQL database modules. The DB API provides a minimal standard for working with databases using Python structures and syntax wherever possible. This API includes the following:</p>\r\n\r\n<ul>\r\n\t<li>Importing the API module.</li>\r\n\t<li>Acquiring a connection with the database.</li>\r\n\t<li>Issuing SQL statements and stored procedures.</li>\r\n\t<li>Closing the connection</li>\r\n</ul>\r\n\r\n<p>We would learn all the concepts using MySQL, so let&#39;s talk about MySQLdb module only.</p>\r\n\r\n<h4>What is MySQLdb?</h4>\r\n\r\n<p>MySQLdb is an interface for connecting to a MySQL database server from Python. It implements the Python Database API v2.0 and is built on top of the MySQL C API.</p>\r\n\r\n<h4>How do I install the MySQLdb?</h4>\r\n\r\n<p>Before proceeding, you make sure you have MySQLdb installed on your machine. Just type the following in your Python script and execute it:</p>\r\n\r\n<pre>\r\nimport MySQLdb\r\nIf it produces the following result, then it means MySQLdb module is not installed:\r\nTraceback (most recent call last):\r\n  File &quot;test.py&quot;, line 3, in \r\n    import MySQLdb\r\nImportError: No module named MySQLdb\r\nTo install MySQLdb module, download it from MySQLdb Download page and proceed as follows:\r\n$ gunzip MySQL-python-1.2.2.tar.gz\r\n$ tar -xvf MySQL-python-1.2.2.tar\r\n$ cd MySQL-python-1.2.2\r\n$ python setup.py build\r\n$ python setup.py install</pre>\r\n\r\n<div>\r\n<h5>Tip</h5>\r\nMake sure you have root privilege to install above module.</div>\r\n\r\n<h4>Database Connection</h4>\r\n\r\n<p>Before connecting to a MySQL database, make sure of the followings:</p>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n\t<li>You have created a database TESTDB.</li>\r\n</ul>\r\n\r\n<ul>\r\n\t<li>You have created a table EMPLOYEE in TESTDB.</li>\r\n</ul>\r\n\r\n<ul>\r\n\t<li>This table is having fields FIRST_NAME, LAST_NAME, AGE, SEX and INCOME.</li>\r\n</ul>\r\n\r\n<ul>\r\n\t<li>User ID &quot;testuser&quot; and password &quot;test123&quot; are set to access TESTDB.</li>\r\n</ul>\r\n\r\n<ul>\r\n\t<li>Python module MySQLdb is installed properly on your machine.</li>\r\n</ul>\r\n\r\n<ul>\r\n\t<li>You have gone through MySQL tutorial to understand MySQL Basics.</li>\r\n</ul>\r\n\r\n<p>Example: Following is the example of connecting with MySQL database &quot;TESTDB&quot;</p>\r\n\r\n<pre>\r\nimport MySQLdb\r\n\r\n# Open database connection\r\ndb = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )\r\n\r\n# prepare a cursor object using cursor() method\r\ncursor = db.cursor()\r\n\r\n# execute SQL query using execute() method.\r\ncursor.execute(&quot;SELECT VERSION()&quot;)\r\n\r\n# Fetch a single row using fetchone() method.\r\ndata = cursor.fetchone()\r\n\r\nprint &quot;Database version : %s &quot; % data\r\n\r\n# disconnect from server\r\ndb.close()\r\n    </pre>\r\n\r\n<p>While running this script, it is producing the following result in my Linux machine. Database version : 5.0.45 If a connection is established with the datasource, then a Connection Object is returned and saved into db for further use, otherwise db is set to None. Next, db object is used to create a cursor object, which in turn is used to execute SQL queries. Finally, before coming out, it ensures that database connection is closed and resources are released.</p>\r\n\r\n<h4>Creating Database Table</h4>\r\n\r\n<p>Once a database connection is established, we are ready to create tables or records into the database tables using execute method of the created cursor. Example: First, let&#39;s create Database table EMPLOYEE:</p>\r\n\r\n<pre>\r\nimport MySQLdb\r\n\r\n# Open database connection\r\ndb = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )\r\n\r\n# prepare a cursor object using cursor() method\r\ncursor = db.cursor()\r\n\r\n# Drop table if it already exist using execute() method.\r\ncursor.execute(&quot;DROP TABLE IF EXISTS EMPLOYEE&quot;)\r\n\r\n# Create table as per requirement\r\nsql = &quot;&quot;&quot;CREATE TABLE EMPLOYEE (\r\n         FIRST_NAME  CHAR(20) NOT NULL,\r\n         LAST_NAME  CHAR(20),\r\n         AGE INT,\r\n         SEX CHAR(1),\r\n         INCOME FLOAT )&quot;&quot;&quot;\r\n\r\ncursor.execute(sql)\r\n\r\n# disconnect from server\r\ndb.close()</pre>\r\n\r\n<h4>INSERT Operation</h4>\r\n\r\n<p>INSERT operation is required when you want to create your records into a database table. Example: Following is the example, which executes SQL INSERT statement to create a record into EMPLOYEE table:</p>\r\n\r\n<pre>\r\nimport MySQLdb\r\n\r\n# Open database connection\r\ndb = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )\r\n\r\n# prepare a cursor object using cursor() method\r\ncursor = db.cursor()\r\n\r\n# Prepare SQL query to INSERT a record into the database.\r\nsql = &quot;&quot;&quot;INSERT INTO EMPLOYEE(FIRST_NAME,\r\n         LAST_NAME, AGE, SEX, INCOME)\r\n         VALUES (&#39;Mac&#39;, &#39;Mohan&#39;, 20, &#39;M&#39;, 2000)&quot;&quot;&quot;\r\ntry:\r\n   # Execute the SQL command\r\n   cursor.execute(sql)\r\n   # Commit your changes in the database\r\n   db.commit()\r\nexcept:\r\n   # Rollback in case there is any error\r\n   db.rollback()\r\n\r\n# disconnect from server\r\ndb.close()\r\n    </pre>\r\n\r\n<p>Above example can be written as follows to create SQL queries dynamically:</p>\r\n\r\n<pre>\r\nimport MySQLdb\r\n\r\n# Open database connection\r\ndb = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )\r\n\r\n# prepare a cursor object using cursor() method\r\ncursor = db.cursor()\r\n\r\n# Prepare SQL query to INSERT a record into the database.\r\nsql = &quot;INSERT INTO EMPLOYEE(FIRST_NAME, \\\r\n       LAST_NAME, AGE, SEX, INCOME) \\\r\n       VALUES (&#39;%s&#39;, &#39;%s&#39;, &#39;%d&#39;, &#39;%c&#39;, &#39;%d&#39; )&quot; % \\\r\n       (&#39;Mac&#39;, &#39;Mohan&#39;, 20, &#39;M&#39;, 2000)\r\ntry:\r\n   # Execute the SQL command\r\n   cursor.execute(sql)\r\n   # Commit your changes in the database\r\n   db.commit()\r\nexcept:\r\n   # Rollback in case there is any error\r\n   db.rollback()\r\n\r\n# disconnect from server\r\ndb.close()</pre>\r\n\r\n<p>Example: Following code segment is another form of execution where you can pass parameters directly:</p>\r\n\r\n<pre>\r\n..................................\r\nuser_id = &quot;test123&quot;\r\npassword = &quot;password&quot;\r\n\r\ncon.execute(&#39;insert into Login values(&quot;%s&quot;, &quot;%s&quot;)&#39; % \\\r\n             (user_id, password))\r\n..................................</pre>\r\n\r\n<h4>READ Operation</h4>\r\n\r\n<p>READ Operation on any databasse means to fetch some useful information from the database. Once our database connection is established, we are ready to make a query into this database. We can use either fetchone() method to fetch single record or fetchall() method to fetch multiple values from a database table.</p>\r\n\r\n<ul>\r\n\t<li>fetchone(): This method fetches the next row of a query result set. A result set is an object that is returned when a cursor object is used to query a table.</li>\r\n\t<li>fetchall(): This method fetches all the rows in a result set. If some rows have already been extracted from the result set, the fetchall() method retrieves the remaining rows from the result set.</li>\r\n\t<li>rowcount: This is a read-only attribute and returns the number of rows that were affected by an execute() method.</li>\r\n</ul>\r\n\r\n<p>Example: Following is the procedure to query all the records from EMPLOYEE table having salary more than 1000:</p>\r\n\r\n<pre>\r\nimport MySQLdb\r\n\r\n# Open database connection\r\ndb = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )\r\n\r\n# prepare a cursor object using cursor() method\r\ncursor = db.cursor()\r\n\r\n# Prepare SQL query to INSERT a record into the database.\r\nsql = &quot;SELECT * FROM EMPLOYEE \\\r\n       WHERE INCOME &gt; &#39;%d&#39;&quot; % (1000)\r\ntry:\r\n   # Execute the SQL command\r\n   cursor.execute(sql)\r\n   # Fetch all the rows in a list of lists.\r\n   results = cursor.fetchall()\r\n   for row in results:\r\n      fname = row[0]\r\n      lname = row[1]\r\n      age = row[2]\r\n      sex = row[3]\r\n      income = row[4]\r\n      # Now print fetched result\r\n      print &quot;fname=%s,lname=%s,age=%d,sex=%s,income=%d&quot; % \\\r\n             (fname, lname, age, sex, income )\r\nexcept:\r\n   print &quot;Error: unable to fecth data&quot;\r\n\r\n# disconnect from server\r\ndb.close()\r\n    </pre>\r\n\r\n<p>This will produce the following result:</p>\r\n\r\n<pre>\r\n    fname=Mac, lname=Mohan, age=20, sex=M, income=2000</pre>\r\n\r\n<h4>Update Operation</h4>\r\n\r\n<p>UPDATE Operation on any databasse means to update one or more records, which are already available in the database. Following is the procedure to update all the records having SEX as &#39;M&#39;. Here, we will increase AGE of all the males by one year. Example:</p>\r\n\r\n<pre>\r\nimport MySQLdb\r\n\r\n# Open database connection\r\ndb = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )\r\n\r\n# prepare a cursor object using cursor() method\r\ncursor = db.cursor()\r\n\r\n# Prepare SQL query to UPDATE required records\r\nsql = &quot;UPDATE EMPLOYEE SET AGE = AGE + 1\r\n                          WHERE SEX = &#39;%c&#39;&quot; % (&#39;M&#39;)\r\ntry:\r\n   # Execute the SQL command\r\n   cursor.execute(sql)\r\n   # Commit your changes in the database\r\n   db.commit()\r\nexcept:\r\n   # Rollback in case there is any error\r\n   db.rollback()\r\n\r\n# disconnect from server\r\ndb.close()\r\n    </pre>\r\n\r\n<h4>DELETE Operation</h4>\r\n\r\n<p>DELETE operation is required when you want to delete some records from your database. Following is the procedure to delete all the records from EMPLOYEE where AGE is more than 20: Example:</p>\r\n\r\n<pre>\r\nimport MySQLdb\r\n\r\n# Open database connection\r\ndb = MySQLdb.connect(&quot;localhost&quot;,&quot;testuser&quot;,&quot;test123&quot;,&quot;TESTDB&quot; )\r\n\r\n# prepare a cursor object using cursor() method\r\ncursor = db.cursor()\r\n\r\n# Prepare SQL query to DELETE required records\r\nsql = &quot;DELETE FROM EMPLOYEE WHERE AGE &gt; &#39;%d&#39;&quot; % (20)\r\ntry:\r\n   # Execute the SQL command\r\n   cursor.execute(sql)\r\n   # Commit your changes in the database\r\n   db.commit()\r\nexcept:\r\n   # Rollback in case there is any error\r\n   db.rollback()\r\n\r\n# disconnect from server\r\ndb.close()\r\n    </pre>\r\n\r\n<h4>Performing Transactions</h4>\r\n\r\n<p>Transactions are a mechanism that ensures data consistency. Transactions should have the following four properties:</p>\r\n\r\n<ul>\r\n\t<li>Atomicity: Either a transaction completes or nothing happens at all.</li>\r\n\t<li>Consistency: A transaction must start in a consistent state and leave the system in a consistent state.</li>\r\n\t<li>Isolation: Intermediate results of a transaction are not visible outside the current transaction.</li>\r\n\t<li>Durability: Once a transaction was committed, the effects are persistent, even after a system failure.</li>\r\n</ul>\r\n\r\n<p>The Python DB API 2.0 provides two methods to either commit or rollback a transaction. Example: You already have seen how we have implemented transactions. Here is again similar example:</p>\r\n\r\n<pre>\r\n    # Prepare SQL query to DELETE required records\r\nsql = &quot;DELETE FROM EMPLOYEE WHERE AGE &gt; &#39;%d&#39;&quot; % (20)\r\ntry:\r\n   # Execute the SQL command\r\n   cursor.execute(sql)\r\n   # Commit your changes in the database\r\n   db.commit()\r\nexcept:\r\n   # Rollback in case there is any error\r\n   db.rollback()</pre>\r\n\r\n<h4>COMMIT Operation</h4>\r\n\r\n<p>Commit is the operation, which gives a green signal to database to finalize the changes, and after this operation, no change can be reverted back. Here is a simple example to call commit method. <code>db.commit()</code></p>\r\n\r\n<h4>ROLLBACK Operation</h4>\r\n\r\n<p>If you are not satisfied with one or more of the changes and you want to revert back those changes completely, then use rollback()method. Here is a simple example to call rollback()method. <code>db.rollback()</code></p>\r\n\r\n<h4>Disconnecting Database</h4>\r\n\r\n<p>To disconnect Database connection, use close() method. <code>db.close()</code> If the connection to a database is closed by the user with the close() method, any outstanding transactions are rolled back by the DB. However, instead of depending on any of DB lower level implementation details, your application would be better off calling commit or rollback explicitly.</p>\r\n\r\n<h4>Handling Errors</h4>\r\n\r\n<p>There are many sources of errors. A few examples are a syntax error in an executed SQL statement, a connection failure, or calling the fetch method for an already canceled or finished statement handle. The DB API defines a number of errors that must exist in each database module. The following table lists these exceptions.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table align=\"center\" border=\"4\" cellpadding=\"2\" cellspacing=\"2\" style=\"color:blue; height:350px; overflow-x:auto\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000cc; border-color:#ffffff\"><span style=\"color:#ffffff\">Exception</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000cc; border-color:#ffffff\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Warning</td>\r\n\t\t\t<td>Used for non-fatal issues. Must subclass StandardError.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Error</td>\r\n\t\t\t<td>Base class for errors. Must subclass StandardError.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>InterfaceError</td>\r\n\t\t\t<td>Used for errors in the database module, not the database itself. Must subclass Error.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>DatabaseError</td>\r\n\t\t\t<td>Used for errors in the database. Must subclass Error.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>DataError</td>\r\n\t\t\t<td>Subclass of DatabaseError that refers to errors in the data.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>OperationalError</td>\r\n\t\t\t<td>Subclass of DatabaseError that refers to errors such as the loss of a connection to the database. These errors are generally outside of the control of the Python scripter.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>IntegrityError</td>\r\n\t\t\t<td>Subclass of DatabaseError for situations that would damage the relational integrity, such as uniqueness constraints or foreign keys.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>InternalError</td>\r\n\t\t\t<td>Subclass of DatabaseError that refers to errors internal to the database module, such as a cursor no longer being active.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>ProgrammingError</td>\r\n\t\t\t<td>Subclass of DatabaseError that refers to errors such as a bad table name and other things that can safely be blamed on you.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>NotSupportedError</td>\r\n\t\t\t<td>\r\n\t\t\t<p>Subclass of DatabaseError that refers to trying to call unsupported functionality.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<div>\r\n<h5>Tip</h5>\r\nYour Python scripts should handle these errors, but before using any of the above exceptions, make sure your MySQLdb has support for that exception. You can get more information about them by reading the DB API 2.0 specification.</div>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:04:32.029929", "intro_text": "Database is another way of storing data. probably the most popular for bigger application. Python's DB_API provides an interface to interact with the most popular databases on the market.", "lesson_id": 15, "resource_uri": "/lessonapi/Lesson/15/", "title": "DBA"}, {"body": "<p>&nbsp;</p>\r\n\r\n<h4>What is an Error?</h4>\r\n\r\n<p>I am sure you have already encountered an error trying to run your first program and you might have been a bit frustrated because what was printed out was confusing and almost unreadable. Well, welcome to the error side of programming. Learning to handle errors will help you to write applications faster and make your application more secured.</p>\r\n\r\n<p>Here&#39;s one thing you should know: You do not stop committing errors because you have become more experienced at programming, you only reduce the errors and are able to foresee an impeding error and therefore are able to handle it.</p>\r\n\r\n<p>You are also able to read and understand error messages which helps in correcting your program just after reading the error message. Basically, you have just been told why you should treat this topic as an important one.</p>\r\n\r\n<h4>What is an Exception?</h4>\r\n\r\n<p>An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program&#39;s instructions. This means that exceptions are either logical or syntax related mistakes that you have made in your application and therefore prevents the application from running successfully.</p>\r\n\r\n<p>Whenever the interpreter encounters a problem, it stops executing the code even if the rest of the code after the error is correct.</p>\r\n\r\n<p>Imagine you send a robot to deliver a message for you on foot in a nearby town. Whenever this robot kicks a stone on the way, it returns and tells you that the rest of the journey is too dangerous so it was not able to deliver your message. And in asking for the reason for this conclusion, the robot tells you it was because he kicked a stone.</p>\r\n\r\n<p>You should probably tell the robot to look on the ground carefully while walking and whenever it kicks a stone, it should continue the journey assuring him that the rest of the journey is safe.</p>\r\n\r\n<p>Python does something like this every time it runs your program. The interpreter does not tolerate any mistake at all and cannot make intelligent guesses in order to deal with problems unless you provide a way out for it; this is called <strong>Error Handling.</strong> In general, when a Python script encounters a situation that it can&#39;t cope with, it raises an exception. An exception is a Python object that represents an error. When a Python script raises an exception (kicks a stone), it must either handle the exception immediately (know what to do) otherwise it would terminate and come out (come home without delivering the message).</p>\r\n\r\n<h4>Handling an exception</h4>\r\n\r\n<p>If you have some suspicious code that may raise an exception, you can defend your program by placing the suspicious code in a try: block. After the try: block, include an except: statement, followed by a block of code which handles the problem as elegantly as possible.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<p>Here is simple syntax of try....except...else blocks:</p>\r\n\r\n<pre>\r\ntry:\r\n   You do your operations here;\r\n   ......................\r\nexcept ExceptionI:\r\n   If there is ExceptionI, then execute this block.\r\nexcept ExceptionII:\r\n   If there is ExceptionII, then execute this block.\r\n   ......................\r\nelse:\r\n   If there is no exception then execute this block.</pre>\r\n\r\n<h4>Here are few important points about the above-mentioned syntax</h4>\r\n\r\n<p>A single try statement can have multiple except statements. This is useful when the try block contains statements that may throw different types of exceptions. You can also provide a generic except clause, which handles any exception. After the except clause(s), you can include an else-clause. The code in the else-block executes if the code in the try: block does not raise an exception. The else-block is a good place for code that does not need the try: block&#39;s protection. Example: Here is simple example, which opens a file and writes the content in the file and comes out gracefully because there is no problem at all:</p>\r\n\r\n<pre>\r\ntry:\r\n   fh = open(&quot;testfile&quot;, &quot;w&quot;)\r\n   fh.write(&quot;This is my test file for exception handling!!&quot;)\r\nexcept IOError:\r\n   print &quot;Error: can\\&#39;t find file or read data&quot;\r\nelse:\r\n   print &quot;Written content in the file successfully&quot;\r\n   fh.close()\r\n    </pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>This will produce the following result:</p>\r\n\r\n<pre>\r\nWritten content in the file successfully</pre>\r\n\r\n<p>Example: Here is one more simple example, which tries to open a file where you do not have permission to write in the file, so it raises an exception:</p>\r\n\r\n<pre>\r\ntry:\r\n   fh = open(&quot;testfile&quot;, &quot;r&quot;)\r\n   fh.write(&quot;This is my test file for exception handling!!&quot;)\r\nexcept IOError:\r\n   print &quot;Error: can\\&#39;t find file or read data&quot;\r\nelse:\r\n   print &quot;Written content in the file successfully&quot;\r\nThis will produce the following result:\r\n\r\nError: can&#39;t find file or read data\r\nThe except clause with no exceptions:\r\nYou can also use the except statement with no exceptions defined as follows:\r\n\r\ntry:\r\n   You do your operations here;\r\n   ......................\r\nexcept:\r\n   If there is any exception, then execute this block.\r\n   ......................\r\nelse:\r\n   If there is no exception then execute this block.</pre>\r\n\r\n<p>This kind of a try-except statement catches all the exceptions that occur.</p>\r\n\r\n<div>\r\n<h5>Tip</h5>\r\nUsing this kind of try-except statement is not considered a good programming practice though, because it catches all exceptions but does not make the programmer identify the root cause of the problem that may occur. So it may be better for catching all other exceptions after catching speccific ones.</div>\r\n\r\n<h4>The except clause with multiple exceptions</h4>\r\n\r\n<p>You can also use the same except statement to handle multiple exceptions as follows:</p>\r\n\r\n<pre>\r\ntry:\r\n   You do your operations here;\r\n   ......................\r\nexcept(Exception1[, Exception2[,...ExceptionN]]]):\r\n   If there is any exception from the given exception list,\r\n   then execute this block.\r\n   ......................\r\nelse:\r\n   If there is no exception then execute this block.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>The try-finally clause</h4>\r\n\r\n<p>You can use a finally: block along with a try: block. The finally block is a place to put any code that must execute, whether the try-block raised an exception or not. The syntax of the try-finally statement is this:</p>\r\n\r\n<pre>\r\ntry:\r\n   You do your operations here;\r\n   ......................\r\n   Due to any exception, this may be skipped.\r\nfinally:\r\n   This would always be executed.\r\n   ......................</pre>\r\n\r\n<div>\r\n<h5>Tip</h5>\r\nYou can provide except clause(s), or a finally clause, but not both. You can not use else clause as well along with a finally clause.</div>\r\n\r\n<p>Example:</p>\r\n\r\n<pre>\r\ntry:\r\n   fh = open(&quot;testfile&quot;, &quot;w&quot;)\r\n   fh.write(&quot;This is my test file for exception handling!!&quot;)\r\nfinally:\r\n   print &quot;Error: can\\&#39;t find file or read data&quot;</pre>\r\n\r\n<p>If you do not have permission to open the file in writing mode, then this will produce the following result:</p>\r\n\r\n<p><code>Error: can&#39;t find file or read data</code> Same example can be written more cleanly as follows:</p>\r\n\r\n<pre>\r\ntry:\r\n   fh = open(&quot;testfile&quot;, &quot;w&quot;)\r\n   try:\r\n      fh.write(&quot;This is my test file for exception handling!!&quot;)\r\n   finally:\r\n      print &quot;Going to close the file&quot;\r\n      fh.close()\r\nexcept IOError:\r\n   print &quot;Error: can&#39;t find file or read data&quot;\r\n    </pre>\r\n\r\n<p>When an exception is thrown in the try block, the execution immediately passes to the finally block. After all the statements in the finally block are executed, the exception is raised again and is handled in the except statements if present in the next higher layer of the try-except statement.</p>\r\n\r\n<h4>Argument of an Exception</h4>\r\n\r\n<p>An exception can have an argument, which is a value that gives additional information about the problem. The contents of the argument vary by exception. You capture an exception&#39;s argument by supplying a variable in the except clause as follows:</p>\r\n\r\n<pre>\r\ntry:\r\n   You do your operations here;\r\n   ......................\r\nexcept ExceptionType, Argument:\r\n   You can print value of Argument here...\r\n    </pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>If you are writing the code to handle a single exception, you can have a variable follow the name of the exception in the except statement. If you are trapping multiple exceptions, you can have a variable follow the tuple of the exception. This variable will receive the value of the exception mostly containing the cause of the exception. The variable can receive a single value or multiple values in the form of a tuple. This tuple usually contains the error string, the error number, and an error location. Example: Following is an example for a single exception:</p>\r\n\r\n<pre>\r\n# Define a function here.\r\ndef temp_convert(var):\r\n   try:\r\n      return int(var)\r\n   except ValueError, Argument:\r\n      print &quot;The argument does not contain numbers\\n&quot;, Argument\r\n\r\n# Call above function here.\r\ntemp_convert(&quot;xyz&quot;)\r\n    </pre>\r\n\r\n<p>This would produce the following result:</p>\r\n\r\n<pre>\r\nThe argument does not contain numbers\r\ninvalid literal for int() with base 10: &#39;xyz&#39;</pre>\r\n\r\n<h4>Raising an exceptions</h4>\r\n\r\n<p>You can raise exceptions in several ways by using the raise statement. The general syntax for the raise statement.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<p>raise [Exception [, args [, traceback]]] Here, Exception is the type of exception (for example, NameError) and argument is a value for the exception argument. The argument([Exception [, args [, traceback]]]) is optional; if not supplied, the exception argument is None. The final argument, traceback, is also optional (and rarely used in practice), and if present, is the traceback object used for the exception. Example: An exception can be a string, a class or an object. Most of the exceptions that the Python core raises are classes, with an argument that is an instance of the class. Defining new exceptions is quite easy and can be done as follows:</p>\r\n\r\n<pre>\r\ndef functionName( level ):\r\n   if level &lt; 1:\r\n      raise &quot;Invalid level!&quot;, level\r\n      # The code below to this would not be executed\r\n      # if we raise the exception\r\n    </pre>\r\n\r\n<div>\r\n<h5>Tip</h5>\r\nIn order to catch an exception, an &quot;except&quot; clause must refer to the same exception thrown either class object or simple string. For example, to capture above exception, we must write our except clause as follows:</div>\r\n\r\n<pre>\r\ntry:\r\n   Business Logic here...\r\nexcept &quot;Invalid level!&quot;:\r\n   Exception handling here...\r\nelse:\r\n   Rest of the code here...</pre>\r\n\r\n<h4>User-Defined Exceptions</h4>\r\n\r\n<p>Python also allows you to create your own exceptions by deriving classes from the standard built-in exceptions. Here is an example related to RuntimeError. Here, a class is created that is subclassed from RuntimeError. This is useful when you need to display more specific information when an exception is caught. In the try block, the user-defined exception is raised and caught in the except block. The variable e is used to create an instance of the class Networkerror.</p>\r\n\r\n<pre>\r\nclass Networkerror(RuntimeError):\r\n   def __init__(self, arg):\r\n      self.args = arg</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>So once you defined above class, you can raise your exception as follows:</p>\r\n\r\n<pre>\r\ntry:\r\n   raise Networkerror(&quot;Bad hostname&quot;)\r\nexcept Networkerror,e:\r\n   print e.args</pre>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:07:48.864867", "intro_text": "Errors. Everyone makes them unless you are perfect and of course, no one is perfect. Error handling is also made very easy while using Python, you get to handle specific errors and also generic errors (not a recommended practice) as well.", "lesson_id": 16, "resource_uri": "/lessonapi/Lesson/16/", "title": "Exceptions"}, {"body": "<p>Python has been an object-oriented language from day one. Because of this, creating and using classes and objects are downright easy. This chapter helps you become an expert in using Python&#39;s object-oriented programming support.</p>\r\n\r\n<h4>What is an object?</h4>\r\n\r\n<p>An object is an instance of a class. Now, that sentence is really short and very confusing. You will note that understanding what a class, and an instance are is essential to understanding the definition given. Getting this topic is very essential because creating your own classes is very important to maintaining your code, making your application easy to read and understand.</p>\r\n\r\n<p>Understanding this concept in programming will help you organise and be able to reuse your own code over and over again. Reusing your code will in turn save you a lot of time while coding. One more thing, it will help you write concise and shorter codes. Creating Classes. You follow a particular syntax to create classes in every language, but the general idea is to create a blueprint or an outline of a pariticular module or class, define (def) it&#39;s various parts (functions or methods) and what in particular each of these functions or methods do.</p>\r\n\r\n<h4>Declaring Objects.</h4>\r\n\r\n<p>After creating your class, you will require an object, which can &quot;wear&quot; or &quot;take up&quot; the form, attributes and methods of the class, this is the way to make your blueprint useful. You might find the idea a bit daunting at first, you may be asking, &quot;how do I put all of these together?&quot; Let&#39;s look at classes this way; you are human (an object of the human class) and you have parts (functions or methods) and these parts perform specific actions, and some, even multiple actions. Let&#39;s take the hand for an example and let&#39;s assume for the purpose of getting this idea clearly, that you only use the hand to throw a ball. This implies that anytime you want to use the hand, you will need a ball. Because..? Of course, because as we agreed earlier, the hand is for throwing a ball.</p>\r\n\r\n<h4>Arguments/Parameters.</h4>\r\n\r\n<p>We agreed that we needed a ball to use the hand. Do not get so lost in the analogy, the hand is a part of the human class, so the hand represents a function. Now, the name given to the ball is an argument or a parameter. Our function needs a ball (a parameter) in order to throw. So, any time you call this function, you need to supply it with a ball. You will do this in Python like this:</p>\r\n\r\n<pre>\r\n# Create an object of the human class and name it\r\nKofi =  Human()\r\n# Now call the function and supply it with a ball\r\nKofi.hand(&#39;ball&#39;)</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Default arguments.</h4>\r\n\r\n<p>Sometimes, during the creation of your class, you could provide a default argument to your function, so that whenever a user of your class calls that function without providing it with an argument, the function will go and pick up that default argument you provided to work with. Make this clear in your documentation so that the default behavior of your function will not be a surprise. Try this.</p>\r\n\r\n<pre>\r\n# importing the sys class\r\nimport sys\r\nprint(&quot;Hello&quot;)\r\nsys.exit(0)</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Now try this:</p>\r\n\r\n<pre>\r\nimport sys\r\nprint(&quot;hello&quot;)\r\nsys.exit()</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>So the first time, you supplied an argument and it worked fine, the next, you did not, it still did work fine. That is because, the one who created this function called &quot;exit&quot; from the class sys, supplied it with a default argument which gets supplied to the function in case you did not provide any argument like in the second case.</p>\r\n\r\n<h4>Always argue?</h4>\r\n\r\n<p>However, you will agree with me that not every function (part) should require an argument to work. And yes, it is not every function that we create that should require an argument. So you can create a function like that, when it gets called, it just does something without requiring the user to supply anything. Can you think of any situation like that? Let&#39;s try this: If I said to you: &quot;polish&quot;, you should definitely ask me for an argument, that is &quot;what should I polish?&quot;, but if I said &quot;jump&quot;, you sure can do that without any questions. Let&#39;s put this in code:</p>\r\n\r\n<pre>\r\n# Let&#39;s define our function called polish\r\n# Which always needs an argument\r\ndef polish(item):\r\n\tprint(&quot;polished &quot;,item)</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>So, calling this function without providing an argument (what to polish) should raise an error. Now, let&#39;s create one that does not require anything.</p>\r\n\r\n<pre>\r\n# Creating a function that does not require argument.\r\ndef jump():\r\n\tprint(&quot;Jumped&quot;)\r\nThe above requires no argument at all, so providing one will raise an error.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<h5>Take Note</h5>\r\nA typical function should return a value, we use the keyword <strong>return</strong> to terminate a function. So, if it is a calculation, then the return will return the final answer of the calculation. print was used just to make things clearer.</div>\r\n\r\n<p>Like this:</p>\r\n\r\n<pre>\r\ndef area_of_triangle(base,height):\r\n\tanswer = 0.5*base*height\r\n\treturn answer</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>This is because, we typically do not print the value returned from a function but we use it for somthing else, we will like to leave that to whoever uses the function, whether the person would like to just print the &quot;answer&quot; to the console, pass it to another function, display it on a webpage or even pass it on to an artificial intelligence system, anything.</p>\r\n\r\n<h4>Putting it all together</h4>\r\n\r\n<p>Now, we can put all of these methods in one class, so when we create an object of that class, the object can perform all of these functions. So, we could define thousands of functions in one class and then create objects which will inherit these functions. You might already be guessing some powerful things you could use this ability for. It even gets much more exciting to know that there is the ability to inherit from other classes. So, a class can serve as a parent class to other classes who then become the child classes. the child classes &quot;inherit&quot; the abilities of their parent class. We will talk about inheritance later, for now, lets create our own classes, a human class.</p>\r\n\r\n<pre>\r\n# Use the keyword class to begin and give it a name\r\nclass Human:\r\n\r\n# We then initialise the class using __init__ method\r\n# This gets called whenever a user object is created\r\n\r\n\tdef __init__(self,Name=&quot;Kojo&quot;):\r\n\t\tself.name = Name\r\n\r\n\tdef get_name(self):\r\n\t\treturn self.name\r\n\r\n\tdef set_name(self,Name):\r\n\t\tself.name = Name\r\n\t\treturn self.name\r\n\r\n\tdef polish(self,item):\r\n\t\tvalue_added = &quot;polished&quot;\r\n\t\treturn item,value_added\r\n\r\n\tdef jump(self):\r\n\t\treturn self.name, &quot;jumped&quot;</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n# Let&#39;s create an object of our class\r\n# Remember our __init__ requires two arguments:\r\n# Which are self (the object we created, so it&#39;s already supplied\r\n# And a Name\r\nKofi = Human(&quot;Kofi&quot;)</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n# Let&#39;s get the name of our object Kofi\r\nprint(Kofi.get_name())\r\n&gt;&gt;&gt;Kofi</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>From our <code>__init__</code> method, we have provided a default Name for any object created, so if you created an object of our Human class without passing any Name, the get_name method will still return that default argument, whcih in this case is Kojo. But if you do provide a Name like in the above, then that Name will override the default Name(Kojo).</p>\r\n\r\n<pre>\r\nLet&#39;s set a new name for our object Kofi\r\nprint(Kofi.set_name(&quot;Adwoa))\r\n&gt;&gt;&gt;Adwoa</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The self argument gets supplied to our method anytime we call the object so there&#39;s no need to supply it ourselves. The get method is used to get attributes of our object, in this case we wrote one that gets the Name of the object, there are in_built get methods, also the set methods are used to modify those attributes, we also wrote an example ourselves, which sets a new Name for our object. We then wrote two other methods, one is polish which takes an argument, particularly, the item to polish and returns a &quot;polished&quot; item. The other method is jump, which just makes the object jumps. So there, we have created our own class, provided our own getters and setters, and other methods. We also learnt how to create an object of our class and how to put that object in use.</p>\r\n\r\n<h4>Can you think of other methods you could add?</h4>\r\n\r\n<p>How about some other attributes apart from the Name?, like skin color, hair color...</p>\r\n\r\n<p><strong>FootNote: Some PEP8 rules were broken on purpose, this is to make codes clearer in our opinion and to make differentiating easier. In the case of the variable Naming, where we used &quot;Name&quot; instead of &quot;name&quot; is an example.</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Further Readings</h4>\r\n\r\n<p>A class is an outline or a blueprint for creating an object. It is how an object will look like and how the various parts of that object will function. Imagine an outline for a car, not the car itself but the outline, the various parts that will move to move the whole car. All of these parts must be pre-defined and theoretically tested before creating the real object which is the physical car. So, the physical car is a manifestation of the &quot;plan&quot; (outline).</p>\r\n\r\n<p>Classes help hide data that should not be accessible to the user from the user (data abstraction).</p>\r\n\r\n<p>Using the car example, you realise that while using a car, let&#39;s focus on driving and loading your stuff inside the car as it&#39;s only usage (well, is there another usage?), you are allowed by the company that made the car directly be able to control some parts of the car and even have a handbook on how to effectively control these parts.</p>\r\n\r\n<p>However, some parts of the car are a bit restricted because you will mess things up if you were an allowed easy access.</p>\r\n\r\n<p>This is exactly the concept that classes help you achieve and also allow you to group functions of the same entity together. If you are wondering what these functions could be just think of the car example again: the functions will include accelerate, so whenever the user calls accelerate, the car moves forward, reverse, break, steer right, steer left among others.</p>\r\n\r\n<p>Basically, this is the idea, when you create a class of a car, then you have created a car with all its functions but the car remains invisible and unusable until an object which is a physical manifestation of that car class is created. The object assumes all the definitions of that class, and performs all the functions defined in the class suite.</p>\r\n\r\n<p>When I say human, you definitely have an idea what a human looks like and the things that a human can do - that is the class. Now, you will agree that every human have their unique features and abilities even though they all belong to the same blueprint (The Human Class).</p>\r\n\r\n<p>In progrmming, this concept of every unique human being (object of the human class) having their own unique features is implemented by creating only one class but having as many objects of that class as possible and each object having their own unique features (class variables).</p>\r\n\r\n<p>Inheriting features from an &quot;older&quot; class is allowed, just like you inherited some features from your Mum or Dad.</p>\r\n\r\n<h4>Did you get the point?</h4>\r\n\r\n<p>In beginning, I said an object is an instance of a class. do you get the point now? An object is an entity of a class, an object is the manifestation of a class. When I say this is a dog, you definitely have a blueprint or outline of a dog in your mind to agree or disagree with, so goes for any object, the object must have the features of it&#39;s class.</p>\r\n\r\n<div>\r\n<h5>Tip</h5>\r\nA dog must look like what dogs look like, and human like humans look like. In that sentence, &quot;a dog&quot; is an object or an instance of the &quot;dogs&quot; class and &quot;human&quot; is an object of the &quot;humans&quot; class.</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Now let&#39;s move on to some terminologies and their definitions before creating our own classes and objects.</p>\r\n\r\n<h4>Overview of OOP Terminology</h4>\r\n\r\n<ul>\r\n\t<li><strong>Class:</strong> A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. The attributes are data members (class variables and instance variables) and methods, accessed via dot notation.</li>\r\n\t<li><strong>Class variable:</strong> A variable that is shared by all instances of a class. Class variables are defined within a class but outside any of the class&#39;s methods. Class variables aren&#39;t used as frequently as instance variables are.</li>\r\n\t<li><strong>Data member:</strong> A class variable or instance variable that holds data associated with a class and its objects.</li>\r\n\t<li><strong>Function overloading:</strong> The assignment of more than one behavior to a particular function. The operation performed varies by the types of objects (arguments) involved.</li>\r\n\t<li><strong>Instance variable:</strong> A variable that is defined inside a method and belongs only to the current instance of a class.</li>\r\n\t<li><strong>Inheritance :</strong> The transfer of the characteristics of a class to other classes that are derived from it.</li>\r\n\t<li><strong>Instance:</strong> An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance of the class Circle.</li>\r\n\t<li><strong>Instantiation:</strong> The creation of an instance of a class.</li>\r\n\t<li><strong>Method:</strong> A special kind of function that is defined in a class definition.</li>\r\n\t<li><strong>Object:</strong> A unique instance of a data structure that&#39;s defined by its class. An object comprises both data members (class variables and instance variables) and methods.</li>\r\n\t<li><strong>Operator overloading:</strong> The assignment of more than one function to a particular operator.</li>\r\n</ul>\r\n\r\n<h4>Creating Classes</h4>\r\n\r\n<p>The class statement creates a new class definition. The name of the class immediately follows the keyword class followed by a colon as follows:</p>\r\n\r\n<pre>\r\nclass ClassName:\r\n   &#39;Optional class documentation string&#39;\r\n   class_suite</pre>\r\n\r\n<p>The class has a documentation string, which can be accessed via ClassName.__doc__. The class_suite consists of all the component statements defining class members, data attributes and functions. Example: Following is the example of a simple Python class:</p>\r\n\r\n<pre>\r\nclass Employee:\r\n    #This is the docstring\r\n   &#39;Common base class for all employees&#39;\r\n    # class variable\r\n   empCount = 0\r\n    # initialization method\r\n   def __init__(self, name, salary):\r\n      self.name = name\r\n      self.salary = salary\r\n      Employee.empCount += 1\r\n    #Other class methods\r\n   def displayCount(self):\r\n     print (&quot;Total Employee %d&quot; % Employee.empCount)\r\n\r\n   def displayEmployee(self):\r\n      print (&quot;Name : &quot;, self.name,  &quot;, Salary: &quot;, self.salary)</pre>\r\n\r\n<p>The variable empCount is a class variable whose value would be shared among all instances of a this class. This can be accessed as <code>Employee.empCount</code> from inside the class or outside the class. The first method <code>__init__()</code> is a special method, which is called class constructor or initialization method that Python calls when you create a new instance of this class. You declare other class methods like normal functions with the exception that the first argument to each method is self. Python adds the self argument to the list for you; you don&#39;t need to include it when you call the methods.</p>\r\n\r\n<h4>Creating instance objects</h4>\r\n\r\n<p>To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.</p>\r\n\r\n<pre>\r\n#This would create first object of Employee class called Effie\r\nEffie = Employee(&quot;Effie&quot;, 6000)\r\n#This would create second object of Employee class called Ellie\r\nEllie = Employee(&quot;Ellie&quot;, 4000)</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>So, those two objects (emp1 and emp2) belong to the same class called Employee and have their unique features which differentiates one from the other. We created only one class but we could create two objects from that same class without wirting a class for the second object all over again. If there were a thousand Employees, we could just create a thousand objects from the same class with thier own Names and Salaries.</p>\r\n\r\n<h4>Accessing attributes</h4>\r\n\r\n<p>You access the object&#39;s attributes using the dot operator with object. Class variable would be accessed using class name as follows:</p>\r\n\r\n<pre>\r\nEffie.displayEmployee()\r\nEllie.displayEmployee()\r\nprint (&quot;Total Employee %d&quot; % Employee.empCount)</pre>\r\n\r\n<p>Now, putting all the concepts together:</p>\r\n\r\n<pre>\r\nclass Employee:\r\n   &#39;Common base class for all employees&#39;\r\n   empCount = 0\r\n\r\n   def __init__(self, name, salary):\r\n      self.name = name\r\n      self.salary = salary\r\n      Employee.empCount += 1\r\n\r\n   def displayCount(self):\r\n     print (&quot;Total Employee %d&quot; % Employee.empCount)\r\n\r\n   def displayEmployee(self):\r\n      print (&quot;Name : &quot;, self.name,  &quot;, Salary: &quot;, self.salary)\r\n\r\n#This would create first object of Employee class called emp1\r\nemp1 = Employee(&quot;Effie&quot;, 2000)\r\n#This would create second object of Employee class called emp2\r\nemp2 = Employee(&quot;Theo&quot;, 5000)\r\nemp1.displayEmployee()\r\nemp2.displayEmployee()\r\nprint (&quot;Total Employee %d&quot; % Employee.empCount)\r\nWhen the above code is executed, it produces the following result:\r\n\r\nName :  Effie ,Salary:  3000\r\nName :  Theo ,Salary:  5000\r\nTotal Employee 2\r\n    </pre>\r\n\r\n<p>You can add, remove or modify attributes of classes and objects at any time:</p>\r\n\r\n<pre>\r\nemp1.age = 7  # Add an &#39;age&#39; attribute.\r\nemp1.age = 8  # Modify &#39;age&#39; attribute.\r\ndel emp1.age  # Delete &#39;age&#39; attribute.</pre>\r\n\r\n<p>Instead of using the normal statements to access attributes,you can use following functions:</p>\r\n\r\n<pre>\r\nThe getattr(obj, name[, default]) : to access the attribute of object.\r\n\r\nThe hasattr(obj,name) : to check if an attribute exists or not.\r\n\r\nThe setattr(obj,name,value) : to set an attribute.\r\n    If attribute does not exist, then it would be created.\r\n\r\nThe delattr(obj, name) : to delete an attribute.\r\n\r\nhasattr(emp1, &#39;age&#39;)    # Returns true if &#39;age&#39; attribute exists\r\ngetattr(emp1, &#39;age&#39;)    # Returns value of &#39;age&#39; attribute\r\nsetattr(emp1, &#39;age&#39;, 8) # Set attribute &#39;age&#39; at 8\r\ndelattr(empl, &#39;age&#39;)    # Delete attribute &#39;age&#39;\r\n    </pre>\r\n\r\n<h4>Built-In Class Attributes</h4>\r\n\r\n<p>Every Python class keeps following built-in attributes and they can be accessed using dot operator like any other attribute: __dict__ : Dictionary containing the class&#39;s namespace. __doc__ : Class documentation string or None if undefined. __name__: Class name. __module__: Module name in which the class is defined. This attribute is &quot;__main__&quot; in interactive mode. __bases__ : A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list. For the above class let&#39;s try to access all these attributes:</p>\r\n\r\n<pre>\r\nclass Employee:\r\n   &#39;Common base class for all employees&#39;\r\n   empCount = 0\r\n\r\n   def __init__(self, name, salary):\r\n      self.name = name\r\n      self.salary = salary\r\n      Employee.empCount += 1\r\n\r\n   def displayCount(self):\r\n     print &quot;Total Employee %d&quot; % Employee.empCount\r\n\r\n   def displayEmployee(self):\r\n      print &quot;Name : &quot;, self.name,  &quot;, Salary: &quot;, self.salary</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\nprint (&quot;Employee.__doc__:&quot;, Employee.__doc__)\r\nprint (&quot;Employee.__name__:&quot;, Employee.__name__)\r\nprint (&quot;Employee.__module__:&quot;, Employee.__module__)\r\nprint (&quot;Employee.__bases__:&quot;, Employee.__bases__)\r\nprint (&quot;Employee.__dict__:&quot;, Employee.__dict__)\r\n    </pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\nEmployee.__doc__: Common base class for all employees\r\nEmployee.__name__: Employee\r\nEmployee.__module__: __main__\r\nEmployee.__bases__: ()\r\nEmployee.__dict__: {&#39;__module__&#39;: &#39;__main__&#39;, &#39;displayCount&#39;:\r\n, &#39;empCount&#39;: 2,\r\n&#39;displayEmployee&#39;: ,\r\n&#39;__doc__&#39;: &#39;Common base class for all employees&#39;,\r\n&#39;__init__&#39;: }\r\n            </pre>\r\n\r\n<h4>Destroying Objects (Garbage Collection)</h4>\r\n\r\n<p>Python deletes unneeded objects (built-in types or class instances) automatically to free memory space. The process by which Python periodically reclaims blocks of memory that no longer are in use is termed garbage collection. Python&#39;s garbage collector runs during program execution and is triggered when an object&#39;s reference count reaches zero. An object&#39;s reference count changes as the number of aliases that point to it changes. An object&#39;s reference count increases when it&#39;s assigned a new name or placed in a container (list, tuple or dictionary). The object&#39;s reference count decreases when it&#39;s deleted with del, its reference is reassigned, or its reference goes out of scope. When an object&#39;s reference count reaches zero, Python collects it automatically.</p>\r\n\r\n<pre>\r\na = 40      # Create object &lt;40&gt;\r\nb = a       # Increase ref. count  of &lt;40&gt;\r\nc = [b]     # Increase ref. count  of &lt;40&gt;\r\n\r\ndel a       # Decrease ref. count  of &lt;40&gt;\r\nb = 100     # Decrease ref. count  of &lt;40&gt;\r\nc[0] = -1   # Decrease ref. count  of &lt;40&gt;\r\n    </pre>\r\n\r\n<p>You normally won&#39;t notice when the garbage collector destroys an orphaned instance and reclaims its space. But a class can implement the special method <code>__del__()</code>, called a destructor, that is invoked when the instance is about to be destroyed. This method might be used to clean up any nonmemory resources used by an instance. Example: This <code>__del__()</code> destructor prints the class name of an instance that is about to be destroyed:</p>\r\n\r\n<pre>\r\nclass Point:\r\n   def __init( self, x=0, y=0):\r\n      self.x = x\r\n      self.y = y\r\n   def __del__(self):\r\n      class_name = self.__class__.__name__\r\n      print class_name, &quot;destroyed&quot;</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\npt1 = Point()\r\npt2 = pt1\r\npt3 = pt1\r\nprint id(pt1), id(pt2), id(pt3) # prints the ids of the obejcts\r\ndel pt1\r\ndel pt2\r\ndel pt3\r\n    </pre>\r\n\r\n<p>When the above code is executed, it produces following result:</p>\r\n\r\n<pre>\r\n3083401324 3083401324 3083401324\r\nPoint destroyed\r\n    </pre>\r\n\r\n<div>\r\n<h5>Tip</h5>\r\nIdeally, you should define your classes in separate file, then you should import them in your main program file using import statement. Kindly check <a href=\"/modules\" style=\"color:blue;\">PywE Modules chapter</a> for more details on importing modules and classes.</div>\r\n\r\n<h4>Class Inheritance</h4>\r\n\r\n<p>Instead of starting from scratch, you can create a class by deriving it from a preexisting class by listing the parent class in parentheses after the new class name. The child class inherits the attributes of its parent class, and you can use those attributes as if they were defined in the child class. A child class can also override data members and methods from the parent. Just the way you would inherit the physical features of your parents and even their properties.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<p>Derived classes are declared much like their parent class; however, a list of base classes to inherit from are given after the class name:</p>\r\n\r\n<pre>\r\nclass SubClassName (ParentClass1[, ParentClass2, ...]):\r\n   &#39;Optional class documentation string&#39;\r\n   class_suite</pre>\r\n\r\n<p>Example:</p>\r\n\r\n<pre>\r\nclass Parent:        # define parent class\r\n   parentAttr = 100\r\n   def __init__(self):\r\n      print (&quot;Calling parent constructor&quot;)\r\n\r\n   def parentMethod(self):\r\n      print (&#39;Calling parent method&#39;)\r\n\r\n   def setAttr(self, attr):\r\n      Parent.parentAttr = attr\r\n\r\n   def getAttr(self):\r\n      print &quot;Parent attribute :&quot;, Parent.parentAttr\r\n\r\nclass Child(Parent): # define child class\r\n   def __init__(self):\r\n      print (&quot;Calling child constructor&quot;)\r\n\r\n   def childMethod(self):\r\n      print (&#39;Calling child method&#39;)\r\n       </pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\nc = Child()          # instance of child\r\nc.childMethod()      # child calls its method\r\nc.parentMethod()     # calls parent&#39;s method\r\nc.setAttr(200)       # again call parent&#39;s method\r\nc.getAttr()          # again call parent&#39;s method\r\n    </pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\nCalling child constructor\r\nCalling child method\r\nCalling parent method\r\nParent attribute : 200\r\n    </pre>\r\n\r\n<p>Similar way, you can derive a class from multiple parent classes as follows:</p>\r\n\r\n<pre>\r\nclass A:        # define your class A\r\n.....\r\n\r\nclass B:         # define your calss B\r\n.....\r\n\r\nclass C(A, B):   # subclass of A and B\r\n.....\r\n    </pre>\r\n\r\n<p>You can use <code>issubclass()</code> or <code>isinstance()</code> functions to check a relationships of two classes and instances. The <code>issubclass(sub, sup)</code> boolean function returns true if the given subclass sub is indeed a subclass of the superclass sup. The <code>isinstance(obj, Class)</code> boolean function returns true if obj is an instance of class Class or is an instance of a subclass of Class</p>\r\n\r\n<h4>Overriding Methods</h4>\r\n\r\n<p>You can always override your parent class methods. One reason for overriding parent&#39;s methods is because you may want special or different functionality in your subclass. Example:</p>\r\n\r\n<pre>\r\nclass Parent:        # define parent class\r\n   def myMethod(self):\r\n      print (&#39;Calling parent method&#39;)\r\n\r\nclass Child(Parent): # define child class\r\n   def myMethod(self):\r\n      print (&#39;Calling child method&#39;)\r\n\r\nc = Child()          # instance of child\r\nc.myMethod()         # child calls overridden method\r\n    </pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\nCalling child method\r\n    </pre>\r\n\r\n<h4>Base Overloading Methods</h4>\r\n\r\n<p>Following table lists some generic functionality that you can override in your own classes:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"text-align: justify; vertical-align: middle; background-color: rgb(0, 0, 255);\"><span style=\"color:#ffffff\">Method</span></th>\r\n\t\t\t<th scope=\"col\" style=\"text-align: justify; vertical-align: middle; background-color: rgb(0, 0, 255);\"><span style=\"color:#ffffff\">Description &amp; Sample Call</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">__init__ ( self [,args...] )</span></td>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"color:#0000ff\">Constructor (with any optional arguments)</span></p>\r\n\r\n\t\t\t<p><span style=\"color:#0000ff\">Sample Call : obj = className(args)</span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">__del__( self )</span></td>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"color:#0000ff\">Destructor, deletes an object</span></p>\r\n\r\n\t\t\t<p><span style=\"color:#0000ff\">Sample Call : del obj</span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">__repr__( self )</span></td>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"color:#0000ff\">Evaluatable string representation</span></p>\r\n\r\n\t\t\t<p><span style=\"color:#0000ff\">Sample Call : repr(obj)</span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">__str__( self )</span></td>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"color:#0000ff\">Printable string representation</span></p>\r\n\r\n\t\t\t<p><span style=\"color:#0000ff\">Sample Call : str(obj)</span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">__cmp__ ( self, x )</span></td>\r\n\t\t\t<td>\r\n\t\t\t<p><span style=\"color:#0000ff\">Object comparison</span></p>\r\n\r\n\t\t\t<p><span style=\"color:#0000ff\">Sample Call : cmp(obj, x)</span></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<h4>Overloading Operators</h4>\r\n\r\n<p>Suppose you&#39;ve created a Vector class to represent two-dimensional vectors, what happens when you use the plus operator to add them? Most likely Python will yell at you. You could, however, define the __add__ method in your class to perform vector addition and then the plus operator would behave as per expectation: Example:</p>\r\n\r\n<pre>\r\nclass Vector:\r\n   def __init__(self, a, b):\r\n      self.a = a\r\n      self.b = b\r\n\r\n   def __str__(self):\r\n      return (&#39;Vector (%d, %d)&#39; % (self.a, self.b))\r\n\r\n   def __add__(self,other):\r\n      return (Vector(self.a + other.a, self.b + other.b))</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\nv1 = Vector(2,10)\r\nv2 = Vector(5,-2)\r\nprint (v1 + v2)</pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\nVector(7,8)</pre>\r\n\r\n<h4>Data Hiding</h4>\r\n\r\n<p>Remember we talked about hiding certain data from the user in order to prevent the user from messing up things? An object&#39;s attributes may or may not be visible outside the class definition. For these cases, you can name attributes with a double underscore prefix, and those attributes will not be directly visible to outsiders. Example:</p>\r\n\r\n<pre>\r\nclass JustCounter:\r\n   __secretCount = 0\r\n\r\n   def count(self):\r\n      self.__secretCount += 1\r\n      print (self.__secretCount)\r\n\r\ncounter = JustCounter()\r\ncounter.count()\r\ncounter.count()\r\nprint (counter.__secretCount)\r\n    </pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\n1\r\n2\r\nTraceback (most recent call last):\r\n  File &quot;test.py&quot;, line 12, in \r\n    print counter.__secretCount\r\nAttributeError: JustCounter instance has no attribute &#39;__secretCount&#39;</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Python protects those members by internally changing the name to include the class name. You can access such attributes as object._className__attrName. If you would replace your last line as following, then it would work for you: .........................</p>\r\n\r\n<p>print (counter._JustCounter__secretCount)</p>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\n1\r\n2\r\n2</pre>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:10:58.508162", "intro_text": "Object-Oriented  Programming is available in Python. It allows for creating your own classes, inheritance and other object-oriented style programming. It's a great way to organize and share your code. It also enhance re-usability of your own code.", "lesson_id": 17, "resource_uri": "/lessonapi/Lesson/17/", "title": "OOP"}, {"body": "<p>A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern. Regular expressions are widely used in UNIX world. The module re provides full support for Perl-like regular expressions in Python. The re module raises the exception re.error if an error occurs while compiling or using a regular expression. We would cover two important functions, which would be used to handle regular expressions. But a small thing first: There are various characters, which would have special meaning when they are used in regular expression. To avoid any confusion while dealing with regular expressions, we would use Raw Strings as r&#39;expression&#39;.</p>\r\n\r\n<h4>The match Function</h4>\r\n\r\n<p>This function attempts to match RE pattern to string with optional flags. Here is the syntax for this function: re.match(pattern, string, flags=0) Here is the description of the parameters:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Parameter</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">pattern</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">This is the regular expression to be matched.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">string</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">This is the string, which would be searched to match the pattern at the beginning of string. </span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">flags</span></td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"color:#0000ff\">You can specify different flags using bitwise OR (|).These are modifiers, which are listed in the table below.</span></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<pre>\r\n   \t        \r\n    \t        The re.match function returns a match object on success, None on failure. We would use group(num) or groups() function of match object to get matched expression.</pre>\r\n\r\n<pre>\r\n    Match Object Methods\tDescription\r\n\r\n    group(num=0)\t        This method returns entire match (or specific subgroup num)\r\n\r\n    groups()\t            This method returns all matching subgroups in a tuple (empty if there weren&#39;t any)</pre>\r\n\r\n<h4>Example</h4>\r\n\r\n<pre>\r\nimport re\r\n\r\nline = &quot;Cats are smarter than dogs&quot;\r\n\r\nmatchObj = re.match( r&#39;(.*) are (.*?) .*&#39;, line, re.M|re.I)\r\n\r\nif matchObj:\r\n   print &quot;matchObj.group() : &quot;, matchObj.group()\r\n   print &quot;matchObj.group(1) : &quot;, matchObj.group(1)\r\n   print &quot;matchObj.group(2) : &quot;, matchObj.group(2)\r\nelse:\r\n   print &quot;No match!!&quot;\r\nWhen the above code is executed, it produces following result:\r\nmatchObj.group() :  Cats are smarter than dogs\r\nmatchObj.group(1) :  Cats\r\nmatchObj.group(2) :  smarter</pre>\r\n\r\n<h4>The search Function</h4>\r\n\r\n<p>This function searches for first occurrence of RE pattern within string with optional flags. Here is the syntax for this function:</p>\r\n\r\n<pre>\r\nre.search(pattern, string, flags=0)</pre>\r\n\r\n<p>Here is the description of the parameters:</p>\r\n\r\n<pre>\r\n    Parameter\t    Description\r\n    pattern\t        This is the regular expression to be matched.\r\n    string\t        This is the string, which would be searched to\r\n                    match the pattern anywhere in the string.\r\n    flags\t        You can specify different flags using bitwise OR (|).\r\n                    These are modifiers, which are listed in the table below.</pre>\r\n\r\n<p>The re.search function returns a match object on success, None on failure. We would use group(num) or groups() function of match object to get matched expression.</p>\r\n\r\n<pre>\r\nMatch Object Methods\tDescription\r\ngroup(num=0)\t        This method returns entire match (or specific subgroup num)\r\ngroups()\t            This method returns all matching subgroups in a tuple (empty if there weren&#39;t any)</pre>\r\n\r\n<p>Example:</p>\r\n\r\n<pre>\r\nimport re\r\n\r\nline = &quot;Cats are smarter than dogs&quot;;\r\n\r\nsearchObj = re.search( r&#39;(.*) are (.*?) .*&#39;, line, re.M|re.I)\r\n\r\nif searchObj:\r\n   print &quot;searchObj.group() : &quot;, searchObj.group()\r\n   print &quot;searchObj.group(1) : &quot;, searchObj.group(1)\r\n   print &quot;searchObj.group(2) : &quot;, searchObj.group(2)\r\nelse:\r\n   print &quot;Nothing found!!&quot;\r\nWhen the above code is executed, it produces following result:\r\nmatchObj.group() :  Cats are smarter than dogs\r\nmatchObj.group(1) :  Cats\r\nmatchObj.group(2) :  smarter</pre>\r\n\r\n<h4>Matching vs Searching</h4>\r\n\r\n<p>Python offers two different primitive operations based on regular expressions: match checks for a match only at the beginning of the string, while search checks for a match anywhere in the string (this is what Perl does by default). Example:</p>\r\n\r\n<pre>\r\nimport re\r\n\r\nline = &quot;Cats are smarter than dogs&quot;;\r\n\r\nmatchObj = re.match( r&#39;dogs&#39;, line, re.M|re.I)\r\nif matchObj:\r\n   print &quot;match --&gt; matchObj.group() : &quot;, matchObj.group()\r\nelse:\r\n   print &quot;No match!!&quot;\r\n\r\nsearchObj = re.search( r&#39;dogs&#39;, line, re.M|re.I)\r\nif searchObj:\r\n   print &quot;search --&gt; searchObj.group() : &quot;, searchObj.group()\r\nelse:\r\n   print &quot;Nothing found!!&quot;\r\nWhen the above code is executed, it produces the following result:\r\nNo match!!\r\nsearch --&gt; matchObj.group() :  dogs</pre>\r\n\r\n<h4>Search and Replace</h4>\r\n\r\n<p>Some of the most important re methods that use regular expressions is sub.</p>\r\n\r\n<h4>Syntax</h4>\r\n\r\n<pre>\r\nre.sub(pattern, repl, string, max=0)</pre>\r\n\r\n<p>This method replaces all occurrences of the RE pattern in string with repl, substituting all occurrences unless max provided. This method would return modified string. Example: Following is the example:</p>\r\n\r\n<pre>\r\nimport re\r\n\r\nphone = &quot;2004-959-559 # This is Phone Number&quot;\r\n\r\n# Delete Python-style comments\r\nnum = re.sub(r&#39;#.*$&#39;, &quot;&quot;, phone)\r\nprint &quot;Phone Num : &quot;, num\r\n\r\n# Remove anything other than digits\r\nnum = re.sub(r&#39;\\D&#39;, &quot;&quot;, phone)\r\nprint &quot;Phone Num : &quot;, num\r\nWhen the above code is executed, it produces the following result:\r\nPhone Num :  2004-959-559\r\nPhone Num :  2004959559</pre>\r\n\r\n<h4>Regular-expression Modifiers - Option Flags</h4>\r\n\r\n<p>Regular expression literals may include an optional modifier to control various aspects of matching. The modifiers are specified as an optional flag. You can provide multiple modifiers using exclusive OR (|), as shown previously and may be represented by one of these:</p>\r\n\r\n<pre>\r\nModifier\tDescription\r\n\r\n    re.I\t    Performs case-insensitive matching.\r\n\r\n    re.L\t    Interprets words according to the current locale. This interpretation affects the\r\n                alphabetic group (\\w and \\W), as well as word boundary behavior (\\b and \\B).\r\n\r\n    re.M\t    Makes $ match the end of a line (not just the end of the string) and\r\n                makes ^ match the start of any line (not just the start of the string).\r\n\r\n    re.S\t    Makes a period (dot) match any character, including a newline.\r\n\r\n    re.U\t    Interprets letters according to the Unicode character set.\r\n                This flag affects the behavior of \\w, \\W, \\b, \\B.\r\n\r\n    re.X\t    Permits &quot;cuter&quot; regular expression syntax. It ignores whitespace (except\r\n                inside a set [] or when escaped by a backslash) and treats unescaped # as a comment marker.</pre>\r\n\r\n<h4>Regular-expression patterns</h4>\r\n\r\n<p>Except for control characters, <code>(+ ? . * ^ $ ( ) [ ] { } | \\),</code> all characters match themselves. You can escape a control character by preceding it with a backslash. Following table lists the regular expression syntax that is available in Python:</p>\r\n\r\n<pre>\r\n    Pattern\t    Description\r\n\r\n    ^\t        Matches beginning of line.\r\n\r\n    $\t        Matches end of line.\r\n\r\n    .\t        Matches any single character except newline.\r\n            Using m option allows it to match newline as well.\r\n\r\n    [...]\t    Matches any single character in brackets.\r\n\r\n    [^...]\t    Matches any single character not in brackets\r\n\r\n    re*\t        Matches 0 or more occurrences of preceding expression.\r\n\r\n    re+\t        Matches 1 or more occurrence of preceding expression.\r\n\r\n    re?\t        Matches 0 or 1 occurrence of preceding expression.\r\n\r\n    re{ n}\t    Matches exactly n number of occurrences of preceding expression.\r\n\r\n    re{ n,}\t    Matches n or more occurrences of preceding expression.\r\n\r\n    re{ n, m}\tMatches at least n and at most m occurrences of preceding expression.\r\n\r\n    a| b\t    Matches either a or b.\r\n\r\n    (re)\t    Groups regular expressions and remembers matched text.\r\n\r\n    (?imx)\t    Temporarily toggles on i, m, or x options within a regular\r\n            expression. If in parentheses, only that area is affected.\r\n\r\n    (?-imx)\t    Temporarily toggles off i, m, or x options within a regular\r\n            expression. If in parentheses, only that area is affected.\r\n\r\n    (?: re)\t    Groups regular expressions without remembering matched text.\r\n\r\n    (?imx: re)\tTemporarily toggles on i, m, or x options within parentheses.\r\n\r\n    (?-imx: re)\tTemporarily toggles off i, m, or x options within parentheses.\r\n\r\n    (?#...)\t    Comment.\r\n\r\n    (?= re)\t    Specifies position using a pattern. Doesn&#39;t have a range.\r\n\r\n    (?! re)\t    Specifies position using pattern negation. Doesn&#39;t have a range.\r\n\r\n    (?&gt; re)\t    Matches independent pattern without backtracking.\r\n\r\n    \\w\t        Matches word characters.\r\n\r\n    \\W\t        Matches nonword characters.\r\n\r\n    \\s\t        Matches whitespace. Equivalent to [\\t\\n\\r\\f].\r\n\r\n    \\S\t        Matches nonwhitespace.\r\n\r\n    \\d\t        Matches digits. Equivalent to [0-9].\r\n\r\n    \\D\t        Matches nondigits.\r\n\r\n    \\A\t        Matches beginning of string.\r\n\r\n    \\Z\t        Matches end of string. If a newline exists, it matches just before newline.\r\n\r\n    \\z\t        Matches end of string.\r\n\r\n    \\G\t        Matches point where last match finished.\r\n\r\n    \\b\t        Matches word boundaries when outside brackets.\r\n                Matches backspace (0x08) when inside brackets.\r\n\r\n    \\B\t        Matches nonword boundaries.\r\n\r\n    \\n, \\t, etc.\tMatches newlines, carriage returns, tabs, etc.\r\n\r\n    \\1...\\9\t        Matches nth grouped subexpression.\r\n\r\n    \\10\t            Matches nth grouped subexpression if it matched already.\r\n                     Otherwise refers to the octal representation of a character code.</pre>\r\n\r\n<h4>Regular-expression Examples</h4>\r\n\r\n<h4>Literal characters</h4>\r\n\r\n<pre>\r\nExample\t        Description\r\npython\t        Match &quot;python&quot;.</pre>\r\n\r\n<h4>Character classes</h4>\r\n\r\n<pre>\r\n    Example\t        Description\r\n\r\n    [Pp]ython\t    Match &quot;Python&quot; or &quot;python&quot;\r\n\r\n    rub[ye]\t        Match &quot;ruby&quot; or &quot;rube&quot;\r\n\r\n    [aeiou]\t        Match any one lowercase vowel\r\n\r\n    [0-9]\t        Match any digit; same as [0123456789]\r\n\r\n    [a-z]\t        Match any lowercase ASCII letter\r\n\r\n    [A-Z]\t        Match any uppercase ASCII letter\r\n\r\n    [a-zA-Z0-9]\t    Match any of the above\r\n\r\n    [^aeiou]\t    Match anything other than a lowercase vowel\r\n\r\n    [^0-9]\t        Match anything other than a digit</pre>\r\n\r\n<h4>Special Character Classes</h4>\r\n\r\n<pre>\r\n    Example\t        Description\r\n\r\n    .\t            Match any character except newline\r\n\r\n    \\d\t            Match a digit: [0-9]\r\n\r\n    \\D\t            Match a nondigit: [^0-9]\r\n\r\n    \\s\t            Match a whitespace character: [ \\t\\r\\n\\f]\r\n\r\n    \\S\t            Match nonwhitespace: [^ \\t\\r\\n\\f]\r\n\r\n    \\w\t            Match a single word character: [A-Za-z0-9_]\r\n\r\n    \\W\t            Match a nonword character: [^A-Za-z0-9_]</pre>\r\n\r\n<h4>Repetition Cases</h4>\r\n\r\n<pre>\r\n    Example\t    Description\r\n\r\n    ruby?\t    Match &quot;rub&quot; or &quot;ruby&quot;: the y is optional\r\n\r\n    ruby*\t    Match &quot;rub&quot; plus 0 or more ys\r\n\r\n    ruby+\t    Match &quot;rub&quot; plus 1 or more ys\r\n\r\n    \\d{3}\t    Match exactly 3 digits\r\n\r\n    \\d{3,}\t    Match 3 or more digits\r\n\r\n    \\d{3,5}\t    Match 3, 4, or 5 digits</pre>\r\n\r\n<h4>Nongreedy repetition</h4>\r\n\r\n<p>This matches the smallest number of repetitions:</p>\r\n\r\n<pre>\r\n    Example\t    Description\r\n\r\n    &lt;.*&gt;\t    Greedy repetition: matches &quot;perl&gt;&quot;\r\n\r\n    &lt;.*?&gt;\t    Nongreedy: matches &quot;&quot; in &quot;perl&gt;&quot;\r\n    </pre>\r\n\r\n<h4>Grouping with parentheses</h4>\r\n\r\n<pre>\r\n    Example\t    Description\r\n\r\n    \\D\\d+\t    No group: + repeats \\d\r\n\r\n    (\\D\\d)+\t    Grouped: + repeats \\D\\d pair\r\n\r\n    ([Pp]ython(, )?)+\tMatch &quot;Python&quot;, &quot;Python, python, python&quot;, etc.</pre>\r\n\r\n<h4>Backreferences</h4>\r\n\r\n<p>This matches a previously matched group again:</p>\r\n\r\n<pre>\r\n    Example\t                Description\r\n\r\n    ([Pp])ython&amp;\\1ails\t    Match python&amp;pails or Python&amp;Pails\r\n\r\n    ([&#39;&quot;])[^\\1]*\\1\t        Single or double-quoted string. \\1 matches whatever the 1st group matched .\r\n                            \\2 matches whatever the 2nd group matched, etc.\r\n    </pre>\r\n\r\n<h4>Alternatives</h4>\r\n\r\n<pre>\r\n    Example\t        Description\r\n\r\n    python|perl\t    Match &quot;python&quot; or &quot;perl&quot;\r\n\r\n    rub(y|le))  \tMatch &quot;ruby&quot; or &quot;ruble&quot;\r\n\r\n    Python(!+|\\?)\t&quot;Python&quot; followed by one or more ! or one ?</pre>\r\n\r\n<h4>Anchors</h4>\r\n\r\n<p>This needs to specify match position.</p>\r\n\r\n<pre>\r\n    Example\t    Description\r\n\r\n    ^Python\t    Match &quot;Python&quot; at the start of a string or internal line\r\n\r\n    Python$\t    Match &quot;Python&quot; at the end of a string or line\r\n\r\n    \\APython\tMatch &quot;Python&quot; at the start of a string\r\n\r\n    Python\\Z\tMatch &quot;Python&quot; at the end of a string\r\n\r\n    \\bPython\\b\tMatch &quot;Python&quot; at a word boundary\r\n\r\n    \\brub\\B\t    \\B is nonword boundary: match &quot;rub&quot; in &quot;rube&quot; and &quot;ruby&quot; but not alone\r\n\r\n    Python(?=!)\tMatch &quot;Python&quot;, if followed by an exclamation point\r\n\r\n    Python(?!!)\tMatch &quot;Python&quot;, if not followed by an exclamation point\r\n    </pre>\r\n\r\n<h4>Special syntax with parentheses</h4>\r\n\r\n<pre>\r\n    Example\t        Description\r\n\r\n    R(?#comment)\tMatches &quot;R&quot;. All the rest is a comment\r\n\r\n    R(?i)uby\t    Case-insensitive while matching &quot;uby&quot;\r\n\r\n    R(?i:uby)\t    Same as above\r\n\r\n    rub(?:y|le))\tGroup only without creating \\1 backreference</pre>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:13:09.269401", "intro_text": "Regular Expression (RegEx) is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern.", "lesson_id": 18, "resource_uri": "/lessonapi/Lesson/18/", "title": "Regex"}, {"body": "<p>Python provides two levels of access to network services. At a low level, you can access the basic socket support in the underlying operating system, which allows you to implement clients and servers for both connection-oriented and connection-less protocols. Python also has libraries that provide higher-level access to specific application-level network protocols, such as FTP, HTTP, and so on. This tutorial gives you understanding on most famous concept in Networking - Socket Programming What is Sockets? Sockets are the endpoints of a bidirectional communications channel. Sockets may communicate within a process, between processes on the same machine, or between processes on different continents. Sockets may be implemented over a number of different channel types: Unix domain sockets, TCP, UDP, and so on. The socket library provides specific classes for handling the common transports as well as a generic interface for handling the rest. Sockets have their own vocabulary:</p>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center\"><span style=\"color:#ffffff\">Term</span></th>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:50%\"><span style=\"color:#3498db\">Domain</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">The family of protocols that will be used as the transport mechanism. These values are constants such as AF_INET, PF_INET, PF_UNIX, PF_X25, and so on.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:50%\"><span style=\"color:#3498db\">Type</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">The type of communications between the two endpoints, typically SOCK_STREAM for connection-oriented protocols and SOCK_DGRAM for connectionless protocols.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:50%\"><span style=\"color:#3498db\">Protocol</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">Typically zero, this may be used to identify a variant of a protocol within a domain and type.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:50%\"><span style=\"color:#3498db\">Hostname</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">The identifier of a network interface:</span>\r\n\t\t\t<ul>\r\n\t\t\t\t<li><span style=\"color:#3498db\">A string, which can be a host name, a dotted-quad address, or an IPV6 address in colon (and possibly dot) notation</span></li>\r\n\t\t\t\t<li><span style=\"color:#3498db\">A string &quot;&quot;, which specifies an INADDR_BROADCAST address.</span></li>\r\n\t\t\t\t<li><span style=\"color:#3498db\">A zero-length string, which specifies INADDR_ANY, or&nbsp;</span></li>\r\n\t\t\t\t<li><span style=\"color:#3498db\">An Integer, interpreted as a binary address in host byte order.</span></li>\r\n\t\t\t</ul>\r\n\t\t\t<br />\r\n\t\t\t&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:50%\"><span style=\"color:#3498db\">Port</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">Each server listens for clients calling on one or more ports. A port may be a Fixnum port number, a string containing a port number, or the name of a service.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<h4>The socket Module</h4>\r\n\r\n<p>To create a socket, you must use the socket.socket() function available in socket module, which has the general syntax: s = socket.socket (socket_family, socket_type, protocol=0) Here is the description of the parameters:</p>\r\n\r\n<ul>\r\n\t<li>socket_family: This is either AF_UNIX or AF_INET, as explained earlier.</li>\r\n\t<li>socket_type: This is either SOCK_STREAM or SOCK_DGRAM.</li>\r\n\t<li>protocol: This is usually left out, defaulting to 0.</li>\r\n</ul>\r\n\r\n<p>Once you have socket object, then you can use required functions to create your client or server program. Following is the list of functions required:</p>\r\n\r\n<h4>Server Socket Methods</h4>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center\"><span style=\"color:#ffffff\">Method</span></th>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:50%\"><span style=\"color:#3498db\">s.bind()</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">This method binds address (hostname, port number pair) to socket.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:50%\"><span style=\"color:#3498db\">s.listen()</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">This method sets up and start TCP listener.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:50%\"><span style=\"color:#3498db\">s.accept()</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">This passively accept TCP client connection, waiting until connection arrives (blocking).</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<h4>Client Socket Methods</h4>\r\n\r\n<div>\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center\"><span style=\"color:#ffffff\">Method</span></th>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:50%\"><span style=\"color:#3498db\">s.connect()</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:50%\"><span style=\"color:#3498db\">This method actively initiates TCP server connection.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h4>General Socket Methods</h4>\r\n\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center\"><span style=\"color:#ffffff\">Method</span></th>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">s.recv()</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">This method receives TCP message</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">s.send()</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">This method transmits TCP message</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">s.recvfrom()</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">This method receives UDP message</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">s.sendto()</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">This method transmits UDP message</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">s.close()</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">This method closes socket</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">s.gethostname()</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:50%\"><span style=\"color:#3498db\">Returns the host-name.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Where s = socket.socket() after importing the socket module with import socket</p>\r\n\r\n<h4>A Simple Server</h4>\r\n\r\n<p>To write Internet servers, we use the socketfunction available in socket module to create a socket object. A socket object is then used to call other functions to setup a socket server. Now call bind(hostname, port function to specify a port for your service on the given host. Next, call the accept method of the returned object. This method waits until a client connects to the port you specified, and then returns a connection object that represents the connection to that client.</p>\r\n\r\n<pre>\r\n    # This is server.py file\r\n\r\nimport socket               # Import socket module\r\n\r\ns = socket.socket()         # Create a socket object\r\nhost = socket.gethostname() # Get local machine name\r\nport = 12345                # Reserve a port for your service.\r\ns.bind((host, port))        # Bind to the port\r\n\r\ns.listen(5)                 # Now wait for client connection.\r\nwhile True:\r\n   c, addr = s.accept()     # Establish connection with client.\r\n   print &#39;Got connection from&#39;, addr\r\n   c.send(&#39;Thank you for connecting&#39;)\r\n   c.close()                # Close the connection</pre>\r\n\r\n<h4>A Simple Client</h4>\r\n\r\n<p>Now we will write a very simple client program which will open a connection to a given port 12345 and given host. This is very simple to create a socket client using Python&#39;s socketmodule function. The socket.connect(hosname, port ) opens a TCP connection to hostname on the port. Once you have a socket open, you can read from it like any IO object. When done, remember to close it, as you would close a file. The following code is a very simple client that connects to a given host and port, reads any available data from the socket, and then exits:</p>\r\n\r\n<pre>\r\n# This is client.py file\r\n\r\nimport socket               # Import socket module\r\n\r\ns = socket.socket()         # Create a socket object\r\nhost = socket.gethostname() # Get local machine name\r\nport = 12345                # Reserve a port for your service.\r\n\r\ns.connect((host, port))\r\nprint s.recv(1024)\r\ns.close                     # Close the socket when done</pre>\r\n\r\n<p>Now run this <code>server.py</code> in background and then run above client.py to see the result.</p>\r\n\r\n<pre>\r\n# Following would start a server in background.\r\n$ python server.py &amp;\r\n\r\n# Once server is started run client as follows:\r\n\r\n$ python client.py</pre>\r\n\r\n<p>This would produce following result:</p>\r\n\r\n<pre>\r\nGot connection from (&#39;127.0.0.1&#39;, 48437)\r\nThank you for connecting\r\nPython Internet modules</pre>\r\n\r\n<p>A list of some important modules which could be used in Python Network/Internet programming.</p>\r\n\r\n<div style=\"overflow-x:auto;\">\r\n<table style=\"width:100%\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center; width:24.918%\"><span style=\"color:#ffffff\">Protocol</span></th>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center; width:24.9795%\"><span style=\"color:#ffffff\">Common function</span></th>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center; width:25%\"><span style=\"color:#ffffff\">PORT number</span></th>\r\n\t\t\t<th style=\"background-color:#54acd2; text-align:center; width:25.041%\"><span style=\"color:#ffffff\">&nbsp;PYTHON MODULE</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:24.918%\"><span style=\"color:#3498db\">HTTP</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:24.9795%\"><span style=\"color:#3498db\">Web pages</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25%\"><span style=\"color:#3498db\">80</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25.041%\"><span style=\"color:#3498db\">httplib, urllib, xmlrpclib</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:24.918%\"><span style=\"color:#3498db\">NNTP</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:24.9795%\"><span style=\"color:#3498db\">Usenet news</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25%\"><span style=\"color:#3498db\">119</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25.041%\"><span style=\"color:#3498db\">nntplib</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:24.918%\"><span style=\"color:#3498db\">FTP</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:24.9795%\"><span style=\"color:#3498db\">File transfers</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25%\"><span style=\"color:#3498db\">20</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25.041%\"><span style=\"color:#3498db\">ftplib, urllib</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:24.918%\"><span style=\"color:#3498db\">SMTP</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:24.9795%\"><span style=\"color:#3498db\">Sending email</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25%\"><span style=\"color:#3498db\">25</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25.041%\"><span style=\"color:#3498db\">smtplib</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:24.918%\"><span style=\"color:#3498db\">POP3</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:24.9795%\"><span style=\"color:#3498db\">Fetching email</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25%\"><span style=\"color:#3498db\">110</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25.041%\"><span style=\"color:#3498db\">poplib</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:24.918%\"><span style=\"color:#3498db\">IMAP4</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:24.9795%\"><span style=\"color:#3498db\">Fetching email</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25%\"><span style=\"color:#3498db\">143</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25.041%\"><span style=\"color:#3498db\">imaplib</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:24.918%\"><span style=\"color:#3498db\">Telnet</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:24.9795%\"><span style=\"color:#3498db\">Command lines</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25%\"><span style=\"color:#3498db\">23</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25.041%\"><span style=\"color:#3498db\">telnetlib</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"background-color:#d1d5d8; text-align:center; width:24.918%\"><span style=\"color:#3498db\">Gopher</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:24.9795%\"><span style=\"color:#3498db\">Document transfers</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25%\"><span style=\"color:#3498db\">70</span></td>\r\n\t\t\t<td style=\"background-color:#d1d5d8; width:25.041%\"><span style=\"color:#3498db\">gopherlib, urllib</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Please check all the libraries mentioned above to work with FTP, SMTP, POP, and IMAP protocols.</p>\r\n\r\n<div>\r\n<h5>Tip</h5>\r\nThis is a tip of the iceberg when it comes to Python networking, so do some more reading on the following:\r\n\r\n<ul>\r\n\t<li>Unix Socket Programming.</li>\r\n\t<li>Python Socket Library and Modules</li>\r\n</ul>\r\n</div>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:14:44.700323", "intro_text": "Python provides two levels of access to network services. At a low level, you can access the basic socket support in the underlying operating system, which allows you to implement clients and servers for both connection-oriented and connection-less protocols.", "lesson_id": 19, "resource_uri": "/lessonapi/Lesson/19/", "title": "Networking"}, {"body": "<p>Running several threads is similar to running several different programs concurrently, but with the following benefits:</p>\r\n\r\n<ul>\r\n\t<li>Multiple threads within a process share the same data space with the main thread and can therefore share information or communicate with each other more easily than if they were separate processes.</li>\r\n\t<li>Threads sometimes called light-weight processes and they do not require much memory overhead; they care cheaper than processes.</li>\r\n</ul>\r\n\r\n<p>A thread has a beginning, an execution sequence, and a conclusion. It has an instruction pointer that keeps track of where within its context it is currently running.</p>\r\n\r\n<ul>\r\n\t<li>It can be pre-emptied (interrupted)</li>\r\n\t<li>It can temporarily be put on hold (also known as sleeping) while other threads are running - this is called yielding.</li>\r\n</ul>\r\n\r\n<h4>Starting a New Thread</h4>\r\n\r\n<p>To spawn another thread, you need to call following method available in thread module: thread.start_new_thread ( function, args[, kwargs] ) This method call enables a fast and efficient way to create new threads in both Linux and Windows. The method call returns immediately and the child thread starts and calls function with the passed list of agrs. When function returns, the thread terminates. Here, args is a tuple of arguments; use an empty tuple to call function without passing any arguments. kwargs is an optional dictionary of keyword arguments. Example:</p>\r\n\r\n<pre>\r\nimport thread\r\nimport time\r\n\r\n# Define a function for the thread\r\ndef print_time( threadName, delay):\r\n   count = 0\r\n   while count &lt; 5:\r\n      time.sleep(delay)\r\n      count += 1\r\n      print &quot;%s: %s&quot; % ( threadName, time.ctime(time.time()) )\r\n\r\n# Create two threads as follows\r\ntry:\r\n   thread.start_new_thread( print_time, (&quot;Thread-1&quot;, 2, ) )\r\n   thread.start_new_thread( print_time, (&quot;Thread-2&quot;, 4, ) )\r\nexcept:\r\n   print &quot;Error: unable to start thread&quot;\r\n\r\nwhile 1:\r\n   pass\r\n    </pre>\r\n\r\n<p>When the above code is executed, it produces the following result:</p>\r\n\r\n<pre>\r\nThread-1: Thu Jan 22 15:42:17 2009\r\nThread-1: Thu Jan 22 15:42:19 2009\r\nThread-2: Thu Jan 22 15:42:19 2009\r\nThread-1: Thu Jan 22 15:42:21 2009\r\nThread-2: Thu Jan 22 15:42:23 2009\r\nThread-1: Thu Jan 22 15:42:23 2009\r\nThread-1: Thu Jan 22 15:42:25 2009\r\nThread-2: Thu Jan 22 15:42:27 2009\r\nThread-2: Thu Jan 22 15:42:31 2009\r\nThread-2: Thu Jan 22 15:42:35 2009</pre>\r\n\r\n<p>Although it is very effective for low-level threading, but the thread module is very limited compared to the newer threading module.</p>\r\n\r\n<h4>The Threading Module</h4>\r\n\r\n<p>The newer threading module included with Python 2.4 provides much more powerful, high-level support for threads than the thread module discussed in the previous section. The threading module exposes all the methods of the thread module and provides some additional methods:</p>\r\n\r\n<ul>\r\n\t<li>threading.activeCount(): Returns the number of thread objects that are active.</li>\r\n\t<li>threading.currentThread(): Returns the number of thread objects in the caller&#39;s thread control.</li>\r\n\t<li>threading.enumerate(): Returns a list of all thread objects that are currently active.</li>\r\n</ul>\r\n\r\n<p>In addition to the methods, the threading module has the Thread class that implements threading. The methods provided by the Threadclass are as follows:</p>\r\n\r\n<ul>\r\n\t<li>run(): The run() method is the entry point for a thread.</li>\r\n\t<li>start(): The start() method starts a thread by calling the run method.</li>\r\n\t<li>join([time]): The join() waits for threads to terminate.</li>\r\n\t<li>isAlive(): The isAlive() method checks whether a thread is still executing.</li>\r\n\t<li>getName(): The getName() method returns the name of a thread.</li>\r\n\t<li>setName(): The setName() method sets the name of a thread.</li>\r\n</ul>\r\n\r\n<h4>Creating Thread using Threading Module</h4>\r\n\r\n<p>To implement a new thread using the threading module, you have to do the following:</p>\r\n\r\n<ul>\r\n\t<li>Define a new subclass of the Thread class.</li>\r\n\t<li>Override the __init__(self [,args]) method to add additional arguments.</li>\r\n\t<li>xThen, override the run(self [,args]) method to implement what the thread should do when started.</li>\r\n</ul>\r\n\r\n<p>Once you have created the new Threadsubclass, you can create an instance of it and then start a new thread by invoking the start(), which will in turn call run() method. Example:</p>\r\n\r\n<pre>\r\nimport threading\r\nimport time\r\n\r\nexitFlag = 0\r\n\r\nclass myThread (threading.Thread):\r\n    def __init__(self, threadID, name, counter):\r\n        threading.Thread.__init__(self)\r\n        self.threadID = threadID\r\n        self.name = name\r\n        self.counter = counter\r\n    def run(self):\r\n        print &quot;Starting &quot; + self.name\r\n        print_time(self.name, self.counter, 5)\r\n        print &quot;Exiting &quot; + self.name\r\n\r\ndef print_time(threadName, delay, counter):\r\n    while counter:\r\n        if exitFlag:\r\n            thread.exit()\r\n        time.sleep(delay)\r\n        print &quot;%s: %s&quot; % (threadName, time.ctime(time.time()))\r\n        counter -= 1\r\n\r\n# Create new threads\r\nthread1 = myThread(1, &quot;Thread-1&quot;, 1)\r\nthread2 = myThread(2, &quot;Thread-2&quot;, 2)\r\n\r\n# Start new Threads\r\nthread1.start()\r\nthread2.start()\r\n\r\nprint &quot;Exiting Main Thread&quot;\r\nWhen the above code is executed, it produces the following result:\r\nStarting Thread-1\r\nStarting Thread-2\r\nExiting Main Thread\r\nThread-1: Thu Mar 21 09:10:03 2013\r\nThread-1: Thu Mar 21 09:10:04 2013\r\nThread-2: Thu Mar 21 09:10:04 2013\r\nThread-1: Thu Mar 21 09:10:05 2013\r\nThread-1: Thu Mar 21 09:10:06 2013\r\nThread-2: Thu Mar 21 09:10:06 2013\r\nThread-1: Thu Mar 21 09:10:07 2013\r\nExiting Thread-1\r\nThread-2: Thu Mar 21 09:10:08 2013\r\nThread-2: Thu Mar 21 09:10:10 2013\r\nThread-2: Thu Mar 21 09:10:12 2013\r\nExiting Thread-2\r\n    </pre>\r\n\r\n<h4>Synchronizing Threads</h4>\r\n\r\n<p>The threading module provided with Python includes a simple-to-implement locking mechanism that will allow you to synchronize threads. A new lock is created by calling the Lock() method, which returns the new lock. The acquire(blocking) method of the new lock object would be used to force threads to run synchronously. The optional blocking parameter enables you to control whether the thread will wait to acquire the lock. If blocking is set to 0, the thread will return immediately with a 0 value if the lock cannot be acquired and with a 1 if the lock was acquired. If blocking is set to 1, the thread will block and wait for the lock to be released. The release() method of the the new lock object would be used to release the lock when it is no longer required. Example:</p>\r\n\r\n<pre>\r\nimport threading\r\nimport time\r\n\r\nclass myThread (threading.Thread):\r\n    def __init__(self, threadID, name, counter):\r\n        threading.Thread.__init__(self)\r\n        self.threadID = threadID\r\n        self.name = name\r\n        self.counter = counter\r\n    def run(self):\r\n        print &quot;Starting &quot; + self.name\r\n        # Get lock to synchronize threads\r\n        threadLock.acquire()\r\n        print_time(self.name, self.counter, 3)\r\n        # Free lock to release next thread\r\n        threadLock.release()\r\n\r\ndef print_time(threadName, delay, counter):\r\n    while counter:\r\n        time.sleep(delay)\r\n        print &quot;%s: %s&quot; % (threadName, time.ctime(time.time()))\r\n        counter -= 1\r\n\r\nthreadLock = threading.Lock()\r\nthreads = []\r\n\r\n# Create new threads\r\nthread1 = myThread(1, &quot;Thread-1&quot;, 1)\r\nthread2 = myThread(2, &quot;Thread-2&quot;, 2)\r\n\r\n# Start new Threads\r\nthread1.start()\r\nthread2.start()\r\n\r\n# Add threads to thread list\r\nthreads.append(thread1)\r\nthreads.append(thread2)\r\n\r\n# Wait for all threads to complete\r\nfor t in threads:\r\n    t.join()\r\nprint &quot;Exiting Main Thread&quot;\r\nWhen the above code is executed, it produces the following result:\r\nStarting Thread-1\r\nStarting Thread-2\r\nThread-1: Thu Mar 21 09:11:28 2013\r\nThread-1: Thu Mar 21 09:11:29 2013\r\nThread-1: Thu Mar 21 09:11:30 2013\r\nThread-2: Thu Mar 21 09:11:32 2013\r\nThread-2: Thu Mar 21 09:11:34 2013\r\nThread-2: Thu Mar 21 09:11:36 2013\r\nExiting Main Thread</pre>\r\n\r\n<h4>Multithreaded Priority Queue</h4>\r\n\r\n<p>The Queue module allows you to create a new queue object that can hold a specific number of items. There are following methods to control the Queue:</p>\r\n\r\n<ul>\r\n\t<li>get(): The get() removes and returns an item from the queue.</li>\r\n\t<li>put(): The put adds item to a queue.</li>\r\n\t<li>qsize() : The qsize() returns the number of items that are currently in the queue.</li>\r\n\t<li>empty(): The empty( ) returns True if queue is empty; otherwise, False.</li>\r\n\t<li>full(): the full() returns True if queue is full; otherwise, False.</li>\r\n</ul>\r\n\r\n<p>Example:</p>\r\n\r\n<pre>\r\nimport Queue\r\nimport threading\r\nimport time\r\n\r\nexitFlag = 0\r\n\r\nclass myThread (threading.Thread):\r\n    def __init__(self, threadID, name, q):\r\n        threading.Thread.__init__(self)\r\n        self.threadID = threadID\r\n        self.name = name\r\n        self.q = q\r\n    def run(self):\r\n        print &quot;Starting &quot; + self.name\r\n        process_data(self.name, self.q)\r\n        print &quot;Exiting &quot; + self.name\r\n\r\ndef process_data(threadName, q):\r\n    while not exitFlag:\r\n        queueLock.acquire()\r\n        if not workQueue.empty():\r\n            data = q.get()\r\n            queueLock.release()\r\n            print &quot;%s processing %s&quot; % (threadName, data)\r\n        else:\r\n            queueLock.release()\r\n        time.sleep(1)\r\n\r\nthreadList = [&quot;Thread-1&quot;, &quot;Thread-2&quot;, &quot;Thread-3&quot;]\r\nnameList = [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;, &quot;Five&quot;]\r\nqueueLock = threading.Lock()\r\nworkQueue = Queue.Queue(10)\r\nthreads = []\r\nthreadID = 1\r\n\r\n# Create new threads\r\nfor tName in threadList:\r\n    thread = myThread(threadID, tName, workQueue)\r\n    thread.start()\r\n    threads.append(thread)\r\n    threadID += 1\r\n\r\n# Fill the queue\r\nqueueLock.acquire()\r\nfor word in nameList:\r\n    workQueue.put(word)\r\nqueueLock.release()\r\n\r\n# Wait for queue to empty\r\nwhile not workQueue.empty():\r\n    pass\r\n\r\n# Notify threads it&#39;s time to exit\r\nexitFlag = 1\r\n\r\n# Wait for all threads to complete\r\nfor t in threads:\r\n    t.join()\r\nprint &quot;Exiting Main Thread&quot;\r\nWhen the above code is executed, it produces the following result:\r\nStarting Thread-1\r\nStarting Thread-2\r\nStarting Thread-3\r\nThread-1 processing One\r\nThread-2 processing Two\r\nThread-3 processing Three\r\nThread-1 processing Four\r\nThread-2 processing Five\r\nExiting Thread-3\r\nExiting Thread-1\r\nExiting Thread-2\r\nExiting Main Thread</pre>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:17:19.156415", "intro_text": "A way of running several different programs with benefits of speeding progress and thereby reducing computational time.", "lesson_id": 20, "resource_uri": "/lessonapi/Lesson/20/", "title": "Multithreading"}, {"body": "<p>Simple Mail Transfer Protocol (SMTP) is a protocol, which handles sending e-mail and routing e-mail between mail servers. Python provides smtplib module, which defines an SMTP client session object that can be used to send mail to any Internet machine with an SMTP or ESMTP listener daemon. Here is a simple syntax to create one SMTP object, which can later be used to send an e-mail:</p>\r\n\r\n<pre>\r\nimport smtplib\r\nsmtpObj = smtplib.SMTP( [host [, port [, local_hostname]]] )</pre>\r\n\r\n<p>Here is the detail of the parameters:</p>\r\n\r\n<ul>\r\n\t<li>host: This is the host running your SMTP server. You can specifiy IP address of the host or a domain name like tutorialspoint.com. This is optional argument.</li>\r\n\t<li>port: If you are providing host argument, then you need to specify a port, where SMTP server is listening. Usually this port would be 25.</li>\r\n\t<li>local_hostname: If your SMTP server is running on your local machine, then you can specify just localhost as of this option.</li>\r\n</ul>\r\n\r\n<p>An SMTP object has an instance method called sendmail, which will typically be used to do the work of mailing a message. It takes three parameters:</p>\r\n\r\n<ul>\r\n\t<li>The sender - A string with the address of the sender.</li>\r\n\t<li>The receivers - A list of strings, one for each recipient.</li>\r\n\t<li>The message - A message as a string formatted as specified in the various RFCs.</li>\r\n</ul>\r\n\r\n<p>Example: Here is a simple way to send one e-mail using Python script. Try it once:</p>\r\n\r\n<pre>\r\nimport smtplib\r\n\r\nsender = &#39;from@fromdomain.com&#39;\r\nreceivers = [&#39;to@todomain.com&#39;]\r\n\r\nmessage = &quot;&quot;&quot;From: From Person \r\nTo: To Person \r\nSubject: SMTP e-mail test\r\n\r\nThis is a test e-mail message.\r\n&quot;&quot;&quot;\r\n\r\ntry:\r\n   smtpObj = smtplib.SMTP(&#39;localhost&#39;)\r\n   smtpObj.sendmail(sender, receivers, message)\r\n   print &quot;Successfully sent email&quot;\r\nexcept SMTPException:\r\n   print &quot;Error: unable to send email&quot;</pre>\r\n\r\n<p>Here, you have placed a basic e-mail in message, using a triple quote, taking care to format the headers correctly. An e-mail requires a From, To, and Subject header, separated from the body of the e-mail with a blank line. To send the mail you use smtpObj to connect to the SMTP server on the local machine and then use the sendmail method along with the message, the from address, and the destination address as parameters (even though the from and to addresses are within the e-mail itself, these aren&#39;t always used to route mail). If you&#39;re not running an SMTP server on your local machine, you can use smtplib client to communicate with a remote SMTP server. Unless you&#39;re using a webmail service (such as Hotmail or Yahoo! Mail), your e-mail provider will have provided you with outgoing mail server details that you can supply them, as follows: smtplib.SMTP(&#39;mail.your-domain.com&#39;, 25)</p>\r\n\r\n<h4>Sending an HTML e-mail using Python</h4>\r\n\r\n<p>When you send a text message using Python, then all the content will be treated as simple text. Even if you will include HTML tags in a text message, it will be displayed as simple text and HTML tags will not be formatted according to HTML syntax. But Python provides option to send an HTML message as actual HTML message. While sending an e-mail message, you can specify a Mime version, content type and character set to send an HTML e-mail. Example: Following is the example to send HTML content as an e-mail. Try it once:</p>\r\n\r\n<pre>\r\nimport smtplib\r\n\r\nmessage = &quot;&quot;&quot;From: From Person \r\nTo: To Person \r\nMIME-Version: 1.0\r\nContent-type: text/html\r\nSubject: SMTP HTML e-mail test\r\n\r\nThis is an e-mail message to be sent in HTML format\r\n\r\n<strong>This is HTML message.</strong>\r\n</pre>\r\n\r\n<h4>This is headline.</h4>\r\n\r\n<p>&quot;&quot;&quot; try: smtpObj = smtplib.SMTP(&#39;localhost&#39;) smtpObj.sendmail(sender, receivers, message) print &quot;Successfully sent email&quot; except SMTPException: print &quot;Error: unable to send email&quot;</p>\r\n\r\n<h4>Sending Attachments as an e-mail</h4>\r\n\r\n<p>To send an e-mail with mixed content requires to set Content-type header to multipart/mixed. Then, text and attachment sections can be specified within boundaries. A boundary is started with two hyphens followed by a unique number, which can not appear in the message part of the e-mail. A final boundary denoting the e-mail&#39;s final section must also end with two hyphens. Attached files should be encoded with the pack(&quot;m&quot;) function to have base64 encoding before transmission. Example: Following is the example, which will send a file /tmp/test.txt as an attachment. Try it once:</p>\r\n\r\n<pre>\r\nimport smtplib\r\nimport base64\r\n\r\nfilename = &quot;/tmp/test.txt&quot;\r\n\r\n# Read a file and encode it into base64 format\r\nfo = open(filename, &quot;rb&quot;)\r\nfilecontent = fo.read()\r\nencodedcontent = base64.b64encode(filecontent)  # base64\r\n\r\nsender = &#39;webmaster@tutorialpoint.com&#39;\r\nreciever = &#39;amrood.admin@gmail.com&#39;\r\n\r\nmarker = &quot;AUNIQUEMARKER&quot;\r\n\r\nbody =&quot;&quot;&quot;\r\nThis is a test email to send an attachement.\r\n&quot;&quot;&quot;\r\n# Define the main headers.\r\npart1 = &quot;&quot;&quot;From: From Person \r\nTo: To Person \r\nSubject: Sending Attachement\r\nMIME-Version: 1.0\r\nContent-Type: multipart/mixed; boundary=%s\r\n--%s\r\n&quot;&quot;&quot; % (marker, marker)\r\n\r\n# Define the message action\r\npart2 = &quot;&quot;&quot;Content-Type: text/plain\r\nContent-Transfer-Encoding:8bit\r\n\r\n%s\r\n--%s\r\n&quot;&quot;&quot; % (body,marker)\r\n\r\n# Define the attachment section\r\npart3 = &quot;&quot;&quot;Content-Type: multipart/mixed; name=\\&quot;%s\\&quot;\r\nContent-Transfer-Encoding:base64\r\nContent-Disposition: attachment; filename=%s\r\n\r\n%s\r\n--%s--\r\n&quot;&quot;&quot; %(filename, filename, encodedcontent, marker)\r\nmessage = part1 + part2 + part3\r\n\r\ntry:\r\n   smtpObj = smtplib.SMTP(&#39;localhost&#39;)\r\n   smtpObj.sendmail(sender, reciever, message)\r\n   print &quot;Successfully sent email&quot;\r\nexcept Exception:\r\n   print &quot;Error: unable to send email&quot;</pre>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:18:57.749392", "intro_text": "Python provides smtplib module, which defines an SMTP client session object that can be used to send mail to any Internet machine with an SMTP or ESMTP listener daemon.", "lesson_id": 21, "resource_uri": "/lessonapi/Lesson/21/", "title": "Emails"}, {"body": "<p>&nbsp;</p>\r\n\r\n<h4>&nbsp;</h4>\r\n\r\n<h4>What is CGI?</h4>\r\n\r\n<ul>\r\n\t<li>The Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script.</li>\r\n\t<li>The CGI specs are currently maintained by the NCSA and NCSA defines CGI is as follows:</li>\r\n\t<li>The Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.</li>\r\n\t<li>The current version is CGI/1.1 and CGI/1.2 is under progress.</li>\r\n</ul>\r\n\r\n<h4>Web Browsing</h4>\r\n\r\n<p>To understand the concept of CGI, lets see what happens when we click a hyper link to browse a particular web page or URL.</p>\r\n\r\n<ul>\r\n\t<li>Your browser contacts the HTTP web server and demands for the URL i.e., filename.</li>\r\n\t<li>Web Server will parse the URL and will look for the filename in if it finds that file then sends it back to the browser, otherwise sends an error message indicating that you have requested a wrong file.</li>\r\n\t<li>Web browser takes response from web server and displays either the received file or error message.</li>\r\n\t<li>However, it is possible to set up the HTTP server so that whenever a file in a certain directory is requested that file is not sent back; instead it is executed as a program, and whatever that program outputs is sent back for your browser to display. This function is called the Common Gateway Interface or CGI and the programs are called CGI scripts. These CGI programs can be a Python Script, PERL Script, Shell Script, C or C++ program, etc.</li>\r\n</ul>\r\n\r\n<h4>Web Server Support &amp; Configuration</h4>\r\n\r\n<p>Before you proceed with CGI Programming, make sure that your Web Server supports CGI and it is configured to handle CGI Programs. All the CGI Programs to be executed by the HTTP server are kept in a pre-configured directory. This directory is called CGI Directory and by convention it is named as /var/www/cgi-bin. By convention, CGI files will have extension as .cgi, but you can keep your files with python extension .py as well. By default, the Linux server is configured to run only the scripts in the cgi-bin directory in /var/www. If you want to specify any other directory to run your CGI scripts, comment the following lines in the httpd.conf file:</p>\r\n\r\n<pre>\r\n    \r\n   AllowOverride None\r\n   Options ExecCGI\r\n   Order allow,deny\r\n   Allow from all\r\n    \r\n    \r\n    Options All\r\n    </pre>\r\n\r\n<p>Here, it is assumed that you have Web Server up and running successfully and you are able to run any other CGI program like Perl or Shell, etc.</p>\r\n\r\n<h4>First CGI Program</h4>\r\n\r\n<p>Here is a simple link, which is linked to a CGI script called hello.py. This file is being kept in /var/www/cgi-bin directory and it has following content. Before running your CGI program, make sure you have change mode of file using chmod 755 hello.py UNIX command to make file executable.</p>\r\n\r\n<pre>\r\nprint &quot;Content-type:text/html\\r\\n\\r\\n&quot;\r\nprint &#39;&#39;\r\nprint &#39;&#39;\r\nprint &#39;Hello Word - First CGI Program&#39;\r\nprint &#39;&#39;\r\nprint &#39;&#39;\r\nprint &#39;</pre>\r\n\r\n<h4>Hello Word! This is my first CGI program</h4>\r\n\r\n<p>&#39; print &#39;&#39; print &#39;&#39;</p>\r\n\r\n<p>If you click hello.py, then this produces the following output:</p>\r\n\r\n<pre>\r\nHello World! This is my first CGI program</pre>\r\n\r\n<p>This hello.py script is a simple Python script, which is writing its output on STDOUT file i.e., screen. There is one important and extra feature available which is first line to be printed Content-type:text/html\\r\\n\\r\\n. This line is sent back to the browser and specifiy the content type to be displayed on the browser screen. Now, you must have understood basic concept of CGI and you can write many complicated CGI programs using Python. This script can interact with any other external system also to exchange information such as RDBMS.</p>\r\n\r\n<h4>HTTP Header</h4>\r\n\r\n<p>The line <code>Content-type:text/html\\r\\n\\r\\n</code> is part of HTTP header which is sent to the browser to understand the content. All the HTTP header will be in the following form: <code>HTTP Field Name: Field Content</code> For Example <code>Content-type: text/html\\r\\n\\r\\n</code> There are few other important HTTP headers, which you will use frequently in your CGI Programming.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Header</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">Content-type:</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A MIME string defining the format of the file being returned. Example is Content-type:text/html</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">Expires: Date</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The date the information becomes invalid. This should be used by the browser to decide when a page needs to be refreshed. A valid date string should be in the format 01 Jan 1998 12:00:00 GMT.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">Location: URL</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The URL that should be returned instead of the URL requested. You can use this field to redirect a request to any file.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">Last-modified: Date</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The date of last modification of the resource.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">Content-length: N</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">Set-Cookie: String</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Set the cookie passed through the string</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<h4>CGI Environment Variables</h4>\r\n\r\n<p>All the CGI program will have access to the following environment variables. These variables play an important role while writing any CGI program.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Variable Name</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Description</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">CONTENT_TYPE</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The data type of the content. Used when the client is sending attached content to the server. For example, file upload, etc.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">CONTENT_LENGTH</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The length of the query information. It&#39;s available only for POST requests.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">HTTP_COOKIE </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Returns the set cookies in the form of key &amp; value pair.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">HTTP_USER_AGENT</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The User-Agent request-header field contains information about the user agent originating the request. Its name of the web browser.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">PATH_INFO </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The path for the CGI script.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">QUERY_STRING</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The URL-encoded information that is sent with GET method request.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">REMOTE_ADDR</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The IP address of the remote host making the request. This can be useful for logging or for authentication purpose.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">REMOTE_HOST</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The fully qualified name of the host making the request. If this information is not available then REMOTE_ADDR can be used to get IR address.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">REQUEST_METHOD</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The method used to make the request. The most common methods are GET and POST.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">SCRIPT_FILENAME </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The full path to the CGI script.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">SCRIPT_NAME</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The name of the CGI script.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">SERVER_NAME</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The server&#39;s hostname or IP Address</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">SERVER_SOFTWARE </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The name and version of the software the server is running.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Here is a small CGI program to list out all the CGI variables.</p>\r\n\r\n<pre>\r\nimport os\r\n\r\nprint &quot;Content-type: text/html\\r\\n\\r\\n&quot;;\r\nprint &quot;Environment&lt;\\br&gt;&quot;;\r\nfor param in os.environ.keys():\r\n  print &quot;<strong>%20s</strong>: %s&lt;\\br&gt;&quot; % (param, os.environ[param])\r\n    </pre>\r\n\r\n<h4>GET and POST Methods</h4>\r\n\r\n<p>You must have come across many situations when you need to pass some information from your browser to web server and ultimately to your CGI Program. Most frequently, browser uses two methods two pass this information to web server. These methods are GET Method and POST Method.</p>\r\n\r\n<h4>Passing Information using GET method</h4>\r\n\r\n<p>The GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? character as follows: http://www.test.com/cgi-bin/hello.py?key1=value1&amp;key2=value2 The GET method is the default method to pass information from browser to web server and it produces a long string that appears in your browser&#39;s Location:box.</p>\r\n\r\n<div>Tip Never use GET method if you have password or other sensitive information to pass to the server.</div>\r\n\r\n<p>The GET method has size limtation: only 1024 characters can be sent in a request string. The GET method sends information using QUERY_STRING header and will be accessible in your CGI Program through QUERY_STRING environment variable. You can pass information by simply concatenating key and value pairs along with any URL or you can use HTML &quot;FORM&quot; tags to pass information using GET method. Simple URL Example : Get Method Here is a simple URL, which will pass two values to hello_get.py program using GET method. /cgi-bin/hello_get.py?first_name=ZARA&amp;last_name=ALI Below is hello_get.py script to handle input given by web browser. We are going to use cgimodule, which makes it very easy to access passed information:</p>\r\n\r\n<pre>\r\n# Import modules for CGI handling\r\nimport cgi, cgitb\r\n\r\n# Create instance of FieldStorage\r\nform = cgi.FieldStorage()\r\n\r\n# Get data from fields\r\nfirst_name = form.getvalue(&#39;first_name&#39;)\r\nlast_name  = form.getvalue(&#39;last_name&#39;)\r\n\r\nprint &quot;Content-type:text/html\\r\\n\\r\\n&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;Hello - Second CGI Program&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;</pre>\r\n\r\n<h4>Hello %s %s</h4>\r\n\r\n<p>&quot; % (first_name, last_name) print &quot;&quot; print &quot;&quot;</p>\r\n\r\n<p>This would generate the following result:</p>\r\n\r\n<pre>\r\nHello ZARA ALI\r\n            </pre>\r\n\r\n<h4>Simple FORM Example: GET Method</h4>\r\n\r\n<p>Here is a simple example which passes two values using HTML FORM and submit button. We are going to use same CGI script <code>hello_get.py</code> to handle this input.</p>\r\n\r\n<p>First Name:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Last Name:</p>\r\n\r\n<h4>Passing Information using POST method</h4>\r\n\r\n<p>A generally more reliable method of passing information to a CGI program is the POST method. This packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes into the CGI script in the form of the standard input. Below is same hello_get.py script which handles GET as well as POST method.</p>\r\n\r\n<pre>\r\n# Import modules for CGI handling\r\nimport cgi, cgitb\r\n\r\n# Create instance of FieldStorage\r\nform = cgi.FieldStorage()\r\n\r\n# Get data from fields\r\nfirst_name = form.getvalue(&#39;first_name&#39;)\r\nlast_name  = form.getvalue(&#39;last_name&#39;)\r\n\r\nprint &quot;Content-type:text/html\\r\\n\\r\\n&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;Hello - Second CGI Program&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;</pre>\r\n\r\n<h4>Hello %s %s</h4>\r\n\r\n<p>&quot; % (first_name, last_name) print &quot;&quot; print &quot;&quot; Let us take again same example as above which passes two values using HTML FORM and submit button. We are going to use same CGI script hello_get.py to handle this input.</p>\r\n\r\n<p>First Name: Last Name:</p>\r\n\r\n<h4>Passing Checkbox Data to CGI Program</h4>\r\n\r\n<p>Checkboxes are used when more than one option is required to be selected. Here is example HTML code for a form with two checkboxes:</p>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p>Maths Physics</p>\r\n\r\n<p>Below is checkbox.cgi script to handle input given by web browser for checkbox button.</p>\r\n\r\n<pre>\r\n# Import modules for CGI handling\r\nimport cgi, cgitb\r\n\r\n# Create instance of FieldStorage\r\nform = cgi.FieldStorage()\r\n\r\n# Get data from fields\r\nif form.getvalue(&#39;maths&#39;):\r\n   math_flag = &quot;ON&quot;\r\nelse:\r\n   math_flag = &quot;OFF&quot;\r\n\r\nif form.getvalue(&#39;physics&#39;):\r\n   physics_flag = &quot;ON&quot;\r\nelse:\r\n   physics_flag = &quot;OFF&quot;\r\n\r\nprint &quot;Content-type:text/html\\r\\n\\r\\n&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;Checkbox - Third CGI Program&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;</pre>\r\n\r\n<h4>CheckBox Maths is : %s</h4>\r\n\r\n<p>&quot; % math_flag print &quot;</p>\r\n\r\n<h4>CheckBox Physics is : %s</h4>\r\n\r\n<p>&quot; % physics_flag print &quot;&quot; print &quot;&quot; Passing Radio Button Data to CGI Program Radio Buttons are used when only one option is required to be selected. Here is example HTML code for a form with two radio buttons:</p>\r\n\r\n<p>Maths Physics</p>\r\n\r\n<p>Below is radiobutton.py script to handle input given by web browser for radio button:</p>\r\n\r\n<pre>\r\n# Import modules for CGI handling\r\nimport cgi, cgitb\r\n\r\n# Create instance of FieldStorage\r\nform = cgi.FieldStorage()\r\n\r\n# Get data from fields\r\nif form.getvalue(&#39;subject&#39;):\r\n   subject = form.getvalue(&#39;subject&#39;)\r\nelse:\r\n   subject = &quot;Not set&quot;\r\n\r\nprint &quot;Content-type:text/html\\r\\n\\r\\n&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;Radio - Fourth CGI Program&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;</pre>\r\n\r\n<h4>Selected Subject is %s</h4>\r\n\r\n<p>&quot; % subject print &quot;&quot; print &quot;&quot; Passing Text Area Data to CGI Program TEXTAREA element is used when multiline text has to be passed to the CGI Program. Here is example HTML code for a form with a TEXTAREA box:</p>\r\n\r\n<p>Type your text here...&lt;br&gt;</p>\r\n\r\n<p>Below is <code>textarea.cgi</code> script to handle input given by web browser:</p>\r\n\r\n<pre>\r\n# Import modules for CGI handling\r\nimport cgi, cgitb\r\n\r\n# Create instance of FieldStorage\r\nform = cgi.FieldStorage()\r\n\r\n# Get data from fields\r\nif form.getvalue(&#39;textcontent&#39;):\r\n   text_content = form.getvalue(&#39;textcontent&#39;)\r\nelse:\r\n   text_content = &quot;Not entered&quot;\r\n\r\nprint &quot;Content-type:text/html\\r\\n\\r\\n&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;;\r\nprint &quot;Text Area - Fifth CGI Program&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;</pre>\r\n\r\n<h4>Entered Text Content is %s</h4>\r\n\r\n<p>&quot; % text_content print &quot;&quot; Passing Drop Down Box Data to CGI Program Drop Down Box is used when we have many options available but only one or two will be selected. Here is example HTML code for a form with one drop down box:</p>\r\n\r\n<p>MathsPhysics</p>\r\n\r\n<p>The result of this code is the following form: Below is <code>dropdown.py</code> script to handle input given by web browser.</p>\r\n\r\n<pre>\r\n# Import modules for CGI handling\r\nimport cgi, cgitb\r\n\r\n# Create instance of FieldStorage\r\nform = cgi.FieldStorage()\r\n\r\n# Get data from fields\r\nif form.getvalue(&#39;dropdown&#39;):\r\n   subject = form.getvalue(&#39;dropdown&#39;)\r\nelse:\r\n   subject = &quot;Not entered&quot;\r\n\r\nprint &quot;Content-type:text/html\\r\\n\\r\\n&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;Dropdown Box - Sixth CGI Program&quot;\r\nprint &quot;&quot;\r\nprint &quot;&quot;\r\nprint &quot;</pre>\r\n\r\n<h4>Selected Subject is %s</h4>\r\n\r\n<p>&quot; % subject print &quot;&quot; print &quot;&quot;</p>\r\n\r\n<h4>Using Cookies in CGI</h4>\r\n\r\n<p>HTTP protocol is a stateless protocol. But for a commercial website, it is required to maintain session information among different pages. For example, one user registration ends after completing many pages. But how to maintain user&#39;s session information across all the web pages. In many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.</p>\r\n\r\n<h4>How It Works?</h4>\r\n\r\n<p>Your server sends some data to the visitor&#39;s browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor&#39;s hard drive. Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. Once retrieved, your server knows/remembers what was stored. Cookies are a plain text data record of 5 variable-length fields:</p>\r\n\r\n<ul>\r\n\t<li>Expires : The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.</li>\r\n\t<li>Domain : The domain name of your site.</li>\r\n\t<li>Path : The path to the directory or web page that sets the cookie. This may be blank if you want to retrieve the cookie from any directory or page.</li>\r\n\t<li>Secure : If this field contains the word &quot;secure&quot;, then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.</li>\r\n\t<li>&nbsp;</li>\r\n\t<li>Name=Value : Cookies are set and retrieved in the form of key and value pairs.</li>\r\n</ul>\r\n\r\n<h4>Setting up Cookies</h4>\r\n\r\n<p>It is very easy to send cookies to browser. These cookies will be sent along with HTTP Header before to Content-type field. Assuming you want to set UserID and Password as cookies. So cookies setting will be done as follows:</p>\r\n\r\n<pre>\r\nprint &quot;Set-Cookie:UserID=XYZ;\\r\\n&quot;\r\nprint &quot;Set-Cookie:Password=XYZ123;\\r\\n&quot;\r\nprint &quot;Set-Cookie:Expires=Tuesday, 31-Dec-2007 23:12:40 GMT&quot;;\\r\\n&quot;\r\nprint &quot;Set-Cookie:Domain=www.tutorialspoint.com;\\r\\n&quot;\r\nprint &quot;Set-Cookie:Path=/perl;\\n&quot;\r\nprint &quot;Content-type:text/html\\r\\n\\r\\n&quot;\r\n...........Rest of the HTML Content....\r\n    </pre>\r\n\r\n<p>From this example, you must have understood how to set cookies. We use Set-Cookie HTTP header to set cookies. Here, it is optional to set cookies attributes like Expires, Domain and Path. It is notable that cookies are set before sending magic line &quot;Content-type:text/html\\r\\n\\r\\n.</p>\r\n\r\n<h4>Retrieving Cookies</h4>\r\n\r\n<p>It is very easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form: <code>key1=value1;key2=value2;key3=value3....</code> Here is an example of how to retrieve cookies.</p>\r\n\r\n<pre>\r\n# Import modules for CGI handling\r\nfrom os import environ\r\nimport cgi, cgitb\r\n\r\nif environ.has_key(&#39;HTTP_COOKIE&#39;):\r\n   for cookie in map(strip, split(environ[&#39;HTTP_COOKIE&#39;], &#39;;&#39;)):\r\n      (key, value ) = split(cookie, &#39;=&#39;);\r\n      if key == &quot;UserID&quot;:\r\n         user_id = value\r\n\r\n      if key == &quot;Password&quot;:\r\n         password = value\r\n\r\nprint &quot;User ID  = %s&quot; % user_id\r\nprint &quot;Password = %s&quot; % password\r\nThis will produce the following result for the cookies set by above script:\r\nUser ID = XYZ\r\nPassword = XYZ123\r\nFile Upload Example:\r\nTo upload a file, the HTML form must have the enctype attribute set to multipart/form-data. The input tag with the file type will create a &quot;Browse&quot; button.\r\n\r\n\r\n   </pre>\r\n\r\n<p>File:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Here is the script <code>save_file.py</code> to handle file upload:</p>\r\n\r\n<pre>\r\nimport cgi, os\r\nimport cgitb; cgitb.enable()\r\n\r\nform = cgi.FieldStorage()\r\n\r\n# Get filename here.\r\nfileitem = form[&#39;filename&#39;]\r\n\r\n# Test if the file was uploaded\r\nif fileitem.filename:\r\n   # strip leading path from file name to avoid\r\n   # directory traversal attacks\r\n   fn = os.path.basename(fileitem.filename)\r\n   open(&#39;/tmp/&#39; + fn, &#39;wb&#39;).write(fileitem.file.read())\r\n\r\n   message = &#39;The file &quot;&#39; + fn + &#39;&quot; was uploaded successfully&#39;\r\n\r\nelse:\r\n   message = &#39;No file was uploaded&#39;\r\n\r\nprint &quot;&quot;&quot;\\\r\nContent-Type: text/html\\n\r\n\r\n\r\n   </pre>\r\n\r\n<p>%s</p>\r\n\r\n<p>&quot;&quot;&quot; % (message,)</p>\r\n\r\n<p>If you are running above script on Unix/Linux, then you would have to take care of replacing file separator as follows, otherwise on your windows machine above open() statement should work fine. fn = os.path.basename(fileitem.filename.replace(&quot;\\\\&quot;, &quot;/&quot; ))</p>\r\n\r\n<h4>How To Raise a &quot;File Download&quot; Dialog Box ?</h4>\r\n\r\n<p>Sometimes, it is desired that you want to give option where a user will click a link and it will pop up a &quot;File Download&quot; dialogue box to the user instead of displaying actual content. This is very easy and will be achieved through HTTP header. This HTTP header will be different from the header mentioned in previous section. For example,if you want make a FileName file downloadable from a given link, then its syntax will be as follows:</p>\r\n\r\n<pre>\r\n# HTTP Header\r\nprint &quot;Content-Type:application/octet-stream; name=\\&quot;FileName\\&quot;\\r\\n&quot;;\r\nprint &quot;Content-Disposition: attachment; filename=\\&quot;FileName\\&quot;\\r\\n\\n&quot;;\r\n\r\n# Actual File Content will go hear.\r\nfo = open(&quot;foo.txt&quot;, &quot;rb&quot;)\r\n\r\nstr = fo.read();\r\nprint str\r\n\r\n# Close opened file\r\nfo.close()</pre>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:20:38.567016", "intro_text": "The Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.", "lesson_id": 22, "resource_uri": "/lessonapi/Lesson/22/", "title": "CGI"}, {"body": "<p>Python provides various options for developing graphical user interfaces (GUIs). Most important are listed below:</p>\r\n\r\n<ul>\r\n\t<li>Tkinter: Tkinter is the Python interface to the Tk GUI toolkit shipped with Python. We would look this option in this tutorial.</li>\r\n\t<li>wxPython: This is an open-source Python interface for wxWindows http://wxpython.org.</li>\r\n\t<li>JPython: JPython is a Python port for Java which gives Python scripts seamless access to Java class libraries on the local machine http://www.jython.org.</li>\r\n</ul>\r\n\r\n<h4>Python GUI Programming (Tkinter)</h4>\r\n\r\n<p>There are many other interfaces available which I&#39;m not listing here. You can find them over the net.</p>\r\n\r\n<h4>Tkinter Programming</h4>\r\n\r\n<p>Tkinter is the standard GUI library for Python. Python when combined with Tkinter provides a fast and easy way to create GUI applications. Tkinter provides a powerful object-oriented interface to the Tk GUI toolkit. Creating a GUI application using Tkinter is an easy task. All you need to do is perform the following steps:</p>\r\n\r\n<ul>\r\n\t<li>Import the Tkinter module.</li>\r\n\t<li>Create the GUI application main window.</li>\r\n\t<li>Add one or more of the above-mentioned widgets to the GUI application.</li>\r\n\t<li>Enter the main event loop to take action against each event triggered by the user.</li>\r\n</ul>\r\n\r\n<p>Example:</p>\r\n\r\n<pre>\r\nimport Tkinter\r\ntop = Tkinter.Tk()\r\n# Code to add widgets will go here...\r\ntop.mainloop()\r\n    </pre>\r\n\r\n<h4>Tkinter Widgets</h4>\r\n\r\n<p>Tkinter provides various controls, such as buttons, labels and text boxes used in a GUI application. These controls are commonly called widgets. There are currently 15 types of widgets in Tkinter. We present these widgets as well as a brief description in the following table:</p>\r\n\r\n<ul>\r\n\t<li>Operator And Description</li>\r\n\t<li>Button</li>\r\n\t<li>The Button widget is used to display buttons in your application.</li>\r\n\t<li>Canvas</li>\r\n\t<li>The Canvas widget is used to draw shapes, such as lines, ovals, polygons and rectangles, in your application.</li>\r\n\t<li>Checkbutton</li>\r\n\t<li>The Checkbutton widget is used to display a number of options as checkboxes. The user can select multiple options at a time.</li>\r\n\t<li>Entry</li>\r\n\t<li>The Entry widget is used to display a single-line text field for accepting values from a user.</li>\r\n\t<li>Frame</li>\r\n\t<li>The Frame widget is used as a container widget to organize other widgets.</li>\r\n\t<li>Label</li>\r\n\t<li>The Label widget is used to provide a single-line caption for other widgets. It can also contain images.</li>\r\n\t<li>Listbox</li>\r\n\t<li>The Listbox widget is used to provide a list of options to a user.</li>\r\n\t<li>Menubutton</li>\r\n\t<li>The Menubutton widget is used to display menus in your application.</li>\r\n\t<li>Menu</li>\r\n\t<li>The Menu widget is used to provide various commands to a user. These commands are contained inside Menubutton.</li>\r\n\t<li>Message</li>\r\n\t<li>The Message widget is used to display multiline text fields for accepting values from a user.</li>\r\n\t<li>Radiobutton</li>\r\n\t<li>The Radiobutton widget is used to display a number of options as radio buttons. The user can select only one option at a time.</li>\r\n\t<li>Scale</li>\r\n\t<li>The Scale widget is used to provide a slider widget.</li>\r\n\t<li>Scrollbar</li>\r\n\t<li>The Scrollbar widget is used to add scrolling capability to various widgets, such as list boxes.</li>\r\n\t<li>Text</li>\r\n\t<li>The Text widget is used to display text in multiple lines.</li>\r\n\t<li>Toplevel</li>\r\n\t<li>The Toplevel widget is used to provide a separate window container.</li>\r\n\t<li>Spinbox</li>\r\n\t<li>The Spinbox widget is a variant of the standard Tkinter Entry widget, which can be used to select from a fixed number of values.</li>\r\n\t<li>PanedWindow</li>\r\n\t<li>A PanedWindow is a container widget that may contain any number of panes, arranged horizontally or vertically.</li>\r\n\t<li>LabelFrame</li>\r\n\t<li>A labelframe is a simple container widget. Its primary purpose is to act as a spacer or container for complex window layouts.</li>\r\n\t<li>tkMessageBox</li>\r\n\t<li>This module is used to display message boxes in your applications.</li>\r\n</ul>\r\n\r\n<h4>Standard attributes</h4>\r\n\r\n<p>Let&#39;s take a look at how some of their common attributes.such as sizes, colors and fonts are specified.</p>\r\n\r\n<ul>\r\n\t<li>Dimensions</li>\r\n\t<li>Colors</li>\r\n\t<li>Fonts</li>\r\n\t<li>Anchors</li>\r\n\t<li>Relief styles</li>\r\n\t<li>Bitmaps</li>\r\n\t<li>Cursors</li>\r\n</ul>\r\n\r\n<h4>Geometry Management</h4>\r\n\r\n<p>All Tkinter widgets have access to specific geometry management methods, which have the purpose of organizing widgets throughout the parent widget area. Tkinter exposes the following geometry manager classes: pack, grid, and place.</p>\r\n\r\n<ul>\r\n\t<li>The pack() Method - This geometry manager organizes widgets in blocks before placing them in the parent widget.</li>\r\n\t<li>The grid() Method - This geometry manager organizes widgets in a table-like structure in the parent widget.</li>\r\n\t<li>The place() Method -This geometry manager organizes widgets by placing them in a specific position in the parent widget.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:22:28.196675", "intro_text": "Python provides various options for developing graphical user interfaces (GUIs). Most important are...", "lesson_id": 23, "resource_uri": "/lessonapi/Lesson/23/", "title": "GUI"}, {"body": "<p>Any code that you write using any compiled language like C, C++ or Java can be integrated or imported into another Python script. This code is considered as an &quot;extension.&quot; A Python extension module is nothing more than a normal C library. On Unix machines, these libraries usually end in .so (for shared object). On Windows machines, you typically see .dll (for dynamically linked library). Pre-Requisite: To start writing your extension, you are going to need the Python header files.</p>\r\n\r\n<ul>\r\n\t<li>On Unix machines, this usually requires installing a developer-specific package such as python2.5-dev.</li>\r\n\t<li>Windows users get these headers as part of the package when they use the binary Python installer.</li>\r\n</ul>\r\n\r\n<p>Additionally, it is assumed that you have good knowledge of C or C++ to write any Python Extension using C programming. First look at a Python extension: For your first look at a Python extension module, you&#39;ll be grouping your code into four parts:</p>\r\n\r\n<ul>\r\n\t<li>The header file Python.h.</li>\r\n\t<li>The C functions you want to expose as the interface from your module.</li>\r\n\t<li>A table mapping the names of your functions as Python developers will see them to C functions inside the extension module.</li>\r\n\t<li>An initialization function.</li>\r\n</ul>\r\n\r\n<h4>The header file Python.h</h4>\r\n\r\n<p>Start including Python.h header file in your C source file, which will give you access to the internal Python API used to hook your module into the interpreter. Be sure to include Python.h before any other headers you might need. You&#39;ll follow the includes with the functions you want to call from Python.</p>\r\n\r\n<h4>The C functions</h4>\r\n\r\n<p>The signatures of the C implementations of your functions will always take one of the following three forms:</p>\r\n\r\n<pre>\r\n    static PyObject *MyFunction( PyObject *self, PyObject *args );\r\n\r\nstatic PyObject *MyFunctionWithKeywords(PyObject *self,\r\n                                 PyObject *args,\r\n                                 PyObject *kw);\r\n\r\nstatic PyObject *MyFunctionWithNoArgs( PyObject *self );</pre>\r\n\r\n<p>Each one of the preceding declarations returns a Python object. There&#39;s no such thing as a void function in Python as there is in C. If you don&#39;t want your functions to return a value, return the C equivalent of Python&#39;s None value. The Python headers define a macro, Py_RETURN_NONE, that does this for us. The names of your C functions can be whatever you like as they will never be seen outside of the extension module. So they would be defined as static function. Your C functions usually are named by combining the Python module and function names together, as shown here:</p>\r\n\r\n<pre>\r\nstatic PyObject *module_func(PyObject *self, PyObject *args) {\r\n   /* Do your stuff here. */\r\n   Py_RETURN_NONE;\r\n}\r\n    </pre>\r\n\r\n<p>This would be a Python function called func inside of the module module. You&#39;ll be putting pointers to your C functions the method table for the module that usually comes next in your source code. The method mapping table: This method table is a simple array of PyMethodDef structures. That structure looks something like this:</p>\r\n\r\n<pre>\r\nstruct PyMethodDef {\r\n   char *ml_name;\r\n   PyCFunction ml_meth;\r\n   int ml_flags;\r\n   char *ml_doc;\r\n};\r\n    </pre>\r\n\r\n<p>Here is the description of the members of this structure:</p>\r\n\r\n<ul>\r\n\t<li>ml_name: This is the name of the function as the Python interpreter will present it when it is used in Python programs.</li>\r\n\t<li>ml_meth: This must be the address to a function that has any one of the signatures described in previous section.</li>\r\n\t<li>ml_flags: This tells the interpreter which of the three signatures ml_meth is using.</li>\r\n\t<li>This flag will usually have a value of METH_VARARGS.</li>\r\n\t<li>This flag can be bitwise or&#39;ed with METH_KEYWORDS if you want to allow keyword arguments into your function.</li>\r\n\t<li>This can also have a value of METH_NOARGS that indicates you don&#39;t want to accept any arguments.</li>\r\n\t<li>ml_doc: This is the docstring for the function, which could be NULL if you don&#39;t feel like writing one</li>\r\n</ul>\r\n\r\n<p>This table needs to be terminated with a sentinel that consists of NULL and 0 values for the appropriate members. Example: For the above-defined function, we would have following method mapping table:</p>\r\n\r\n<pre>\r\nstatic PyMethodDef module_methods[] = {\r\n   { &quot;func&quot;, (PyCFunction)module_func, METH_NOARGS, NULL },\r\n   { NULL, NULL, 0, NULL }\r\n};\r\n    </pre>\r\n\r\n<h4>The initialization function</h4>\r\n\r\n<p>The last part of your extension module is the initialization function. This function is called by the Python interpreter when the module is loaded. It&#39;s required that the function be named initModule, where Module is the name of the module. The initialization function needs to be exported from the library you&#39;ll be building. The Python headers define PyMODINIT_FUNC to include the appropriate incantations for that to happen for the particular environment in which we&#39;re compiling. All you have to do is use it when defining the function. Your C initialization function generally has the following overall structure:</p>\r\n\r\n<pre>\r\nPyMODINIT_FUNC initModule() {\r\n   Py_InitModule3(func, module_methods, &quot;docstring...&quot;);\r\n    </pre>\r\n\r\n<p>Here is the description of Py_InitModule3function:</p>\r\n\r\n<ul>\r\n\t<li>module_methods: This is the mapping table name defined above.</li>\r\n\t<li>docstring: This is the comment you want to give in your extension.</li>\r\n</ul>\r\n\r\n<p>Putting this all together looks like the following:</p>\r\n\r\n<pre>\r\n#include \r\n\r\nstatic PyObject *module_func(PyObject *self, PyObject *args) {\r\n   /* Do your stuff here. */\r\n   Py_RETURN_NONE;\r\n}\r\n\r\nstatic PyMethodDef module_methods[] = {\r\n   { &quot;func&quot;, (PyCFunction)module_func, METH_NOARGS, NULL },\r\n   { NULL, NULL, 0, NULL }\r\n};\r\n\r\nPyMODINIT_FUNC initModule() {\r\n   Py_InitModule3(func, module_methods, &quot;docstring...&quot;);\r\n}\r\n    </pre>\r\n\r\n<p>Example: A simple example that makes use of all the above concepts:</p>\r\n\r\n<pre>\r\n#include \r\n\r\nstatic PyObject* helloworld(PyObject* self)\r\n{\r\n    return Py_BuildValue(&quot;s&quot;, &quot;Hello, Python extensions!!&quot;);\r\n}\r\n\r\nstatic char helloworld_docs[] =\r\n    &quot;helloworld( ): Any message you want to put here!!\\n&quot;;\r\n\r\nstatic PyMethodDef helloworld_funcs[] = {\r\n    {&quot;helloworld&quot;, (PyCFunction)helloworld,\r\n     METH_NOARGS, helloworld_docs},\r\n    {NULL}\r\n};\r\n\r\nvoid inithelloworld(void)\r\n{\r\n    Py_InitModule3(&quot;helloworld&quot;, helloworld_funcs,\r\n                   &quot;Extension module example!&quot;);\r\n}\r\n    </pre>\r\n\r\n<p>Here the Py_BuildValue function is used to build a Python value. Save above code in hello.c file. We would see how to compile and install this module to be called from Python script.</p>\r\n\r\n<h4>Building and Installing Extensions</h4>\r\n\r\n<p>The distutils package makes it very easy to distribute Python modules, both pure Python and extension modules, in a standard way. Modules are distributed in source form and built and installed via a setup script usually called setup.py as follows. For the above module, you would have to prepare following setup.py script: from distutils.core import setup, Extension</p>\r\n\r\n<pre>\r\nsetup(name=&#39;helloworld&#39;, version=&#39;1.0&#39;,  \\\r\n      ext_modules=[Extension(&#39;helloworld&#39;, [&#39;hello.c&#39;])])</pre>\r\n\r\n<p>Now, use the following command, which would perform all needed compilation and linking steps, with the right compiler and linker commands and flags, and copies the resulting dynamic library into an appropriate directory: $ python setup.py install On Unix-based systems, you&#39;ll most likely need to run this command as root in order to have permissions to write to the site-packages directory. This usually isn&#39;t a problem on Windows</p>\r\n\r\n<h4>Import Extensions</h4>\r\n\r\n<p>Once you installed your extension, you would be able to import and call that extension in your Python script as follows:</p>\r\n\r\n<pre>\r\nimport helloworld\r\n\r\nprint helloworld.helloworld()</pre>\r\n\r\n<p>This would produce the following result:</p>\r\n\r\n<pre>\r\nHello, Python extensions!!</pre>\r\n\r\n<h4>Passing Function Parameters</h4>\r\n\r\n<p>Because you&#39;ll most likely want to define functions that do accept arguments, you can use one of the other signatures for your C functions. For example, following function, that accepts some number of parameters, would be defined like this:</p>\r\n\r\n<pre>\r\nstatic PyObject *module_func(PyObject *self, PyObject *args) {\r\n   /* Parse args and do something interesting here. */\r\n   Py_RETURN_NONE;\r\n}\r\n    </pre>\r\n\r\n<p>The method table containing an entry for the new function would look like this:</p>\r\n\r\n<pre>\r\nstatic PyMethodDef module_methods[] = {\r\n   { &quot;func&quot;, (PyCFunction)module_func, METH_NOARGS, NULL },\r\n   { &quot;func&quot;, module_func, METH_VARARGS, NULL },\r\n   { NULL, NULL, 0, NULL }\r\n};\r\n    </pre>\r\n\r\n<p>You can use API PyArg_ParseTuple function to extract the arguments from the one PyObject pointer passed into your C function. The first argument to PyArg_ParseTuple is the args argument. This is the object you&#39;ll be parsing. The second argument is a format string describing the arguments as you expect them to appear. Each argument is represented by one or more characters in the format string as follows.</p>\r\n\r\n<pre>\r\nstatic PyObject *module_func(PyObject *self, PyObject *args) {\r\n   int i;\r\n   double d;\r\n   char *s;\r\n\r\n   if (!PyArg_ParseTuple(args, &quot;ids&quot;, &amp;i, &amp;d, &amp;s)) {\r\n      return NULL;\r\n   }\r\n\r\n   /* Do something interesting here. */\r\n   Py_RETURN_NONE;\r\n}\r\n    </pre>\r\n\r\n<p>Compiling the new version of your module and importing it will enable you to invoke the new function with any number of arguments of any type:</p>\r\n\r\n<pre>\r\nmodule.func(1, s=&quot;three&quot;, d=2.0)\r\nmodule.func(i=1, d=2.0, s=&quot;three&quot;)\r\nmodule.func(s=&quot;three&quot;, d=2.0, i=1)</pre>\r\n\r\n<p>You can probably come up with even more variations.</p>\r\n\r\n<h4>The PyArg_ParseTupleFunction</h4>\r\n\r\n<p>Here is the standard signature for PyArg_ParseTuple function:</p>\r\n\r\n<pre>\r\nint PyArg_ParseTuple(PyObject* tuple,char* format,...)</pre>\r\n\r\n<p>This function returns 0 for errors, and a value not equal to 0 for success. tuple is the PyObject* that was the C function&#39;s second argument. Here format is a C string that describes mandatory and optional arguments. Here is a list of format codes for PyArg_ParseTuple function:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Code</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">C type</span></th>\r\n\t\t\t<th scope=\"col\" style=\"background-color:#0000ff; text-align:justify; vertical-align:middle\"><span style=\"color:#ffffff\">Meaning</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">c</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A Python string of length 1 becomes a C char.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">d</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">double</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A Python float becomes a C double.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">f</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">float</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A Python float becomes a C float.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">i</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">int</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A Python int becomes a C int.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">l</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">long</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A Python int becomes a C long.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">L</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">long long</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A Python int becomes a C long long</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">O</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">PyObject*</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Gets non-NULL borrowed reference to Python argument.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">s</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Python string without embedded nulls to C char*. </span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">s#</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*+int</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Any Python string to C address and length.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">t#</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*+int</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Read-only single-segment buffer to C address and length.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">u</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Py_UNICODE*</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Python Unicode without embedded nulls to C.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">u#</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Py_UNICODE*+int</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Any Python Unicode C address and length.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">w#</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*+int</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Read/write single-segment buffer to C address and length.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">z</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Like s, also accepts None (sets C char* to NULL). </span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">z#</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*+int</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Like s#, also accepts None (sets C char* to NULL).</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">(...)</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">as per ...</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A Python sequence is treated as one argument per item</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">:</span></td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Format end, followed by function name for error messages.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">;</span></td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Format end, followed by entire error message text.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">|</span></td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td><span style=\"color:#0000ff\">The following arguments are optional.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\n<h4>Returning Values</h4>\r\n\r\n<p>Py_BuildValue takes in a format string much like PyArg_ParseTuple does. Instead of passing in the addresses of the values you&#39;re building, you pass in the actual values. Here&#39;s an example showing how to implement an add function:</p>\r\n\r\n<pre>\r\nstatic PyObject *foo_add(PyObject *self, PyObject *args) {\r\n   int a;\r\n   int b;\r\n\r\n   if (!PyArg_ParseTuple(args, &quot;ii&quot;, &amp;a, &amp;b)) {\r\n      return NULL;\r\n   }\r\n   return Py_BuildValue(&quot;i&quot;, a + b);\r\n}</pre>\r\n\r\n<p>This is what it would look like if implemented in Python:</p>\r\n\r\n<pre>\r\n    def add(a, b):\r\n        return (a + b)\r\n    </pre>\r\n\r\n<p>You can return two values from your function as follows, this would be cauptured using a list in Python.</p>\r\n\r\n<pre>\r\n    static PyObject *foo_add_subtract(PyObject *self, PyObject *args) {\r\n        int a;\r\n        int b;\r\n\r\n    if (!PyArg_ParseTuple(args, &quot;ii&quot;, &amp;a, &amp;b)) {\r\n          return NULL;\r\n    }\r\n        return Py_BuildValue(&quot;ii&quot;, a + b, a - b);\r\n    }\r\n    </pre>\r\n\r\n<p>This is what it would look like if implemented in Python:</p>\r\n\r\n<pre>\r\ndef add_subtract(a, b):\r\n   return (a + b, a - b)\r\n    </pre>\r\n\r\n<h4>The Py_BuildValue Function</h4>\r\n\r\n<p>Here is the standard signature for Py_BuildValue function:</p>\r\n\r\n<pre>\r\nPyObject* Py_BuildValue(char* format,...)\r\n    </pre>\r\n\r\n<p>Here format is a C string that describes the Python object to build. The following arguments of Py_BuildValue are C values from which the result is built. The PyObject* result is a new reference. Following table lists the commonly used code strings, of which zero or more are joined into string format.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"overflow-x:auto;\">\r\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\" style=\"text-align: justify; vertical-align: middle; background-color: rgb(0, 0, 255);\"><span style=\"color:#ffffff\">Code</span></th>\r\n\t\t\t<th scope=\"col\" style=\"text-align: justify; vertical-align: middle; background-color: rgb(0, 0, 255);\"><span style=\"color:#ffffff\">C type</span></th>\r\n\t\t\t<th scope=\"col\" style=\"text-align: justify; vertical-align: middle; background-color: rgb(0, 0, 255);\"><span style=\"color:#ffffff\">Meaning</span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">c</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A C char becomes a Python string of length 1.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">d</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">double </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A C double becomes a Python float.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">f</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">float</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A C float becomes a Python float.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">i</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">int </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A C int becomes a Python int.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">l</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">long</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">A C long becomes a Python int.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">N</span></td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td><span style=\"color:#0000ff\">PyObject* Passes a Python object and steals a reference. </span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">O</span></td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td><span style=\"color:#0000ff\">PyObject* Passes a Python object and INCREFs it as normal.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">O&amp;</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">convert+void*</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Arbitrary conversion</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">s</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">C 0-terminated char* to Python string, or NULL to None.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">s#</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*+int</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">C char* and length to Python string, or NULL to None.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">u</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Py_UNICODE* </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">C-wide, null-terminated string to Python Unicode, or NULL to None.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">u#</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Py_UNICODE*+int </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">C-wide string and length to Python Unicode, or NULL to None.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">w#</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*+int </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Read/write single-segment buffer to C address and length.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">z</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Like s, also accepts None (sets C char* to NULL).</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">z#</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">char*+int </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Like s#, also accepts None (sets C char* to NULL).</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">(...) </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">as per ... </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Builds Python tuple from C values. </span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">[...]</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">as per ...</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Builds Python list from C values.</span></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><span style=\"color:#0000ff\">{...} </span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">as per ...</span></td>\r\n\t\t\t<td><span style=\"color:#0000ff\">Builds Python dictionary from C values, alternating keys and values.</span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n</div>\r\n\r\nCode\r\n<pre> \r\n{...} builds dictionaries from an even number of C values, alternately keys and values. For example, Py_BuildValue(&quot;{issi}&quot;,23,&quot;zig&quot;,&quot;zag&quot;,42) returns a dictionary like Python&#39;s {23:&#39;zig&#39;,&#39;zag&#39;:42}.</pre>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:25:43.485045", "intro_text": "Any code that you write using any compiled language like C, C++ or Java can be integrated or imported into another Python script. This code is considered as an \"extension.\"", "lesson_id": 24, "resource_uri": "/lessonapi/Lesson/24/", "title": "Extensions"}, {"body": "<p>The standard library comes with a number of modules that can be used both as modules and as command-line utilities. The dis Module: The dis module is the Python disassembler. It converts byte codes to a format that is slightly more appropriate for human consumption. You can run the disassembler from the command line. It compiles the given script and prints the disassembled byte codes to the STDOUT. You can also use dis as a module. The dis function takes a class, method, function or code object as its single argument. Example:</p>\r\n\r\n<pre>\r\nimport dis\r\n\r\ndef sum():\r\n   vara = 10\r\n   varb = 20\r\n\r\n   sum = vara + varb\r\n   print &quot;vara + varb = %d&quot; % sum\r\n\r\n# Call dis function for the function.\r\n\r\ndis.dis(sum)</pre>\r\n\r\n<p>This would produce the following result:</p>\r\n\r\n<pre>\r\n  6           0 LOAD_CONST               1 (10)\r\n              3 STORE_FAST               0 (vara)\r\n\r\n  7           6 LOAD_CONST               2 (20)\r\n              9 STORE_FAST               1 (varb)\r\n\r\n  9          12 LOAD_FAST                0 (vara)\r\n             15 LOAD_FAST                1 (varb)\r\n             18 BINARY_ADD\r\n             19 STORE_FAST               2 (sum)\r\n\r\n 10          22 LOAD_CONST               3 (&#39;vara + varb = %d&#39;)\r\n             25 LOAD_FAST                2 (sum)\r\n             28 BINARY_MODULO\r\n             29 PRINT_ITEM\r\n             30 PRINT_NEWLINE\r\n             31 LOAD_CONST               0 (None)\r\n             34 RETURN_VALUE</pre>\r\n\r\n<h4>The pdb Module</h4>\r\n\r\n<p>The pdb module is the standard Python debugger. It is based on the bdb debugger framework. You can run the debugger from the command line (type n [or next] to go to the next line and help to get a list of available commands): Example: Before you try to run pdb.py, set your path properly to Python lib directory. So let us try with above example sum.py: $pdb.py sum.py</p>\r\n\r\n<pre>\r\n&gt; /test/sum.py(3)()\r\n-&gt; import dis\r\n(Pdb) n\r\n&gt; /test/sum.py(5)()\r\n-&gt; def sum():\r\n(Pdb) n\r\n&gt;/test/sum.py(14)()\r\n-&gt; dis.dis(sum)\r\n(Pdb) n\r\n  6           0 LOAD_CONST               1 (10)\r\n              3 STORE_FAST               0 (vara)\r\n\r\n  7           6 LOAD_CONST               2 (20)\r\n              9 STORE_FAST               1 (varb)\r\n\r\n  9          12 LOAD_FAST                0 (vara)\r\n             15 LOAD_FAST                1 (varb)\r\n             18 BINARY_ADD\r\n             19 STORE_FAST               2 (sum)\r\n\r\n 10          22 LOAD_CONST               3 (&#39;vara + varb = %d&#39;)\r\n             25 LOAD_FAST                2 (sum)\r\n             28 BINARY_MODULO\r\n             29 PRINT_ITEM\r\n             30 PRINT_NEWLINE\r\n             31 LOAD_CONST               0 (None)\r\n             34 RETURN_VALUE\r\n--Return--\r\n&gt; /test/sum.py(14)()-&gt;None\r\n-v dis.dis(sum)\r\n(Pdb) n\r\n--Return--\r\n&gt; (1)()-&gt;None\r\n(Pdb)\r\n    </pre>\r\n\r\n<h4>The profile Module</h4>\r\n\r\n<p>The profile module is the standard Python profiler. You can run the profiler from the command line: Example: Let us try to profile the following program:</p>\r\n\r\n<pre>\r\nvara = 10\r\nvarb = 20\r\n\r\nsum = vara + varb\r\nprint &quot;vara + varb = %d&quot; % sum\r\nNow, try running cProfile.py over this file sum.pyas follows:\r\n$cProfile.py sum.py\r\nvara + varb = 30\r\n         4 function calls in 0.000 CPU seconds\r\n\r\n   Ordered by: standard name\r\n\r\nncalls  tottime  percall  cumtime  percall filename:lineno\r\n   1    0.000    0.000    0.000    0.000 :1()\r\n   1    0.000    0.000    0.000    0.000 sum.py:3()\r\n   1    0.000    0.000    0.000    0.000 {execfile}\r\n   1    0.000    0.000    0.000    0.000 {method ......}</pre>\r\n\r\n<h4>The tabnanny Module</h4>\r\n\r\n<p>The tabnanny module checks Python source files for ambiguous indentation. If a file mixes tabs and spaces in a way that throws off indentation, no matter what tab size you&#39;re using, the nanny complains: Example: Let us try to profile the following program:</p>\r\n\r\n<pre>\r\nvara = 10\r\nvarb = 20\r\n\r\nsum = vara + varb\r\nprint &quot;vara + varb = %d&quot; % sum\r\n    </pre>\r\n\r\n<p>If you would try a correct file with tabnanny.py, then it won&#39;t complain as follows:</p>\r\n\r\n<pre>\r\n$tabnanny.py -v sum.py\r\n&#39;sum.py&#39;: Clean bill of health.</pre>\r\n\r\n<h4>Other Python Utils</h4>\r\n\r\n<p>There exist a lot of frameworks for Python programming that you can utilise to make your work easier. Search the internet for modules before writing your own in order to cut short the time spent developing. Other programmers have made available many utilities in the forms of frameworks, modules and extensions. Such frameworks, extensions, modules.., include; to mention but a few:</p>\r\n\r\n<ul>\r\n\t<li>Flask (For web application development)</li>\r\n\t<li>Django (Web Application development)</li>\r\n\t<li>sl4a (Python&#39;s Scripting layer 4 Android)</li>\r\n\t<li>Numpy (Numerical Python for your mathematical algorithms)</li>\r\n\t<li>Scipy</li>\r\n\t<li>Matplotlib (For Plotting beautiful and analytical graphs)</li>\r\n\t<li>Beautiful Soup</li>\r\n\t<li>Pandas</li>\r\n</ul>\r\n\r\n<p>These are but a few of the great tools available.Read on these to extend your programming experience in Python.</p>\r\n\r\n<h4>Send us Feedback</h4>\r\n\r\n<p>Thank you for journeying with PywE. We will like to get some feedback from you in order to improve our future courses and even the one you took for those coming in. <a href=\"learn.pythonanywhere.com/forum/\" style=\"color:blue;\">Send us feedback&gt;&gt;&gt;&nbsp;</a>.</p>\r\n\r\n<p>&nbsp;</p>", "created_by": "Ellie", "date_created": "2018-12-04T22:27:15.812386", "intro_text": "The standard library comes with a number of modules that can be used both as modules and as command-line utilities.", "lesson_id": 25, "resource_uri": "/lessonapi/Lesson/25/", "title": "Utilities"}, {"body": "<h4>New to Programming?</h4>\r\n\r\n<p>Are you totally new to programming or python as a programming language? Difficulties setting up your IDE/IDLE&nbsp;all by yourself?</p>\r\n\r\n<p>Then let&#39;s get going.</p>\r\n\r\n<p>If you dont want to go through all the hustle of installation processes (it&#39;s quite easy though) You can visit this site&nbsp;<a href=\"https://www.pythonanywhere.com\">pythonanywhere</a>&nbsp;and do all your coding online.<br />\r\nWe also have an online coding platform for you&nbsp;<a href=\"https://www.onlinegdb.com/online_python_compiler\">here</a>&nbsp;powered by OnlineGDB beta.</p>\r\n\r\n<p>However, if you still want to install everything on your device then let&#39;s&nbsp;visit&nbsp;<a href=\"https://www.python.org\">Python&#39;s Official website</a>&nbsp;to downlaod the python version of your choice. There are&nbsp;currently Python 2.x and Python 3.x, you can download any of them.&nbsp;<br />\r\nThe most up-to-date and current source code, binaries, documentation, news, etc. is available at the official website of Python: Python Official Website :<a href=\"http://www.python.org/\">Python.org</a>&nbsp;</p>\r\n\r\n<p>You can download Python documentation from the following site.&nbsp;<br />\r\nThe documentation is available in HTML, PDF and PostScript formats. Python Documentation Website :<a href=\"http://www.python.org/doc/\">Python doc</a></p>\r\n\r\n<h4>Can I Code on my Android?</h4>\r\n\r\n<p>Yes, you can. There are good Android IDEs on the market that you can get, I will personally recommend you check out Qpython or Pydroid.&nbsp;</p>\r\n\r\n<h4>I don&#39;t like the native IDLE for Python.</h4>\r\n\r\n<p>If you happen to be used to code suggestions from smart IDLEs and therefore find the native Python IDLE boring and difficult to use, you can go for some smart IDEs. I recommend Pycharm, one of the best and smartest IDEs I have come accross.</p>\r\n\r\n<p>Google them, find and download those and let&#39;s get down to programming.</p>\r\n\r\n<p><strong>Happy Pythoning -- Pywe.</strong></p>", "created_by": "Ellie", "date_created": "2019-01-21T08:51:40.000016", "intro_text": "Are you totally new to programming or python as a programming language? Any difficulties setting up your IDE(IDLE) all by yourself? Then let's get going.", "lesson_id": 26, "resource_uri": "/lessonapi/Lesson/26/", "title": "Getting Started"}]}